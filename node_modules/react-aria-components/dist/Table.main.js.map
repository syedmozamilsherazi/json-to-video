{"mappings":"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","sources":["packages/react-aria-components/src/Table.tsx"],"sourcesContent":["import {AriaLabelingProps, HoverEvents, Key, LinkDOMProps} from '@react-types/shared';\nimport {BaseCollection, CollectionContext, CollectionProps, CollectionRendererContext, ItemRenderProps, NodeValue, useCachedChildren, useCollection, useCollectionChildren, useSSRCollectionNode} from './Collection';\nimport {buildHeaderRows, TableColumnResizeState} from '@react-stately/table';\nimport {ButtonContext} from './Button';\nimport {CheckboxContext} from './RSPContexts';\nimport {ColumnSize, ColumnStaticSize, TableCollection as ITableCollection, TableProps as SharedTableProps} from '@react-types/table';\nimport {ContextValue, DEFAULT_SLOT, DOMProps, forwardRefType, Provider, RenderProps, ScrollableProps, SlotProps, StyleProps, StyleRenderProps, useContextProps, useRenderProps} from './utils';\nimport {DisabledBehavior, DraggableCollectionState, DroppableCollectionState, Node, SelectionBehavior, SelectionMode, SortDirection, TableState, useTableColumnResizeState, useTableState} from 'react-stately';\nimport {DragAndDropContext, DragAndDropHooks, DropIndicator, DropIndicatorContext, DropIndicatorProps} from './useDragAndDrop';\nimport {DraggableItemResult, DragPreviewRenderer, DropIndicatorAria, DroppableCollectionResult, FocusScope, ListKeyboardDelegate, mergeProps, useFocusRing, useHover, useLocale, useLocalizedStringFormatter, useTable, useTableCell, useTableColumnHeader, useTableColumnResize, useTableHeaderRow, useTableRow, useTableRowGroup, useTableSelectAllCheckbox, useTableSelectionCheckbox, useVisuallyHidden} from 'react-aria';\nimport {filterDOMProps, useLayoutEffect, useObjectRef, useResizeObserver} from '@react-aria/utils';\nimport {GridNode} from '@react-types/grid';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport React, {createContext, ForwardedRef, forwardRef, JSX, ReactElement, ReactNode, RefObject, useCallback, useContext, useEffect, useMemo, useRef, useState} from 'react';\nimport ReactDOM from 'react-dom';\n\nclass TableCollection<T> extends BaseCollection<T> implements ITableCollection<T> {\n  headerRows: GridNode<T>[] = [];\n  columns: GridNode<T>[] = [];\n  rowHeaderColumnKeys: Set<Key> = new Set();\n  head: NodeValue<T> = new NodeValue('tableheader', -1);\n  body: NodeValue<T> = new NodeValue('tablebody', -2);\n  columnsDirty = true;\n\n  addNode(node: NodeValue<T>) {\n    super.addNode(node);\n\n    this.columnsDirty ||= node.type === 'column';\n    if (node.type === 'tableheader') {\n      this.head = node;\n    }\n\n    if (node.type === 'tablebody') {\n      this.body = node;\n    }\n  }\n\n  commit(firstKey: Key, lastKey: Key, isSSR = false) {\n    this.updateColumns(isSSR);\n    super.commit(firstKey, lastKey, isSSR);\n  }\n\n  private updateColumns(isSSR: boolean) {\n    if (!this.columnsDirty) {\n      return;\n    }\n\n    this.rowHeaderColumnKeys = new Set();\n    this.columns = [];\n\n    let columnKeyMap = new Map();\n    let visit = (node: Node<T>) => {\n      switch (node.type) {\n        case 'column':\n          columnKeyMap.set(node.key, node);\n          if (!node.hasChildNodes) {\n            node.index = this.columns.length;\n            this.columns.push(node);\n\n            if (node.props.isRowHeader) {\n              this.rowHeaderColumnKeys.add(node.key);\n            }\n          }\n          break;\n      }\n      for (let child of this.getChildren(node.key)) {\n        visit(child);\n      }\n    };\n\n    for (let node of this.getChildren(this.head.key)) {\n      visit(node);\n    }\n\n    this.headerRows = buildHeaderRows(columnKeyMap, this.columns);\n    this.columnsDirty = false;\n    if (this.rowHeaderColumnKeys.size === 0 && this.columns.length > 0 && !isSSR) {\n      throw new Error('A table must have at least one Column with the isRowHeader prop set to true');\n    }\n  }\n\n  get columnCount() {\n    return this.columns.length;\n  }\n\n  get rows() {\n    return [...this.getChildren(this.body.key)];\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.getChildren(this.body.key);\n  }\n\n  get size() {\n    return [...this.getChildren(this.body.key)].length;\n  }\n\n  getFirstKey() {\n    return [...this.getChildren(this.body.key)][0]?.key;\n  }\n\n  getLastKey() {\n    let rows = [...this.getChildren(this.body.key)];\n    return rows[rows.length - 1]?.key;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.getItem(key);\n    if (node?.type === 'column') {\n      return node.nextKey ?? null;\n    }\n\n    return super.getKeyAfter(key);\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.getItem(key);\n    if (node?.type === 'column') {\n      return node.prevKey ?? null;\n    }\n\n    let k = super.getKeyBefore(key);\n    if (k != null && this.getItem(k)?.type === 'tablebody') {\n      return null;\n    }\n\n    return k;\n  }\n\n  getChildren(key: Key): Iterable<Node<T>> {\n    if (!this.getItem(key)) {\n      for (let row of this.headerRows) {\n        if (row.key === key) {\n          return row.childNodes;\n        }\n      }\n    }\n\n    return super.getChildren(key);\n  }\n\n  clone() {\n    let collection = super.clone();\n    collection.headerRows = this.headerRows;\n    collection.columns = this.columns;\n    collection.rowHeaderColumnKeys = this.rowHeaderColumnKeys;\n    collection.head = this.head;\n    collection.body = this.body;\n    return collection;\n  }\n\n  getTextValue(key: Key): string {\n    let row = this.getItem(key);\n    if (!row) {\n      return '';\n    }\n\n    // If the row has a textValue, use that.\n    if (row.textValue) {\n      return row.textValue;\n    }\n\n    // Otherwise combine the text of each of the row header columns.\n    let rowHeaderColumnKeys = this.rowHeaderColumnKeys;\n    let text: string[] = [];\n    for (let cell of this.getChildren(key)) {\n      let column = this.columns[cell.index!];\n      if (rowHeaderColumnKeys.has(column.key) && cell.textValue) {\n        text.push(cell.textValue);\n      }\n\n      if (text.length === rowHeaderColumnKeys.size) {\n        break;\n      }\n    }\n\n    return text.join(' ');\n  }\n}\n\ninterface ResizableTableContainerContextValue {\n  tableWidth: number,\n  // Dependency inject useTableColumnResizeState so it doesn't affect bundle size unless you're using ResizableTableContainer.\n  useTableColumnResizeState: typeof useTableColumnResizeState,\n  onResizeStart?: (widths: Map<Key, ColumnSize>) => void,\n  onResize?: (widths: Map<Key, ColumnSize>) => void,\n  onResizeEnd?: (widths: Map<Key, ColumnSize>) => void\n}\n\nconst ResizableTableContainerContext = createContext<ResizableTableContainerContextValue | null>(null);\n\nexport interface ResizableTableContainerProps extends DOMProps, ScrollableProps<HTMLDivElement> {\n  /**\n   * Handler that is called when a user starts a column resize.\n   */\n  onResizeStart?: (widths: Map<Key, ColumnSize>) => void,\n  /**\n   * Handler that is called when a user performs a column resize.\n   * Can be used with the width property on columns to put the column widths into\n   * a controlled state.\n   */\n  onResize?: (widths: Map<Key, ColumnSize>) => void,\n  /**\n   * Handler that is called after a user performs a column resize.\n   * Can be used to store the widths of columns for another future session.\n   */\n  onResizeEnd?: (widths: Map<Key, ColumnSize>) => void\n}\n\nfunction ResizableTableContainer(props: ResizableTableContainerProps, ref: ForwardedRef<HTMLDivElement>) {\n  let objectRef = useObjectRef(ref);\n  let [width, setWidth] = useState(0);\n  useResizeObserver({\n    ref: objectRef,\n    onResize() {\n      setWidth(objectRef.current?.clientWidth ?? 0);\n    }\n  });\n\n  useLayoutEffect(() => {\n    setWidth(objectRef.current?.clientWidth ?? 0);\n  }, [objectRef]);\n\n  let ctx = useMemo(() => ({\n    tableWidth: width,\n    useTableColumnResizeState,\n    onResizeStart: props.onResizeStart,\n    onResize: props.onResize,\n    onResizeEnd: props.onResizeEnd\n  }), [width, props.onResizeStart, props.onResize, props.onResizeEnd]);\n\n  return (\n    <div\n      {...filterDOMProps(props as any)}\n      ref={objectRef}\n      className={props.className || 'react-aria-ResizableTableContainer'}\n      style={props.style}\n      onScroll={props.onScroll}>\n      <ResizableTableContainerContext.Provider value={ctx}>\n        {props.children}\n      </ResizableTableContainerContext.Provider>\n    </div>\n  );\n}\n\nconst _ResizableTableContainer = forwardRef(ResizableTableContainer);\nexport {_ResizableTableContainer as ResizableTableContainer};\n\nexport const TableContext = createContext<ContextValue<TableProps, HTMLTableElement>>(null);\nexport const TableStateContext = createContext<TableState<unknown> | null>(null);\nexport const TableColumnResizeStateContext = createContext<TableColumnResizeState<unknown> | null>(null);\n\nexport interface TableRenderProps {\n  /**\n   * Whether the table is currently focused.\n   * @selector [data-focused]\n   */\n  isFocused: boolean,\n  /**\n   * Whether the table is currently keyboard focused.\n   * @selector [data-focus-visible]\n   */\n  isFocusVisible: boolean,\n  /**\n   * Whether the table is currently the active drop target.\n   * @selector [data-drop-target]\n   */\n  isDropTarget: boolean,\n  /**\n   * State of the table.\n   */\n  state: TableState<unknown>\n}\n\nexport interface TableProps extends Omit<SharedTableProps<any>, 'children'>, StyleRenderProps<TableRenderProps>, SlotProps, AriaLabelingProps, ScrollableProps<HTMLTableElement> {\n  /** The elements that make up the table. Includes the TableHeader, TableBody, Columns, and Rows. */\n  children?: ReactNode,\n  /**\n   * How multiple selection should behave in the collection.\n   * @default \"toggle\"\n   */\n  selectionBehavior?: SelectionBehavior,\n  /**\n   * Whether `disabledKeys` applies to all interactions, or only selection.\n   * @default \"selection\"\n   */\n  disabledBehavior?: DisabledBehavior,\n  /** Handler that is called when a user performs an action on the row. */\n  onRowAction?: (key: Key) => void,\n  /** The drag and drop hooks returned by `useDragAndDrop` used to enable drag and drop behavior for the Table. */\n  dragAndDropHooks?: DragAndDropHooks\n}\n\nfunction Table(props: TableProps, ref: ForwardedRef<HTMLTableElement>) {\n  [props, ref] = useContextProps(props, ref, TableContext);\n  let initialCollection = useMemo(() => new TableCollection<any>(), []);\n  let {portal, collection} = useCollection(props, initialCollection);\n  let state = useTableState({\n    ...props,\n    collection,\n    children: undefined\n  });\n\n  let {gridProps} = useTable(props, state, ref);\n\n  let {dragAndDropHooks} = props;\n  let selectionManager = state.selectionManager;\n  let hasDragHooks = !!dragAndDropHooks?.useDraggableCollectionState;\n  let hasDropHooks = !!dragAndDropHooks?.useDroppableCollectionState;\n  let dragHooksProvided = useRef(hasDragHooks);\n  let dropHooksProvided = useRef(hasDropHooks);\n  useEffect(() => {\n    if (dragHooksProvided.current !== hasDragHooks) {\n      console.warn('Drag hooks were provided during one render, but not another. This should be avoided as it may produce unexpected behavior.');\n    }\n    if (dropHooksProvided.current !== hasDropHooks) {\n      console.warn('Drop hooks were provided during one render, but not another. This should be avoided as it may produce unexpected behavior.');\n    }\n  }, [hasDragHooks, hasDropHooks]);\n\n  let dragState: DraggableCollectionState | undefined = undefined;\n  let dropState: DroppableCollectionState | undefined = undefined;\n  let droppableCollection: DroppableCollectionResult | undefined = undefined;\n  let isRootDropTarget = false;\n  let dragPreview: JSX.Element | null = null;\n  let preview = useRef<DragPreviewRenderer>(null);\n\n  if (hasDragHooks && dragAndDropHooks) {\n    dragState = dragAndDropHooks.useDraggableCollectionState!({\n      collection,\n      selectionManager,\n      preview: dragAndDropHooks.renderDragPreview ? preview : undefined\n    });\n    dragAndDropHooks.useDraggableCollection!({}, dragState, ref);\n\n    let DragPreview = dragAndDropHooks.DragPreview!;\n    dragPreview = dragAndDropHooks.renderDragPreview\n      ? <DragPreview ref={preview}>{dragAndDropHooks.renderDragPreview}</DragPreview>\n      : null;\n  }\n\n  if (hasDropHooks && dragAndDropHooks) {\n    dropState = dragAndDropHooks.useDroppableCollectionState!({\n      collection,\n      selectionManager\n    });\n\n    let keyboardDelegate = new ListKeyboardDelegate({\n      collection,\n      disabledKeys: selectionManager.disabledKeys,\n      disabledBehavior: selectionManager.disabledBehavior,\n      ref\n    });\n    let dropTargetDelegate = dragAndDropHooks.dropTargetDelegate || new dragAndDropHooks.ListDropTargetDelegate(collection, ref);\n    droppableCollection = dragAndDropHooks.useDroppableCollection!({\n      keyboardDelegate,\n      dropTargetDelegate\n    }, dropState, ref);\n\n    isRootDropTarget = dropState.isDropTarget({type: 'root'});\n  }\n\n  let {focusProps, isFocused, isFocusVisible} = useFocusRing();\n  let renderProps = useRenderProps({\n    className: props.className,\n    style: props.style,\n    defaultClassName: 'react-aria-Table',\n    values: {\n      isDropTarget: isRootDropTarget,\n      isFocused,\n      isFocusVisible,\n      state\n    }\n  });\n\n  let isListDraggable = !!(hasDragHooks && !dragState?.isDisabled);\n  let isListDroppable = !!(hasDropHooks && !dropState?.isDisabled);\n\n  let {selectionBehavior, selectionMode, disallowEmptySelection} = state.selectionManager;\n  let ctx = useMemo(() => ({\n    selectionBehavior: selectionMode === 'none' ? null : selectionBehavior,\n    selectionMode,\n    disallowEmptySelection,\n    allowsDragging: hasDragHooks\n  }), [selectionBehavior, selectionMode, disallowEmptySelection, hasDragHooks]);\n\n  let style = renderProps.style;\n  let tableContainerContext = useContext(ResizableTableContainerContext);\n  let layoutState: TableColumnResizeState<unknown> | null = null;\n  if (tableContainerContext) {\n    layoutState = tableContainerContext.useTableColumnResizeState({\n      tableWidth: tableContainerContext.tableWidth\n    }, state);\n    style = {\n      ...style,\n      tableLayout: 'fixed',\n      width: 'fit-content'\n    };\n  }\n\n  return (\n    <>\n      <TableOptionsContext.Provider value={ctx}>\n        {portal}\n      </TableOptionsContext.Provider>\n      <Provider\n        values={[\n          [TableStateContext, state],\n          [TableColumnResizeStateContext, layoutState],\n          [DragAndDropContext, {dragAndDropHooks, dragState, dropState}],\n          [DropIndicatorContext, {render: TableDropIndicatorWrapper}]\n        ]}>\n        <FocusScope>\n          <table\n            {...filterDOMProps(props)}\n            {...renderProps}\n            {...mergeProps(gridProps, focusProps, droppableCollection?.collectionProps)}\n            style={style}\n            ref={ref}\n            slot={props.slot || undefined}\n            onScroll={props.onScroll}\n            data-allows-dragging={isListDraggable || undefined}\n            data-drop-target={isRootDropTarget || undefined}\n            data-focused={isFocused || undefined}\n            data-focus-visible={isFocusVisible || undefined}>\n            <TableHeaderRowGroup collection={collection} />\n            <TableBodyRowGroup collection={collection} isDroppable={isListDroppable} />\n          </table>\n        </FocusScope>\n        {dragPreview}\n      </Provider>\n    </>\n  );\n}\n\n/**\n * A table displays data in rows and columns and enables a user to navigate its contents via directional navigation keys,\n * and optionally supports row selection and sorting.\n */\nconst _Table = forwardRef(Table);\nexport {_Table as Table};\n\nexport interface TableOptionsContextValue {\n  /** The type of selection that is allowed in the table. */\n  selectionMode: SelectionMode,\n  /** The selection behavior for the table. If selectionMode is `\"none\"`, this will be `null`. */\n  selectionBehavior: SelectionBehavior | null,\n  /** Whether the table allows empty selection. */\n  disallowEmptySelection: boolean,\n  /** Whether the table allows rows to be dragged. */\n  allowsDragging: boolean\n}\n\nconst TableOptionsContext = createContext<TableOptionsContextValue | null>(null);\n\n/**\n * Returns options from the parent `<Table>` component.\n */\nexport function useTableOptions(): TableOptionsContextValue {\n  return useContext(TableOptionsContext)!;\n}\n\nexport interface TableHeaderProps<T> extends StyleProps {\n  /** A list of table columns. */\n  columns?: T[],\n  /** A list of `Column(s)` or a function. If the latter, a list of columns must be provided using the `columns` prop. */\n  children?: ReactNode | ((item: T) => ReactElement),\n  /** Values that should invalidate the column cache when using dynamic collections. */\n  dependencies?: any[]\n}\n\nfunction TableHeader<T extends object>(props: TableHeaderProps<T>, ref: ForwardedRef<HTMLTableSectionElement>) {\n  let children = useCollectionChildren({\n    children: props.children,\n    items: props.columns,\n    dependencies: props.dependencies\n  });\n\n  let renderer = typeof props.children === 'function' ? props.children : null;\n  return (\n    <CollectionRendererContext.Provider value={renderer}>\n      {useSSRCollectionNode('tableheader', props, ref, null, children)}\n    </CollectionRendererContext.Provider>\n  );\n}\n\n/**\n * A header within a `<Table>`, containing the table columns.\n */\nconst _TableHeader = /*#__PURE__*/ (forwardRef as forwardRefType)(TableHeader);\nexport {_TableHeader as TableHeader};\n\nexport interface ColumnRenderProps {\n  /**\n   * Whether the item is currently hovered with a mouse.\n   * @selector [data-hovered]\n   */\n  isHovered: boolean,\n  /**\n   * Whether the item is currently focused.\n   * @selector [data-focused]\n   */\n  isFocused: boolean,\n  /**\n   * Whether the item is currently keyboard focused.\n   * @selector [data-focus-visible]\n   */\n  isFocusVisible: boolean,\n  /**\n   * Whether the column allows sorting.\n   * @selector [data-allows-sorting]\n   */\n  allowsSorting: boolean,\n  /**\n   * The current sort direction.\n   * @selector [data-sort-direction=\"ascending | descending\"]\n   */\n  sortDirection: SortDirection | undefined,\n  /**\n   * Whether the column is currently being resized.\n   * @selector [data-resizing]\n   */\n  isResizing: boolean,\n  /**\n   * Triggers sorting for this column in the given direction.\n   */\n  sort(direction: SortDirection): void,\n  /**\n   * Starts column resizing if the table is contained in a `<ResizableTableContainer>` element.\n   */\n  startResize(): void\n}\n\nexport interface ColumnProps extends RenderProps<ColumnRenderProps> {\n  /** The unique id of the column. */\n  id?: Key,\n  /** Whether the column allows sorting. */\n  allowsSorting?: boolean,\n  /** Whether a column is a [row header](https://www.w3.org/TR/wai-aria-1.1/#rowheader) and should be announced by assistive technology during row navigation. */\n  isRowHeader?: boolean,\n  /** A string representation of the column's contents, used for accessibility announcements. */\n  textValue?: string,\n  /** The width of the column. This prop only applies when the `<Table>` is wrapped in a `<ResizableTableContainer>`. */\n  width?: ColumnSize | null,\n  /** The default width of the column. This prop only applies when the `<Table>` is wrapped in a `<ResizableTableContainer>`. */\n  defaultWidth?: ColumnSize | null,\n  /** The minimum width of the column. This prop only applies when the `<Table>` is wrapped in a `<ResizableTableContainer>`. */\n  minWidth?: ColumnStaticSize | null,\n  /** The maximum width of the column. This prop only applies when the `<Table>` is wrapped in a `<ResizableTableContainer>`. */\n  maxWidth?: ColumnStaticSize | null\n}\n\nfunction Column(props: ColumnProps, ref: ForwardedRef<HTMLTableCellElement>): JSX.Element | null {\n  return useSSRCollectionNode('column', props, ref, props.children);\n}\n\n/**\n * A column within a `<Table>`.\n */\nconst _Column = /*#__PURE__*/ (forwardRef as forwardRefType)(Column);\nexport {_Column as Column};\n\nexport interface TableBodyRenderProps {\n  /**\n   * Whether the table body has no rows and should display its empty state.\n   * @selector [data-empty]\n   */\n  isEmpty: boolean,\n  /**\n   * Whether the Table is currently the active drop target.\n   * @selector [data-drop-target]\n   */\n  isDropTarget: boolean\n}\n\nexport interface TableBodyProps<T> extends CollectionProps<T>, StyleRenderProps<TableBodyRenderProps> {\n  /** Provides content to display when there are no rows in the table. */\n  renderEmptyState?: (props: TableBodyRenderProps) => ReactNode\n}\n\nfunction TableBody<T extends object>(props: TableBodyProps<T>, ref: ForwardedRef<HTMLTableSectionElement>): JSX.Element | null {\n  let children = useCollectionChildren(props);\n  return useSSRCollectionNode('tablebody', props, ref, null, children);\n}\n\n/**\n * The body of a `<Table>`, containing the table rows.\n */\nconst _TableBody = /*#__PURE__*/ (forwardRef as forwardRefType)(TableBody);\nexport {_TableBody as TableBody};\n\nexport interface RowRenderProps extends ItemRenderProps {}\n\nexport interface RowProps<T> extends StyleRenderProps<RowRenderProps>, LinkDOMProps, HoverEvents {\n  /** The unique id of the row. */\n  id?: Key,\n  /** A list of columns used when dynamically rendering cells. */\n  columns?: Iterable<T>,\n  /** The cells within the row. Supports static items or a function for dynamic rendering. */\n  children?: ReactNode | ((item: T) => ReactElement),\n  /** The object value that this row represents. When using dynamic collections, this is set automatically. */\n  value?: T,\n  /** Values that should invalidate the cell cache when using dynamic collections. */\n  dependencies?: any[],\n  /** A string representation of the row's contents, used for features like typeahead. */\n  textValue?: string,\n  /** Whether the row is disabled. */\n  isDisabled?: boolean,\n  /**\n   * Handler that is called when a user performs an action on the row. The exact user event depends on\n   * the collection's `selectionBehavior` prop and the interaction modality.\n   */\n  onAction?: () => void\n}\n\nfunction Row<T extends object>(props: RowProps<T>, ref: ForwardedRef<HTMLTableRowElement>): JSX.Element | null {\n  let dependencies = [props.value].concat(props.dependencies);\n  let children = useCollectionChildren({\n    dependencies,\n    children: props.children,\n    items: props.columns,\n    idScope: props.id\n  });\n\n  let ctx = useMemo(() => ({idScope: props.id, dependencies}), [props.id, ...dependencies]);\n\n  return useSSRCollectionNode('item', props, ref, null, (\n    <CollectionContext.Provider value={ctx}>\n      {children}\n    </CollectionContext.Provider>\n  ));\n}\n\n/**\n * A row within a `<Table>`.\n */\nconst _Row = /*#__PURE__*/ (forwardRef as forwardRefType)(Row);\nexport {_Row as Row};\n\nexport interface CellRenderProps {\n  /**\n   * Whether the cell is currently in a pressed state.\n   * @selector [data-pressed]\n   */\n  isPressed: boolean,\n  /**\n   * Whether the cell is currently focused.\n   * @selector [data-focused]\n   */\n  isFocused: boolean,\n  /**\n   * Whether the cell is currently keyboard focused.\n   * @selector [data-focus-visible]\n   */\n  isFocusVisible: boolean,\n  /**\n   * Whether the cell is currently hovered with a mouse.\n   * @selector [data-hovered]\n   */\n  isHovered: boolean\n}\n\nexport interface CellProps extends RenderProps<CellRenderProps> {\n  /** The unique id of the cell. */\n  id?: Key,\n  /** A string representation of the cell's contents, used for features like typeahead. */\n  textValue?: string\n}\n\nfunction Cell(props: CellProps, ref: ForwardedRef<HTMLTableCellElement>): JSX.Element | null {\n  return useSSRCollectionNode('cell', props, ref, props.children);\n}\n\n/**\n * A cell within a table row.\n */\nconst _Cell = /*#__PURE__*/ (forwardRef as forwardRefType)(Cell);\nexport {_Cell as Cell};\n\nfunction TableHeaderRowGroup<T>({collection}: {collection: TableCollection<T>}) {\n  let headerRows = useCachedChildren({\n    items: collection.headerRows,\n    children: useCallback((item: Node<T>) => {\n      switch (item.type) {\n        case 'headerrow':\n          return <TableHeaderRow item={item} />;\n        default:\n          throw new Error('Unsupported node type in TableHeader: ' + item.type);\n      }\n    }, [])\n  });\n\n  let {rowGroupProps} = useTableRowGroup();\n  return (\n    <thead\n      {...filterDOMProps(collection.head.props)}\n      {...rowGroupProps}\n      ref={collection.head.props.ref}\n      className={collection.head.props.className ?? 'react-aria-TableHeader'}\n      style={collection.head.props.style}>\n      {headerRows}\n    </thead>\n  );\n}\n\nfunction TableBodyRowGroup<T>(props: {collection: TableCollection<T>, isDroppable: boolean}) {\n  let {collection, isDroppable} = props;\n  let bodyRows = useCachedChildren({\n    items: collection.rows,\n    children: useCallback((item: Node<T>) => {\n      switch (item.type) {\n        case 'item':\n          return <TableRow item={item} />;\n        default:\n          throw new Error('Unsupported node type in TableBody: ' + item.type);\n      }\n    }, [])\n  });\n\n  let state = useContext(TableStateContext);\n  let {dropState} = useContext(DragAndDropContext);\n  let isRootDropTarget = isDroppable && !!dropState && (dropState.isDropTarget({type: 'root'}) ?? false);\n\n  let bodyProps: TableBodyProps<T> = collection.body.props;\n  let renderValues = {\n    isDropTarget: isRootDropTarget,\n    isEmpty: collection.size === 0\n  };\n  let renderProps = useRenderProps({\n    ...bodyProps,\n    id: undefined,\n    children: undefined,\n    defaultClassName: 'react-aria-TableBody',\n    values: renderValues\n  });\n\n  let emptyState;\n  if (collection.size === 0 && bodyProps.renderEmptyState && state) {\n    emptyState = (\n      <tr role=\"row\">\n        <td role=\"gridcell\" colSpan={collection.columnCount}>\n          {bodyProps.renderEmptyState(renderValues)}\n        </td>\n      </tr>\n    );\n  }\n\n  let {rowGroupProps} = useTableRowGroup();\n  return (\n    <tbody\n      {...mergeProps(filterDOMProps(bodyProps as any), rowGroupProps)}\n      {...renderProps}\n      ref={collection.body.props.ref}\n      data-empty={collection.size === 0 || undefined}>\n      {isDroppable && <RootDropIndicator />}\n      {bodyRows}\n      {emptyState}\n    </tbody>\n  );\n}\n\nfunction TableHeaderRow<T>({item}: {item: GridNode<T>}) {\n  let ref = useRef<HTMLTableRowElement>(null);\n  let state = useContext(TableStateContext)!;\n  let {rowProps} = useTableHeaderRow({node: item}, state, ref);\n  let {checkboxProps} = useTableSelectAllCheckbox(state);\n\n  let cells = useCachedChildren({\n    items: state.collection.getChildren!(item.key),\n    children: (item) => {\n      switch (item.type) {\n        case 'column':\n          return <TableColumnHeader column={item} />;\n        default:\n          throw new Error('Unsupported node type in Row: ' + item.type);\n      }\n    }\n  });\n\n  return (\n    <tr {...rowProps} ref={ref}>\n      <Provider\n        values={[\n          [CheckboxContext, {\n            slots: {\n              selection: checkboxProps\n            }\n          }]\n        ]}>\n        {cells}\n      </Provider>\n    </tr>\n  );\n}\n\ninterface ColumnResizerContextValue {\n  column: GridNode<unknown>,\n  triggerRef: RefObject<HTMLDivElement>\n}\n\nconst ColumnResizerContext = createContext<ColumnResizerContextValue | null>(null);\n\nfunction TableColumnHeader<T>({column}: {column: GridNode<T>}) {\n  let ref = useObjectRef<HTMLTableHeaderCellElement>(column.props.ref);\n  let state = useContext(TableStateContext)!;\n  let {columnHeaderProps} = useTableColumnHeader(\n    {node: column},\n    state,\n    ref\n  );\n  let {isFocused, isFocusVisible, focusProps} = useFocusRing();\n\n  let layoutState = useContext(TableColumnResizeStateContext);\n  let isResizing = false;\n  if (layoutState) {\n    isResizing = layoutState.resizingColumn === column.key;\n  } else {\n    for (let prop in ['width', 'defaultWidth', 'minWidth', 'maxWidth']) {\n      if (prop in column.props) {\n        console.warn(`The ${prop} prop on a <Column> only applies when a <Table> is wrapped in a <ResizableTableContainer>. If you aren't using column resizing, you can set the width of a column with CSS.`);\n      }\n    }\n  }\n\n  let props: ColumnProps = column.props;\n  let {hoverProps, isHovered} = useHover({isDisabled: !props.allowsSorting});\n  let renderProps = useRenderProps({\n    ...props,\n    id: undefined,\n    children: column.rendered,\n    defaultClassName: 'react-aria-Column',\n    values: {\n      isHovered,\n      isFocused,\n      isFocusVisible,\n      allowsSorting: column.props.allowsSorting,\n      sortDirection: state.sortDescriptor?.column === column.key\n        ? state.sortDescriptor.direction\n        : undefined,\n      isResizing,\n      startResize: () => {\n        if (layoutState) {\n          layoutState.startResize(column.key);\n          state.setKeyboardNavigationDisabled(true);\n        } else {\n          throw new Error('Wrap your <Table> in a <ResizableTableContainer> to enable column resizing');\n        }\n      },\n      sort: (direction) => {\n        state.sort(column.key, direction);\n      }\n    }\n  });\n\n  let style = renderProps.style;\n  if (layoutState) {\n    style = {...style, width: layoutState.getColumnWidth(column.key)};\n  }\n\n  return (\n    <th\n      {...mergeProps(filterDOMProps(props as any), columnHeaderProps, focusProps, hoverProps)}\n      {...renderProps}\n      style={style}\n      colSpan={column.colspan}\n      ref={ref}\n      data-hovered={isHovered || undefined}\n      data-focused={isFocused || undefined}\n      data-focus-visible={isFocusVisible || undefined}\n      data-resizing={isResizing || undefined}\n      data-allows-sorting={column.props.allowsSorting || undefined}\n      data-sort-direction={state.sortDescriptor?.column === column.key ? state.sortDescriptor.direction : undefined}>\n      <ColumnResizerContext.Provider value={{column, triggerRef: ref}}>\n        {renderProps.children}\n      </ColumnResizerContext.Provider>\n    </th>\n  );\n}\n\nexport interface ColumnResizerRenderProps {\n  /**\n   * Whether the resizer is currently hovered with a mouse.\n   * @selector [data-hovered]\n   */\n  isHovered: boolean,\n  /**\n   * Whether the resizer is currently focused.\n   * @selector [data-focused]\n   */\n  isFocused: boolean,\n  /**\n   * Whether the resizer is currently keyboard focused.\n   * @selector [data-focus-visible]\n   */\n  isFocusVisible: boolean,\n  /**\n   * Whether the resizer is currently being resized.\n   * @selector [data-resizing]\n   */\n  isResizing: boolean,\n  /**\n   * The direction that the column is currently resizable.\n   * @selector [data-resizable-direction=\"right | left | both\"]\n   */\n  resizableDirection: 'right' | 'left' | 'both'\n}\n\nexport interface ColumnResizerProps extends HoverEvents, RenderProps<ColumnResizerRenderProps> {\n  /** A custom accessibility label for the resizer. */\n  'aria-label'?: string\n}\n\nfunction ColumnResizer(props: ColumnResizerProps, ref: ForwardedRef<HTMLDivElement>) {\n  let layoutState = useContext(TableColumnResizeStateContext);\n  if (!layoutState) {\n    throw new Error('Wrap your <Table> in a <ResizableTableContainer> to enable column resizing');\n  }\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, 'react-aria-components');\n\n  let {onResizeStart, onResize, onResizeEnd} = useContext(ResizableTableContainerContext)!;\n  let {column, triggerRef} = useContext(ColumnResizerContext)!;\n  let inputRef = useRef<HTMLInputElement>(null);\n  let {resizerProps, inputProps, isResizing} = useTableColumnResize(\n    {\n      column,\n      'aria-label': props['aria-label'] || stringFormatter.format('tableResizer'),\n      onResizeStart,\n      onResize,\n      onResizeEnd,\n      triggerRef\n    },\n    layoutState,\n    inputRef\n  );\n  let {focusProps, isFocused, isFocusVisible} = useFocusRing();\n  let {hoverProps, isHovered} = useHover(props);\n\n  let isEResizable = layoutState.getColumnMinWidth(column.key) >= layoutState.getColumnWidth(column.key);\n  let isWResizable = layoutState.getColumnMaxWidth(column.key) <= layoutState.getColumnWidth(column.key);\n  let {direction} = useLocale();\n  let resizableDirection: ColumnResizerRenderProps['resizableDirection'] = 'both';\n  if (isEResizable) {\n    resizableDirection = direction === 'rtl' ? 'right' : 'left';\n  } else if (isWResizable) {\n    resizableDirection = direction === 'rtl' ? 'left' : 'right';\n  } else {\n    resizableDirection = 'both';\n  }\n\n  let objectRef = useObjectRef(ref);\n  let [cursor, setCursor] = useState('');\n  useEffect(() => {\n    if (!objectRef.current) {\n      return;\n    }\n    let style = window.getComputedStyle(objectRef.current);\n    setCursor(style.cursor);\n  }, [objectRef, resizableDirection]);\n\n  let renderProps = useRenderProps({\n    ...props,\n    defaultClassName: 'react-aria-ColumnResizer',\n    values: {\n      isFocused,\n      isFocusVisible,\n      isResizing,\n      isHovered,\n      resizableDirection\n    }\n  });\n\n  let [isMouseDown, setMouseDown] = useState(false);\n  let onPointerDown = (e: PointerEvent) => {\n    if (e.pointerType === 'mouse') {\n      setMouseDown(true);\n    }\n  };\n\n  if (!isResizing && isMouseDown) {\n    setMouseDown(false);\n  }\n\n  return (\n    <div\n      ref={objectRef}\n      role=\"presentation\"\n      {...renderProps}\n      {...mergeProps(resizerProps, {onPointerDown}, hoverProps)}\n      data-hovered={isHovered || undefined}\n      data-focused={isFocused || undefined}\n      data-focus-visible={isFocusVisible || undefined}\n      data-resizing={isResizing || undefined}\n      data-resizable-direction={resizableDirection}>\n      {renderProps.children}\n      <input\n        ref={inputRef}\n        {...mergeProps(inputProps, focusProps)} />\n      {isResizing && isMouseDown && ReactDOM.createPortal(<div style={{position: 'fixed', top: 0, left: 0, bottom: 0, right: 0, cursor}} />, document.body)}\n    </div>\n  );\n}\n\nconst _ColumnResizer = forwardRef(ColumnResizer);\nexport {_ColumnResizer as ColumnResizer};\n\nfunction TableRow<T>({item}: {item: GridNode<T>}) {\n  let ref = useObjectRef<HTMLTableRowElement>(item.props.ref);\n  let state = useContext(TableStateContext)!;\n  let {dragAndDropHooks, dragState, dropState} = useContext(DragAndDropContext);\n  let {rowProps, ...states} = useTableRow(\n    {\n      node: item,\n      shouldSelectOnPressUp: !!dragState\n    },\n    state,\n    ref\n  );\n  let {isFocused, isFocusVisible, focusProps} = useFocusRing();\n  let {hoverProps, isHovered} = useHover({\n    isDisabled: !states.allowsSelection && !states.hasAction,\n    onHoverStart: item.props.onHoverStart,\n    onHoverChange: item.props.onHoverChange,\n    onHoverEnd: item.props.onHoverEnd\n  });\n\n  let {checkboxProps} = useTableSelectionCheckbox(\n    {key: item.key},\n    state\n  );\n\n  let draggableItem: DraggableItemResult | undefined = undefined;\n  if (dragState && dragAndDropHooks) {\n    draggableItem = dragAndDropHooks.useDraggableItem!({key: item.key, hasDragButton: true}, dragState);\n  }\n\n  let dropIndicator: DropIndicatorAria | undefined = undefined;\n  let dropIndicatorRef = useRef<HTMLDivElement>(null);\n  let {visuallyHiddenProps} = useVisuallyHidden();\n  if (dropState && dragAndDropHooks) {\n    dropIndicator = dragAndDropHooks.useDropIndicator!({\n      target: {type: 'item', key: item.key, dropPosition: 'on'}\n    }, dropState, dropIndicatorRef);\n  }\n\n  let renderDropIndicator = dragAndDropHooks?.renderDropIndicator || (target => <DropIndicator target={target} />);\n  let dragButtonRef = useRef<HTMLButtonElement>(null);\n  useEffect(() => {\n    if (dragState && !dragButtonRef.current) {\n      console.warn('Draggable items in a Table must contain a <Button slot=\"drag\"> element so that keyboard and screen reader users can drag them.');\n    }\n  // eslint-disable-next-line\n  }, []);\n\n  let props = item.props as RowProps<unknown>;\n  let isDragging = dragState && dragState.isDragging(item.key);\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  let {children: _, ...restProps} = props;\n  let renderProps = useRenderProps({\n    ...restProps,\n    id: undefined,\n    defaultClassName: 'react-aria-Row',\n    values: {\n      ...states,\n      isHovered,\n      isFocused,\n      isFocusVisible,\n      selectionMode: state.selectionManager.selectionMode,\n      selectionBehavior: state.selectionManager.selectionBehavior,\n      isDragging,\n      isDropTarget: dropIndicator?.isDropTarget\n    }\n  });\n\n  let cells = useCachedChildren({\n    items: state.collection.getChildren!(item.key),\n    children: (item: Node<unknown>) => {\n      switch (item.type) {\n        case 'cell':\n          return <TableCell cell={item} />;\n        default:\n          throw new Error('Unsupported node type in Row: ' + item.type);\n      }\n    }\n  });\n\n  return (\n    <>\n      {dragAndDropHooks?.useDropIndicator &&\n        renderDropIndicator({type: 'item', key: item.key, dropPosition: 'before'})\n      }\n      {dropIndicator && !dropIndicator.isHidden && (\n        <tr role=\"row\" style={{height: 0}}>\n          <td role=\"gridcell\" colSpan={state.collection.columnCount} style={{padding: 0}}>\n            <div role=\"button\" {...visuallyHiddenProps} {...dropIndicator.dropIndicatorProps} ref={dropIndicatorRef} />\n          </td>\n        </tr>\n      )}\n      <tr\n        {...mergeProps(filterDOMProps(props as any), rowProps, focusProps, hoverProps, draggableItem?.dragProps)}\n        {...renderProps}\n        ref={ref}\n        data-disabled={states.isDisabled || undefined}\n        data-selected={states.isSelected || undefined}\n        data-hovered={isHovered || undefined}\n        data-focused={states.isFocused || undefined}\n        data-focus-visible={isFocusVisible || undefined}\n        data-pressed={states.isPressed || undefined}\n        data-dragging={isDragging || undefined}\n        data-drop-target={dropIndicator?.isDropTarget || undefined}\n        data-selection-mode={state.selectionManager.selectionMode === 'none' ? undefined : state.selectionManager.selectionMode}>\n        <Provider\n          values={[\n            [CheckboxContext, {\n              slots: {\n                selection: checkboxProps\n              }\n            }],\n            [ButtonContext, {\n              slots: {\n                [DEFAULT_SLOT]: {},\n                drag: {\n                  ...draggableItem?.dragButtonProps,\n                  ref: dragButtonRef,\n                  style: {\n                    pointerEvents: 'none'\n                  }\n                }\n              }\n            }]\n          ]}>\n          {cells}\n        </Provider>\n      </tr>\n      {dragAndDropHooks?.useDropIndicator && state.collection.getKeyAfter(item.key) == null &&\n        renderDropIndicator({type: 'item', key: item.key, dropPosition: 'after'})\n      }\n    </>\n  );\n}\n\nfunction TableCell<T>({cell}: {cell: GridNode<T>}) {\n  let ref = useObjectRef<HTMLTableCellElement>(cell.props.ref);\n  let state = useContext(TableStateContext)!;\n  let {dragState} = useContext(DragAndDropContext);\n\n  // @ts-ignore\n  cell.column = state.collection.columns[cell.index];\n\n  let {gridCellProps, isPressed} = useTableCell({\n    node: cell,\n    shouldSelectOnPressUp: !!dragState\n  }, state, ref);\n  let {isFocused, isFocusVisible, focusProps} = useFocusRing();\n  let {hoverProps, isHovered} = useHover({});\n\n  let props: CellProps = cell.props;\n  let renderProps = useRenderProps({\n    ...props,\n    id: undefined,\n    defaultClassName: 'react-aria-Cell',\n    values: {\n      isFocused,\n      isFocusVisible,\n      isPressed,\n      isHovered\n    }\n  });\n\n  return (\n    <td\n      {...mergeProps(filterDOMProps(props as any), gridCellProps, focusProps, hoverProps)}\n      {...renderProps}\n      ref={ref}\n      data-focused={isFocused || undefined}\n      data-focus-visible={isFocusVisible || undefined}\n      data-pressed={isPressed || undefined}>\n      {renderProps.children}\n    </td>\n  );\n}\n\nfunction TableDropIndicatorWrapper(props: DropIndicatorProps, ref: ForwardedRef<HTMLElement>) {\n  ref = useObjectRef(ref);\n  let {dragAndDropHooks, dropState} = useContext(DragAndDropContext)!;\n  let buttonRef = useRef<HTMLDivElement>(null);\n  let {dropIndicatorProps, isHidden, isDropTarget} = dragAndDropHooks!.useDropIndicator!(\n    props,\n    dropState!,\n    buttonRef\n  );\n\n  if (isHidden) {\n    return null;\n  }\n\n  return (\n    <TableDropIndicatorForwardRef {...props} dropIndicatorProps={dropIndicatorProps} isDropTarget={isDropTarget} buttonRef={buttonRef} ref={ref} />\n  );\n}\n\ninterface TableDropIndicatorProps extends DropIndicatorProps {\n  dropIndicatorProps: React.HTMLAttributes<HTMLElement>,\n  isDropTarget: boolean,\n  buttonRef: RefObject<HTMLDivElement>\n}\n\nfunction TableDropIndicator(props: TableDropIndicatorProps, ref: ForwardedRef<HTMLElement>) {\n  let {\n    dropIndicatorProps,\n    isDropTarget,\n    buttonRef,\n    ...otherProps\n  } = props;\n\n  let state = useContext(TableStateContext)!;\n  let {visuallyHiddenProps} = useVisuallyHidden();\n  let renderProps = useRenderProps({\n    ...otherProps,\n    defaultClassName: 'react-aria-DropIndicator',\n    values: {\n      isDropTarget\n    }\n  });\n\n  return (\n    <tr\n      {...filterDOMProps(props as any)}\n      {...renderProps}\n      role=\"row\"\n      ref={ref as RefObject<HTMLTableRowElement>}\n      data-drop-target={isDropTarget || undefined}>\n      <td\n        role=\"gridcell\"\n        colSpan={state.collection.columnCount}\n        style={{padding: 0}}>\n        <div {...visuallyHiddenProps} role=\"button\" {...dropIndicatorProps} ref={buttonRef} />\n        {renderProps.children}\n      </td>\n    </tr>\n  );\n}\n\nconst TableDropIndicatorForwardRef = forwardRef(TableDropIndicator);\n\nfunction RootDropIndicator() {\n  let state = useContext(TableStateContext)!;\n  let {dragAndDropHooks, dropState} = useContext(DragAndDropContext);\n  let ref = useRef<HTMLDivElement>(null);\n  let {dropIndicatorProps} = dragAndDropHooks!.useDropIndicator!({\n    target: {type: 'root'}\n  }, dropState!, ref);\n  let isDropTarget = dropState!.isDropTarget({type: 'root'});\n  let {visuallyHiddenProps} = useVisuallyHidden();\n\n  if (!isDropTarget && dropIndicatorProps['aria-hidden']) {\n    return null;\n  }\n\n  return (\n    <tr\n      role=\"row\"\n      aria-hidden={dropIndicatorProps['aria-hidden']}\n      style={{height: 0}}>\n      <td\n        role=\"gridcell\"\n        colSpan={state.collection.columnCount}\n        style={{padding: 0}}>\n        <div role=\"button\" {...visuallyHiddenProps} {...dropIndicatorProps} ref={ref} />\n      </td>\n    </tr>\n  );\n}\n"],"names":[],"version":3,"file":"Table.main.js.map"}