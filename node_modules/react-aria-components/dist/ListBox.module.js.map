{"mappings":"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","sources":["packages/react-aria-components/src/ListBox.tsx"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaListBoxOptions, AriaListBoxProps, DraggableItemResult, DragPreviewRenderer, DroppableCollectionResult, DroppableItemResult, FocusScope, ListKeyboardDelegate, mergeProps, useCollator, useFocusRing, useHover, useListBox, useListBoxSection, useLocale, useOption} from 'react-aria';\nimport {CollectionDocumentContext, CollectionPortal, CollectionProps, ItemRenderProps, useCachedChildren, useCollection, useSSRCollectionNode} from './Collection';\nimport {ContextValue, forwardRefType, HiddenContext, Provider, RenderProps, ScrollableProps, SlotProps, StyleProps, StyleRenderProps, useContextProps, useRenderProps, useSlot} from './utils';\nimport {DragAndDropContext, DragAndDropHooks, DropIndicator, DropIndicatorContext, DropIndicatorProps} from './useDragAndDrop';\nimport {DraggableCollectionState, DroppableCollectionState, ListState, Node, Orientation, SelectionBehavior, useListState} from 'react-stately';\nimport {filterDOMProps, mergeRefs, useObjectRef} from '@react-aria/utils';\nimport {Header} from './Header';\nimport {HoverEvents, Key, LinkDOMProps} from '@react-types/shared';\nimport React, {createContext, ForwardedRef, forwardRef, JSX, ReactNode, RefObject, useContext, useEffect, useMemo, useRef} from 'react';\nimport {Separator, SeparatorContext} from './Separator';\nimport {TextContext} from './Text';\n\nexport interface ListBoxRenderProps {\n  /**\n   * Whether the listbox has no items and should display its empty state.\n   * @selector [data-empty]\n   */\n  isEmpty: boolean,\n  /**\n   * Whether the listbox is currently focused.\n   * @selector [data-focused]\n   */\n  isFocused: boolean,\n  /**\n   * Whether the listbox is currently keyboard focused.\n   * @selector [data-focus-visible]\n   */\n  isFocusVisible: boolean,\n  /**\n   * Whether the listbox is currently the active drop target.\n   * @selector [data-drop-target]\n   */\n  isDropTarget: boolean,\n  /**\n   * Whether the items are arranged in a stack or grid.\n   * @selector [data-layout=\"stack | grid\"]\n   */\n  layout: 'stack' | 'grid',\n  /**\n   * State of the listbox.\n   */\n  state: ListState<unknown>\n}\n\nexport interface ListBoxProps<T> extends Omit<AriaListBoxProps<T>, 'children' | 'label'>, CollectionProps<T>, StyleRenderProps<ListBoxRenderProps>, SlotProps, ScrollableProps<HTMLDivElement> {\n  /** How multiple selection should behave in the collection. */\n  selectionBehavior?: SelectionBehavior,\n  /** The drag and drop hooks returned by `useDragAndDrop` used to enable drag and drop behavior for the ListBox. */\n  dragAndDropHooks?: DragAndDropHooks,\n  /** Provides content to display when there are no items in the list. */\n  renderEmptyState?: (props: ListBoxRenderProps) => ReactNode,\n  /**\n   * Whether the items are arranged in a stack or grid.\n   * @default 'stack'\n   */\n  layout?: 'stack' | 'grid',\n  /**\n   * The primary orientation of the items. Usually this is the\n   * direction that the collection scrolls.\n   * @default 'vertical'\n   */\n  orientation?: Orientation\n}\n\nexport const ListBoxContext = createContext<ContextValue<ListBoxProps<any>, HTMLDivElement>>(null);\nexport const ListStateContext = createContext<ListState<any> | null>(null);\n\nfunction ListBox<T extends object>(props: ListBoxProps<T>, ref: ForwardedRef<HTMLDivElement>) {\n  [props, ref] = useContextProps(props, ref, ListBoxContext);\n  let isHidden = useContext(HiddenContext);\n  let state = useContext(ListStateContext);\n  let document = useContext(CollectionDocumentContext);\n\n  // The structure of ListBox is a bit strange because it needs to work inside other components like ComboBox and Select.\n  // Those components render two copies of their children so that the collection can be built even when the popover is closed.\n  // The first copy sends a collection document via context which we render the collection portal into.\n  // The second copy sends a ListState object via context which we use to render the ListBox without rebuilding the state.\n  // Otherwise, we have a standalone ListBox, so we need to create a collection and state ourselves.\n\n  if (document) {\n    return <CollectionPortal {...props} />;\n  }\n\n  if (state) {\n    return isHidden ? null : <ListBoxInner state={state} props={props} listBoxRef={ref} />;\n  }\n\n  return <StandaloneListBox props={props} listBoxRef={ref} />;\n}\n\nfunction StandaloneListBox({props, listBoxRef}) {\n  let {portal, collection} = useCollection(props);\n  props = {...props, collection, children: null, items: null};\n  let state = useListState(props);\n  return (\n    <>\n      {portal}\n      <ListBoxInner state={state} props={props} listBoxRef={listBoxRef} />\n    </>\n  );\n}\n\n/**\n * A listbox displays a list of options and allows a user to select one or more of them.\n */\nconst _ListBox = /*#__PURE__*/ (forwardRef as forwardRefType)(ListBox);\nexport {_ListBox as ListBox};\n\ninterface ListBoxInnerProps<T> {\n  state: ListState<T>,\n  props: ListBoxProps<T> & AriaListBoxOptions<T>,\n  listBoxRef: RefObject<HTMLDivElement>\n}\n\nfunction ListBoxInner<T>({state, props, listBoxRef}: ListBoxInnerProps<T>) {\n  let {dragAndDropHooks, layout = 'stack', orientation = 'vertical'} = props;\n  let {collection, selectionManager} = state;\n  let isListDraggable = !!dragAndDropHooks?.useDraggableCollectionState;\n  let isListDroppable = !!dragAndDropHooks?.useDroppableCollectionState;\n  let {direction} = useLocale();\n  let {disabledBehavior, disabledKeys} = selectionManager;\n  let collator = useCollator({usage: 'search', sensitivity: 'base'});\n  let keyboardDelegate = useMemo(() => (\n    props.keyboardDelegate || new ListKeyboardDelegate({\n      collection,\n      collator,\n      ref: listBoxRef,\n      disabledKeys,\n      disabledBehavior,\n      layout,\n      orientation,\n      direction\n    })\n  ), [collection, collator, listBoxRef, disabledBehavior, disabledKeys, orientation, direction, props.keyboardDelegate, layout]);\n\n  let {listBoxProps} = useListBox({\n    ...props,\n    shouldSelectOnPressUp: isListDraggable || props.shouldSelectOnPressUp,\n    keyboardDelegate\n  }, state, listBoxRef);\n\n  let children = useCachedChildren({\n    items: collection,\n    children: (item: Node<T>) => {\n      switch (item.type) {\n        case 'section':\n          return <ListBoxSection section={item} />;\n        case 'separator':\n          return <Separator {...item.props} />;\n        case 'item':\n          return <Option item={item} />;\n        default:\n          throw new Error('Unsupported node type in Menu: ' + item.type);\n      }\n    }\n  });\n\n  let dragHooksProvided = useRef(isListDraggable);\n  let dropHooksProvided = useRef(isListDroppable);\n  useEffect(() => {\n    if (dragHooksProvided.current !== isListDraggable) {\n      console.warn('Drag hooks were provided during one render, but not another. This should be avoided as it may produce unexpected behavior.');\n    }\n    if (dropHooksProvided.current !== isListDroppable) {\n      console.warn('Drop hooks were provided during one render, but not another. This should be avoided as it may produce unexpected behavior.');\n    }\n  }, [isListDraggable, isListDroppable]);\n\n  let dragState: DraggableCollectionState | undefined = undefined;\n  let dropState: DroppableCollectionState | undefined = undefined;\n  let droppableCollection: DroppableCollectionResult | undefined = undefined;\n  let isRootDropTarget = false;\n  let dragPreview: JSX.Element | null = null;\n  let preview = useRef<DragPreviewRenderer>(null);\n\n  if (isListDraggable && dragAndDropHooks) {\n    dragState = dragAndDropHooks.useDraggableCollectionState!({\n      collection,\n      selectionManager,\n      preview: dragAndDropHooks.renderDragPreview ? preview : undefined\n    });\n    dragAndDropHooks.useDraggableCollection!({}, dragState, listBoxRef);\n\n    let DragPreview = dragAndDropHooks.DragPreview!;\n    dragPreview = dragAndDropHooks.renderDragPreview\n      ? <DragPreview ref={preview}>{dragAndDropHooks.renderDragPreview}</DragPreview>\n      : null;\n  }\n\n  if (isListDroppable && dragAndDropHooks) {\n    dropState = dragAndDropHooks.useDroppableCollectionState!({\n      collection,\n      selectionManager\n    });\n\n    let dropTargetDelegate = dragAndDropHooks.dropTargetDelegate || new dragAndDropHooks.ListDropTargetDelegate(collection, listBoxRef, {orientation, layout, direction});\n    droppableCollection = dragAndDropHooks.useDroppableCollection!({\n      keyboardDelegate,\n      dropTargetDelegate\n    }, dropState, listBoxRef);\n\n    isRootDropTarget = dropState.isDropTarget({type: 'root'});\n  }\n\n  let {focusProps, isFocused, isFocusVisible} = useFocusRing();\n  let renderValues = {\n    isDropTarget: isRootDropTarget,\n    isEmpty: state.collection.size === 0,\n    isFocused,\n    isFocusVisible,\n    layout: props.layout || 'stack',\n    state\n  };\n  let renderProps = useRenderProps({\n    className: props.className,\n    style: props.style,\n    defaultClassName: 'react-aria-ListBox',\n    values: renderValues\n  });\n\n  let emptyState: JSX.Element | null = null;\n  if (state.collection.size === 0 && props.renderEmptyState) {\n    emptyState = (\n      <div\n        // eslint-disable-next-line\n        role=\"option\"\n        style={{display: 'contents'}}>\n        {props.renderEmptyState(renderValues)}\n      </div>\n    );\n  }\n\n  return (\n    <FocusScope>\n      <div\n        {...filterDOMProps(props)}\n        {...mergeProps(listBoxProps, focusProps, droppableCollection?.collectionProps)}\n        {...renderProps}\n        ref={listBoxRef}\n        slot={props.slot || undefined}\n        onScroll={props.onScroll}\n        data-drop-target={isRootDropTarget || undefined}\n        data-empty={state.collection.size === 0 || undefined}\n        data-focused={isFocused || undefined}\n        data-focus-visible={isFocusVisible || undefined}\n        data-layout={props.layout || 'stack'}\n        data-orientation={props.orientation || 'vertical'}>\n        <Provider\n          values={[\n            [ListBoxContext, props],\n            [ListStateContext, state],\n            [DragAndDropContext, {dragAndDropHooks, dragState, dropState}],\n            [SeparatorContext, {elementType: 'div'}],\n            [DropIndicatorContext, {render: ListBoxDropIndicatorWrapper}]\n          ]}>\n          {children}\n        </Provider>\n        {emptyState}\n        {dragPreview}\n      </div>\n    </FocusScope>\n  );\n}\n\ninterface ListBoxSectionProps<T> extends StyleProps {\n  section: Node<T>\n}\n\nfunction ListBoxSection<T>({section, className, style}: ListBoxSectionProps<T>) {\n  let state = useContext(ListStateContext)!;\n  let [headingRef, heading] = useSlot();\n  let {headingProps, groupProps} = useListBoxSection({\n    heading,\n    'aria-label': section.props['aria-label'] ?? undefined\n  });\n\n  let children = useCachedChildren({\n    items: state.collection.getChildren!(section.key),\n    children: item => {\n      switch (item.type) {\n        case 'header': {\n          return (\n            <SectionHeader\n              item={item}\n              headingProps={headingProps}\n              headingRef={headingRef} />\n          );\n        }\n        case 'item':\n          return <Option item={item} />;\n        default:\n          throw new Error('Unsupported element type in Section: ' + item.type);\n      }\n    }\n  });\n\n  return (\n    <section\n      {...filterDOMProps(section.props)}\n      {...groupProps}\n      className={className || section.props?.className || 'react-aria-Section'}\n      style={style || section.props?.style}\n      ref={section.props.ref}>\n      {children}\n    </section>\n  );\n}\n\n// This is a separate component so that headingProps.id doesn't override the item key in useCachedChildren.\nfunction SectionHeader({item, headingProps, headingRef}) {\n  let {ref, ...otherProps} = item.props;\n  return (\n    <Header\n      {...headingProps}\n      {...otherProps}\n      ref={mergeRefs(headingRef, ref)}>\n      {item.rendered}\n    </Header>\n  );\n}\n\nexport interface ListBoxItemRenderProps extends ItemRenderProps {}\n\nexport interface ListBoxItemProps<T = object> extends RenderProps<ListBoxItemRenderProps>, LinkDOMProps, HoverEvents {\n  /** The unique id of the item. */\n  id?: Key,\n  /** The object value that this item represents. When using dynamic collections, this is set automatically. */\n  value?: T,\n  /** A string representation of the item's contents, used for features like typeahead. */\n  textValue?: string,\n  /** An accessibility label for this item. */\n  'aria-label'?: string,\n  /** Whether the item is disabled. */\n  isDisabled?: boolean,\n  /**\n   * Handler that is called when a user performs an action on the item. The exact user event depends on\n   * the collection's `selectionBehavior` prop and the interaction modality.\n   */\n  onAction?: () => void\n}\n\nfunction ListBoxItem<T extends object>(props: ListBoxItemProps<T>, ref: ForwardedRef<HTMLDivElement>): JSX.Element | null {\n  return useSSRCollectionNode('item', props, ref, props.children);\n}\n\n/**\n * A ListBoxItem represents an individual option in a ListBox.\n */\nconst _ListBoxItem = /*#__PURE__*/ (forwardRef as forwardRefType)(ListBoxItem);\nexport {_ListBoxItem as ListBoxItem};\n\ninterface OptionProps<T> {\n  item: Node<T>\n}\n\nfunction Option<T>({item}: OptionProps<T>) {\n  let ref = useObjectRef<any>(item.props.ref);\n  let state = useContext(ListStateContext)!;\n  let {dragAndDropHooks, dragState, dropState} = useContext(DragAndDropContext)!;\n  let {optionProps, labelProps, descriptionProps, ...states} = useOption(\n    {key: item.key, 'aria-label': item.props?.['aria-label']},\n    state,\n    ref\n  );\n\n  let {hoverProps, isHovered} = useHover({\n    isDisabled: !states.allowsSelection && !states.hasAction,\n    onHoverStart: item.props.onHoverStart,\n    onHoverChange: item.props.onHoverChange,\n    onHoverEnd: item.props.onHoverEnd\n  });\n\n  let draggableItem: DraggableItemResult | null = null;\n  if (dragState && dragAndDropHooks) {\n    draggableItem = dragAndDropHooks.useDraggableItem!({key: item.key}, dragState);\n  }\n\n  let droppableItem: DroppableItemResult | null = null;\n  if (dropState && dragAndDropHooks) {\n    droppableItem = dragAndDropHooks.useDroppableItem!({\n      target: {type: 'item', key: item.key, dropPosition: 'on'}\n    }, dropState, ref);\n  }\n\n  let props: ListBoxItemProps<T> = item.props;\n  let isDragging = dragState && dragState.isDragging(item.key);\n  let renderProps = useRenderProps({\n    ...props,\n    id: undefined,\n    children: item.rendered,\n    defaultClassName: 'react-aria-ListBoxItem',\n    values: {\n      ...states,\n      isHovered,\n      selectionMode: state.selectionManager.selectionMode,\n      selectionBehavior: state.selectionManager.selectionBehavior,\n      allowsDragging: !!dragState,\n      isDragging,\n      isDropTarget: droppableItem?.isDropTarget\n    }\n  });\n\n  let renderDropIndicator = dragAndDropHooks?.renderDropIndicator || (target => <DropIndicator target={target} />);\n\n  useEffect(() => {\n    if (!item.textValue) {\n      console.warn('A `textValue` prop is required for <ListBoxItem> elements with non-plain text children in order to support accessibility features such as type to select.');\n    }\n  }, [item.textValue]);\n\n  let ElementType: React.ElementType = props.href ? 'a' : 'div';\n\n  return (\n    <>\n      {dragAndDropHooks?.useDropIndicator &&\n        renderDropIndicator({type: 'item', key: item.key, dropPosition: 'before'})\n      }\n      <ElementType\n        {...mergeProps(optionProps, hoverProps, draggableItem?.dragProps, droppableItem?.dropProps)}\n        {...renderProps}\n        ref={ref}\n        data-allows-dragging={!!dragState || undefined}\n        data-selected={states.isSelected || undefined}\n        data-disabled={states.isDisabled || undefined}\n        data-hovered={isHovered || undefined}\n        data-focused={states.isFocused || undefined}\n        data-focus-visible={states.isFocusVisible || undefined}\n        data-pressed={states.isPressed || undefined}\n        data-dragging={isDragging || undefined}\n        data-drop-target={droppableItem?.isDropTarget || undefined}\n        data-selection-mode={state.selectionManager.selectionMode === 'none' ? undefined : state.selectionManager.selectionMode}>\n        <Provider\n          values={[\n            [TextContext, {\n              slots: {\n                label: labelProps,\n                description: descriptionProps\n              }\n            }]\n          ]}>\n          {renderProps.children}\n        </Provider>\n      </ElementType>\n      {dragAndDropHooks?.useDropIndicator && state.collection.getKeyAfter(item.key) == null &&\n        renderDropIndicator({type: 'item', key: item.key, dropPosition: 'after'})\n      }\n    </>\n  );\n}\n\nfunction ListBoxDropIndicatorWrapper(props: DropIndicatorProps, ref: ForwardedRef<HTMLElement>) {\n  ref = useObjectRef(ref);\n  let {dragAndDropHooks, dropState} = useContext(DragAndDropContext)!;\n  let {dropIndicatorProps, isHidden, isDropTarget} = dragAndDropHooks!.useDropIndicator!(\n    props,\n    dropState!,\n    ref\n  );\n\n  if (isHidden) {\n    return null;\n  }\n\n  return (\n    <ListBoxDropIndicatorForwardRef {...props} dropIndicatorProps={dropIndicatorProps} isDropTarget={isDropTarget} ref={ref} />\n  );\n}\n\ninterface ListBoxDropIndicatorProps extends DropIndicatorProps {\n  dropIndicatorProps: React.HTMLAttributes<HTMLElement>,\n  isDropTarget: boolean\n}\n\nfunction ListBoxDropIndicator(props: ListBoxDropIndicatorProps, ref: ForwardedRef<HTMLElement>) {\n  let {\n    dropIndicatorProps,\n    isDropTarget,\n    ...otherProps\n  } = props;\n\n  let renderProps = useRenderProps({\n    ...otherProps,\n    defaultClassName: 'react-aria-DropIndicator',\n    values: {\n      isDropTarget\n    }\n  });\n\n  return (\n    <div\n      {...dropIndicatorProps}\n      {...renderProps}\n      // eslint-disable-next-line\n      role=\"option\"\n      ref={ref as RefObject<HTMLDivElement>}\n      data-drop-target={isDropTarget || undefined} />\n  );\n}\n\nconst ListBoxDropIndicatorForwardRef = forwardRef(ListBoxDropIndicator);\n"],"names":[],"version":3,"file":"ListBox.module.js.map"}