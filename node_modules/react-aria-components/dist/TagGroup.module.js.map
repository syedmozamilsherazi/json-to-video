{"mappings":"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","sources":["packages/react-aria-components/src/TagGroup.tsx"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaTagGroupProps, useFocusRing, useHover, useTag, useTagGroup} from 'react-aria';\nimport {ButtonContext} from './Button';\nimport {CollectionDocumentContext, CollectionProps, ItemRenderProps, useCachedChildren, useCollectionDocument, useCollectionPortal, useSSRCollectionNode} from './Collection';\nimport {ContextValue, DOMProps, forwardRefType, Provider, RenderProps, SlotProps, StyleRenderProps, useContextProps, useRenderProps, useSlot} from './utils';\nimport {filterDOMProps, mergeProps, useObjectRef} from '@react-aria/utils';\nimport {HoverEvents, Key, LinkDOMProps} from '@react-types/shared';\nimport {LabelContext} from './Label';\nimport {ListState, Node, useListState} from 'react-stately';\nimport {ListStateContext} from './ListBox';\nimport React, {createContext, ForwardedRef, forwardRef, JSX, ReactNode, useContext, useEffect, useRef} from 'react';\nimport {TextContext} from './Text';\n\nexport interface TagGroupProps extends Omit<AriaTagGroupProps<unknown>, 'children' | 'items' | 'label' | 'description' | 'errorMessage' | 'keyboardDelegate'>, DOMProps, SlotProps {}\n\nexport interface TagListRenderProps {\n  /**\n   * Whether the tag list has no items and should display its empty state.\n   * @selector [data-empty]\n   */\n  isEmpty: boolean,\n  /**\n   * Whether the tag list is currently focused.\n   * @selector [data-focused]\n   */\n  isFocused: boolean,\n  /**\n   * Whether the tag list is currently keyboard focused.\n   * @selector [data-focus-visible]\n   */\n  isFocusVisible: boolean,\n  /**\n   * State of the TagGroup.\n   */\n  state: ListState<unknown>\n}\n\nexport interface TagListProps<T> extends Omit<CollectionProps<T>, 'disabledKeys'>, StyleRenderProps<TagListRenderProps> {\n  /** Provides content to display when there are no items in the tag list. */\n  renderEmptyState?: (props: TagListRenderProps) => ReactNode\n}\n\nexport const TagGroupContext = createContext<ContextValue<TagGroupProps, HTMLDivElement>>(null);\nexport const TagListContext = createContext<ContextValue<TagListProps<any>, HTMLDivElement>>(null);\n\nfunction TagGroup(props: TagGroupProps, ref: ForwardedRef<HTMLDivElement>) {\n  [props, ref] = useContextProps(props, ref, TagGroupContext);\n  let tagListRef = useRef<HTMLDivElement>(null);\n  let [labelRef, label] = useSlot();\n  let {collection, document} = useCollectionDocument();\n  let state = useListState({\n    ...props,\n    children: undefined,\n    collection\n  });\n\n  // Prevent DOM props from going to two places.\n  let domProps = filterDOMProps(props);\n  let domPropOverrides = Object.fromEntries(Object.entries(domProps).map(([k]) => [k, undefined]));\n  let {\n    gridProps,\n    labelProps,\n    descriptionProps,\n    errorMessageProps\n  } = useTagGroup({\n    ...props,\n    ...domPropOverrides,\n    label\n  }, state, tagListRef);\n\n  return (\n    <div\n      {...domProps}\n      ref={ref}\n      slot={props.slot || undefined}\n      className={props.className ?? 'react-aria-TagGroup'}\n      style={props.style}>\n      <Provider\n        values={[\n          [LabelContext, {...labelProps, elementType: 'span', ref: labelRef}],\n          [TagListContext, {...gridProps, ref: tagListRef}],\n          [ListStateContext, state],\n          [CollectionDocumentContext, document],\n          [TextContext, {\n            slots: {\n              description: descriptionProps,\n              errorMessage: errorMessageProps\n            }\n          }]\n        ]}>\n        {props.children}\n      </Provider>\n    </div>\n  );\n}\n\n/**\n * A tag group is a focusable list of labels, categories, keywords, filters, or other items, with support for keyboard navigation, selection, and removal.\n */\nconst _TagGroup = /*#__PURE__*/ (forwardRef as forwardRefType)(TagGroup);\nexport {_TagGroup as TagGroup};\n\nfunction TagList<T extends object>(props: TagListProps<T>, forwardedRef: ForwardedRef<HTMLDivElement>) {\n  // Render the portal first so that we have the collection by the time we render the DOM in SSR.\n  let portal = useCollectionPortal(props);\n  return (\n    <>\n      {portal}\n      <TagListInner props={props} forwardedRef={forwardedRef} />\n    </>\n  );\n}\n\ninterface TagListInnerProps<T> {\n  props: TagListProps<T>,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n}\n\nfunction TagListInner<T extends object>({props, forwardedRef}: TagListInnerProps<T>) {\n  let state = useContext(ListStateContext)!;\n  let [gridProps, ref] = useContextProps(props, forwardedRef, TagListContext);\n  delete gridProps.items;\n  delete gridProps.renderEmptyState;\n\n  let children = useCachedChildren({\n    items: state.collection,\n    children: (item: Node<T>) => {\n      switch (item.type) {\n        case 'item':\n          return <TagItem item={item} />;\n        default:\n          throw new Error('Unsupported node type in TagList: ' + item.type);\n      }\n    }\n  });\n\n  let {focusProps, isFocused, isFocusVisible} = useFocusRing();\n  let renderValues = {\n    isEmpty: state.collection.size === 0,\n    isFocused,\n    isFocusVisible,\n    state\n  };\n  let renderProps = useRenderProps({\n    className: props.className,\n    style: props.style,\n    defaultClassName: 'react-aria-TagList',\n    values: renderValues\n  });\n\n  return (\n    <div\n      {...mergeProps(gridProps, focusProps)}\n      {...renderProps}\n      ref={ref}\n      data-empty={state.collection.size === 0 || undefined}\n      data-focused={isFocused || undefined}\n      data-focus-visible={isFocusVisible || undefined}>\n      {state.collection.size === 0 && props.renderEmptyState ? props.renderEmptyState(renderValues) : children}\n    </div>\n  );\n}\n\n/**\n * A tag list is a container for tags within a TagGroup.\n */\nconst _TagList = /*#__PURE__*/ (forwardRef as forwardRefType)(TagList);\nexport {_TagList as TagList};\n\nexport interface TagRenderProps extends Omit<ItemRenderProps, 'allowsDragging' | 'isDragging' | 'isDropTarget'> {\n  /**\n   * Whether the tag group allows items to be removed.\n   * @selector [data-allows-removing]\n   */\n  allowsRemoving: boolean\n}\n\nexport interface TagProps extends RenderProps<TagRenderProps>, LinkDOMProps, HoverEvents {\n  /** A unique id for the tag. */\n  id?: Key,\n  /**\n   * A string representation of the tags's contents, used for accessibility.\n   * Required if children is not a plain text string.\n   */\n  textValue?: string,\n  /** Whether the tag is disabled. */\n  isDisabled?: boolean\n}\n\nfunction Tag(props: TagProps, ref: ForwardedRef<HTMLDivElement>): JSX.Element | null {\n  return useSSRCollectionNode('item', props, ref, props.children);\n}\n\n/**\n * A Tag is an individual item within a TagList.\n */\nconst _Tag = /*#__PURE__*/ (forwardRef as forwardRefType)(Tag);\nexport {_Tag as Tag};\n\nfunction TagItem({item}) {\n  let state = useContext(ListStateContext)!;\n  let ref = useObjectRef<HTMLDivElement>(item.props.ref);\n  let {focusProps, isFocusVisible} = useFocusRing({within: true});\n  let {rowProps, gridCellProps, removeButtonProps, ...states} = useTag({item}, state, ref);\n\n  let {hoverProps, isHovered} = useHover({\n    isDisabled: !states.allowsSelection,\n    onHoverStart: item.props.onHoverStart,\n    onHoverChange: item.props.onHoverChange,\n    onHoverEnd: item.props.onHoverEnd\n  });\n\n  let props: TagProps = item.props;\n  let renderProps = useRenderProps({\n    ...props,\n    id: undefined,\n    children: item.rendered,\n    defaultClassName: 'react-aria-Tag',\n    values: {\n      ...states,\n      isFocusVisible,\n      isHovered,\n      selectionMode: state.selectionManager.selectionMode,\n      selectionBehavior: state.selectionManager.selectionBehavior\n    }\n  });\n\n  useEffect(() => {\n    if (!item.textValue) {\n      console.warn('A `textValue` prop is required for <Tag> elements with non-plain text children for accessibility.');\n    }\n  }, [item.textValue]);\n\n  return (\n    <div\n      ref={ref}\n      {...renderProps}\n      {...mergeProps(filterDOMProps(props as any), rowProps, focusProps, hoverProps)}\n      data-selected={states.isSelected || undefined}\n      data-disabled={states.isDisabled || undefined}\n      data-hovered={isHovered || undefined}\n      data-focused={states.isFocused || undefined}\n      data-focus-visible={isFocusVisible || undefined}\n      data-pressed={states.isPressed || undefined}\n      data-allows-removing={states.allowsRemoving || undefined}\n      data-selection-mode={state.selectionManager.selectionMode === 'none' ? undefined : state.selectionManager.selectionMode}>\n      <div {...gridCellProps} style={{display: 'contents'}}>\n        <Provider\n          values={[\n            [ButtonContext, {\n              slots: {\n                remove: removeButtonProps\n              }\n            }]\n          ]}>\n          {renderProps.children}\n        </Provider>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"version":3,"file":"TagGroup.module.js.map"}