import { W as WhopClientSdkOptions, A as AttachableRecords, U as UploadFileOptions, a as UploadAttachmentResponse, E as Exact, S as Scalars, b as WithError, G as GetAttachmentQuery, c as AnalyzeAttachmentInput, P as ProcessAttachmentMutation, D as DirectUploadInput, d as UploadMediaMutation, e as WebsocketClientOptionsClient, f as WhopWebsocketClientBrowser, g as GetAccessPassQuery, h as GetCompanyQuery, C as CreateAssessmentQuestionInput, i as CreateAssessmentQuestionMutation, j as CreateChapterInput, k as CreateChapterMutation, l as CreateCourseInput, m as CreateCourseMutation, n as CreateLessonInput, o as CreateLessonMutation, p as DeleteAssessmentQuestionImageInput, q as DeleteAssessmentQuestionImageMutation, r as DeleteChapterInput, s as DeleteChapterMutation, t as DeleteLessonAttachmentInput, u as DeleteLessonAttachmentMutation, v as DeleteLessonInput, w as DeleteLessonMutation, x as GetCourseQuery, y as GetLessonQuery, z as GetUserLessonInteractionsQuery, I as InputMaybe, L as ListCoursesForCompanyQuery, B as ListCoursesForExperienceQuery, M as MarkLessonAsCompletedInput, F as MarkLessonAsCompletedMutation, H as MoveCourseInput, J as MoveCourseMutation, K as UpdateChapterOrderInput, N as UpdateChapterOrderMutation, O as UpdateChapterInput, Q as UpdateChapterMutation, R as UpdateLessonOrderInput, T as UpdateLessonOrderMutation, V as UpdateLessonInput, X as UpdateLessonMutation, Y as GetExperienceQuery, Z as Direction, _ as ListUsersForExperienceQuery, $ as ListForumPostsFromForumQuery, a0 as ListMessagesFromChatQuery, a1 as GetCurrentUserQuery, a2 as GetUserLedgerAccountQuery, a3 as GetUserQuery, a4 as WhopServerSdkOptions, a5 as WhopServerSdk$1 } from './client-sdk-shared-BS3RW87z.js';
export { ay as AbuseReportCategoryResourceTypes, az as AbuseReportCategoryVisibility, aA as AbuseReportStatus, aB as AcceptedPaymentMethods, aC as AccessLevel, aD as AccessPassAffiliateOrder, aE as AccessPassAffiliateStatuses, aF as AccessPassAttachmentCategories, aG as AccessPassConditions, aH as AccessPassFilters, gV as AccessPassFragmentFragment, aI as AccessPassOnboardingVersionTypes, aJ as AccessPassOrder, aK as AccessPassProductHighlightInput, aL as AccessPassSocialLinkInput, aM as AccessPassTypes, aN as AccessPassesSortableColumns, aO as AffiliatePayoutTypes, aP as AffiliatePlansSortableColumns, aQ as AffiliateReferralLogFilters, aR as AffiliateReferralLogsSortableColumns, aS as AffiliateTypes, gY as AffiliateWithUserFragment, aT as AffiliatesSortableColumns, aU as AnalyzeAttachmentInput, aV as ApiKeyPermissions, aW as ApiVersion, aX as AppBuildPlatforms, aY as AppBuildStatuses, aZ as AppImageStyles, a_ as AppRequestedPermissionInput, a$ as AppStatuses, b0 as AppValidScopes, b1 as AppViewTypes, b2 as ApplicationCriteriaIdentifier, b3 as AttachableRecords, h2 as AttachmentFragment, b4 as AttachmentInput, b5 as AuditLogsSortableColumns, b6 as AuthenticationMethods, b7 as AuthorizationResourceTypes, b8 as AuthorizedUserRoles, b9 as AutomatedMessagesTriggerCategories, ba as AvatarImageStyles, bb as BalanceReservationReservationTypes, bc as BanReasons, bd as BanUserInput, jG as BanUserMutation, jF as BanUserMutationVariables, gW as BaseAccessPassFragment, gX as BaseAffiliateFragment, h0 as BaseAppAgentUserFragment, g$ as BaseAppApiKeyFragment, gZ as BaseAppBuildFragment, g_ as BaseAppFragment, h1 as BaseAppStatsFragment, h3 as BaseAuthorizedUserFragment, hk as BaseCompanyMemberFragment, h4 as BaseLedgerAccountFragment, h6 as BasePlanFragment, hm as BasePromoCodeFragment, h5 as BasePublicPlanFragment, h9 as BasePublicProfileUserFragment, hn as BasePublicPromoCodeFragment, h7 as BaseReceiptFragment, h8 as BaseUserFragment, ho as BaseWebhookFragment, hb as BasicCourseChapterFragment, ha as BasicCourseFragment, hc as BasicCourseLessonFragment, be as BillingReasons, bf as BnplProvider, bg as BountyFilters, bh as BusinessActivityEventTypes, bi as BusinessAffiliateImageStyles, bj as BusinessTypes, bk as BuyerFeeMode, bl as CancelOptions, bm as CaseStates, bn as ChangeCardMyMembershipInput, bo as ChargeCardFunding, bp as ChargeOutcomeRiskLevels, bq as ChargeUserInput, jq as ChargeUserMutation, jp as ChargeUserMutationVariables, br as ChargeUserResponseStatus, bs as ChartIntervals, bt as ChatFeedInput, hy as CheckIfUserHasAccessToAccessPassQuery, hx as CheckIfUserHasAccessToAccessPassQueryVariables, hA as CheckIfUserHasAccessToCompanyQuery, hz as CheckIfUserHasAccessToCompanyQueryVariables, hC as CheckIfUserHasAccessToExperienceQuery, hB as CheckIfUserHasAccessToExperienceQueryVariables, bu as CheckoutSessionTypes, bv as CoinbaseCommerceStatuses, bw as CompaniesOrder, bx as CompanyAttachmentCategories, hd as CompanyFragmentFragment, by as CompanyImageStyles, bz as CompanyOnboardingPlanOptions, bA as CompanyTypes, bB as CompetitionMetricTypes, bC as CompetitionPrizeTypes, bD as ConnectedAccountStatuses, bE as ConnectedAccountTypes, bF as ContentRewardsCampaignOrder, bG as ContentRewardsCampaignStatus, bH as ContentRewardsCampaignsFilters, bI as ContentRewardsCategory, bJ as ContentRewardsContentType, bK as ContentRewardsPlatform, bL as ContentRewardsPublicCampaignOrder, bM as ContentRewardsPublicCampaignsFilters, bN as ContentRewardsSubmissionAnalysisResults, bO as ContentRewardsSubmissionFlagReasons, bP as ContentRewardsSubmissionStatus, bQ as ContentRewardsSubmissionViewsChartConfigInput, bR as ContentRewardsSubmissionsFilters, bS as ContentRewardsSubmissionsOrder, bT as ContentRewardsSubmissionsSortableColumns, bU as ContentRewardsViewsChartConfigInput, hj as CourseAssessmentQuestionFragment, hi as CourseMuxAssetFragment, bV as CoursesAssessmentQuestionTypes, bW as CreateAccessPassInput, hq as CreateAccessPassMutation, hp as CreateAccessPassMutationVariables, bX as CreateAffiliateInput, hE as CreateAffiliateMutation, hD as CreateAffiliateMutationVariables, bY as CreateAgentUserInput, bZ as CreateAppBuildInput, hM as CreateAppBuildMutation, hL as CreateAppBuildMutationVariables, b_ as CreateAppInput, hO as CreateAppMutation, hN as CreateAppMutationVariables, b$ as CreateAssessmentQuestionInput, iq as CreateAssessmentQuestionMutation, ip as CreateAssessmentQuestionMutationVariables, c0 as CreateChapterInput, is as CreateChapterMutation, ir as CreateChapterMutationVariables, c1 as CreateChatInput, c2 as CreateCheckoutSessionInput, js as CreateCheckoutSessionMutation, jr as CreateCheckoutSessionMutationVariables, c3 as CreateCompanyMutedUserInput, c4 as CreateCourseInput, iu as CreateCourseMutation, it as CreateCourseMutationVariables, c5 as CreateForumInput, c6 as CreateForumPostInput, j8 as CreateForumPostMutation, j7 as CreateForumPostMutationVariables, c7 as CreateLessonInput, iw as CreateLessonMutation, iv as CreateLessonMutationVariables, c8 as CreatePromoCodeInput, jy as CreatePromoCodeMutation, jx as CreatePromoCodeMutationVariables, c9 as CreateWebhookInput, jU as CreateWebhookMutation, jT as CreateWebhookMutationVariables, ca as CreatorDashboardCancelationDiscounts, cb as CreatorDashboardChartConfigInput, cc as CreatorDashboardChartIntervals, cd as CreditTransactionActivityTypes, ce as CreditTransactionFilters, cf as CreditTransactionStatuses, cg as CreditTransactionTransferReasons, ch as CreditTransactionTransferStatuses, ci as CreditTransactionTransferTypes, cj as CreditTransactionTransfersSortableColumns, ck as CryptoWalletNetworks, cl as Currencies, cm as CustomCtas, cn as CustomFieldInput, co as CustomFieldTypes, cp as DeleteAccessPassInput, hs as DeleteAccessPassMutation, hr as DeleteAccessPassMutationVariables, cq as DeleteAssessmentQuestionImageInput, iy as DeleteAssessmentQuestionImageMutation, ix as DeleteAssessmentQuestionImageMutationVariables, cr as DeleteChapterInput, iA as DeleteChapterMutation, iz as DeleteChapterMutationVariables, cs as DeleteCompanyMutedUserInput, ct as DeleteLessonAttachmentInput, iC as DeleteLessonAttachmentMutation, iB as DeleteLessonAttachmentMutationVariables, cu as DeleteLessonInput, iE as DeleteLessonMutation, iD as DeleteLessonMutationVariables, cv as DeletePromoCodeInput, jA as DeletePromoCodeMutation, jz as DeletePromoCodeMutationVariables, cw as DeleteWebhookInput, jW as DeleteWebhookMutation, jV as DeleteWebhookMutationVariables, cx as Device, cy as DirectMessageStatus, cz as DirectUploadInput, cA as Direction, cB as DiscordAccountImageStyles, cC as DiscoverStatuses, cD as DisputeRiskLevels, cE as DisputeStatuses, ac as DisputeWebhookData, cF as DisputesSortableColumns, cG as DmsChannelsSortTypes, cH as DmsFeedInput, cI as DmsFeedMemberInput, cJ as DmsFeedMemberNotificationPreferences, cK as DmsFeedMemberStatuses, cL as DmsFeedTypes, cM as DmsPostInput, cN as DmsPostTypes, cO as EarningsReportPeriods, cP as EarningsTypes, cQ as EntityTypes, cR as EntriesFiltersInput, cS as EntriesSortableColumns, cT as EntryFilters, cU as EntryOrder, cV as EntryStatus, cW as EntryTypes, as as Exact, cX as ExperienceAccessLevels, cY as ExperienceActivityCardTypes, cZ as ExperienceFilters, he as ExperienceFragmentFragment, c_ as ExperienceLinkModes, c$ as ExperienceTypes, d0 as FeedTypes, d1 as FileAttachmentInput, d2 as FileAttachmentModerationResultsTypes, d3 as FileAttachmentTypes, je as FindOrCreateChatMutation, jd as FindOrCreateChatMutationVariables, ja as FindOrCreateForumMutation, j9 as FindOrCreateForumMutationVariables, d4 as FlashSaleDurations, d5 as FlashSaleStatuses, d6 as ForumEmailNotificationPreferences, d7 as ForumLayoutTypes, hg as ForumPostFragmentFragment, d8 as ForumPostTypes, d9 as ForumWhoCanCommentTypes, da as ForumWhoCanPostTypes, db as FriendlyReceiptStatus, hh as FullCourseLessonFragment, dc as GatewayTypes, hu as GetAccessPassQuery, ht as GetAccessPassQueryVariables, hG as GetAffiliateQuery, hF as GetAffiliateQueryVariables, hQ as GetAppQuery, hP as GetAppQueryVariables, i0 as GetAttachmentQuery, h$ as GetAttachmentQueryVariables, i6 as GetCompanyLedgerAccountQuery, i5 as GetCompanyLedgerAccountQueryVariables, i8 as GetCompanyQuery, i7 as GetCompanyQueryVariables, iG as GetCourseQuery, iF as GetCourseQueryVariables, jI as GetCurrentUserQuery, jH as GetCurrentUserQueryVariables, j0 as GetExperienceQuery, i$ as GetExperienceQueryVariables, iI as GetLessonQuery, iH as GetLessonQueryVariables, ia as GetMemberQuery, i9 as GetMemberQueryVariables, jC as GetPromoCodeQuery, jB as GetPromoCodeQueryVariables, jK as GetUserLedgerAccountQuery, jJ as GetUserLedgerAccountQueryVariables, iK as GetUserLessonInteractionsQuery, iJ as GetUserLessonInteractionsQueryVariables, jM as GetUserQuery, jL as GetUserQueryVariables, jY as GetWebhookQuery, jX as GetWebhookQueryVariables, dd as GifInput, de as GifProviders, df as GlobalAffiliateStatuses, dg as HubMembershipStatus, dh as ImageAttachmentVariants, di as ImageExtensions, dj as ImageImageStyles, aw as Incremental, dk as IndustryTypes, ar as InputMaybe, dl as InstantPayoutErrorCodes, dm as InvoiceCollectionMethods, dn as InvoiceStatuses, dp as InvoicesSortableColumns, dq as ItemOrderingOrderTypes, dr as Languages, ds as LeaderboardTypes, dt as LeadsSortableColumns, du as LedgerAccountAuditStatuses, dv as LedgerAccountStandings, dw as LedgerTypes, dx as LedgerWithdrawalFrequencies, dy as LedgerWithdrawalStatuses, dz as LessonTypes, dA as LessonVisibilities, dB as LikedDiscoverAccessPassesOrder, dC as LinkEmbedInput, j2 as ListAccessPassesForExperienceQuery, j1 as ListAccessPassesForExperienceQueryVariables, ic as ListAccessPassesQuery, ib as ListAccessPassesQueryVariables, hI as ListAffiliatesQuery, hH as ListAffiliatesQueryVariables, hS as ListAppsQuery, hR as ListAppsQueryVariables, ie as ListAuthorizedUsersQuery, id as ListAuthorizedUsersQueryVariables, iM as ListCoursesForCompanyQuery, iL as ListCoursesForCompanyQueryVariables, iO as ListCoursesForExperienceQuery, iN as ListCoursesForExperienceQueryVariables, jg as ListDirectMessageConversationsQuery, jf as ListDirectMessageConversationsQueryVariables, j4 as ListExperiencesQuery, j3 as ListExperiencesQueryVariables, jc as ListForumPostsFromForumQuery, jb as ListForumPostsFromForumQueryVariables, ih as ListMembersQuery, ig as ListMembersQueryVariables, ij as ListMembershipsQuery, ii as ListMembershipsQueryVariables, ji as ListMessagesFromChatQuery, jh as ListMessagesFromChatQueryVariables, il as ListPlansQuery, ik as ListPlansQueryVariables, jE as ListPromoCodesQuery, jD as ListPromoCodesQueryVariables, ju as ListReceiptsForCompanyQuery, jt as ListReceiptsForCompanyQueryVariables, j6 as ListUsersForExperienceQuery, j5 as ListUsersForExperienceQueryVariables, io as ListWaitlistEntriesQuery, im as ListWaitlistEntriesQueryVariables, j_ as ListWebhooksQuery, jZ as ListWebhooksQueryVariables, dD as LivestreamDestination, dE as LivestreamFeedInput, dF as LivestreamWhoCanPostTypes, dG as LivestreamWhoCanReactTypes, dH as MadeForYouPlanFilters, av as MakeEmpty, au as MakeMaybe, at as MakeOptional, dI as ManagementItems, dJ as MarkLessonAsCompletedInput, iQ as MarkLessonAsCompletedMutation, iP as MarkLessonAsCompletedMutationVariables, dK as MarketplaceCategoryOrder, dL as MarketplaceCategoryTypes, dM as MarketplaceStatuses, aq as Maybe, dN as Media, dO as MemberMostRecentActions, dP as MemberStatuses, dQ as MemberSubtextTypes, dR as MembersFiltersInput, dS as MembersSortableColumns, dT as MembershipActions, dU as MembershipHeaderStatus, dV as MembershipImageStyles, dW as MembershipPaymentProcessor, dX as MembershipPushNotification, dY as MembershipStatus, ad as MembershipWebhookData, dZ as MembershipsFiltersInput, d_ as MembershipsSortableColumns, hl as MessageFragment, d$ as ModerationResults, e0 as MoveCourseInput, iS as MoveCourseMutation, iR as MoveCourseMutationVariables, jO as MuteUserMutation, jN as MuteUserMutationVariables, e1 as MutedUserInput, e2 as MuxAssetStatuses, e3 as NormalizedAccountTypes, e4 as NotificationPreferenceChannel, e5 as NotificationPreferencesFilters, e6 as NotificationPreferencesFiltersV3, e7 as NotificationTopicStatus, e8 as NotificationTopicTypes, e9 as NotificationTopicVisibility, ea as NotificationsV4Filters, eb as NotificationsV4Pagination, ec as OnboardingProviders, ed as OnboardingTypes, ee as OpengraphImageVariants, jw as PayUserMutation, jv as PayUserMutationVariables, ef as PaymentMethods, eg as PaymentProcessor, eh as PaymentProviders, ei as PaymentTransactionProviders, ej as PaymentTransactionStatuses, ek as PaymentTransactionTypes, ae as PaymentWebhookData, el as PaymentsApprovalStatuses, em as PayoutAccountProviders, en as PayoutAccountStatuses, eo as PayoutDeliveryTypes, ep as PayoutDestinationPlatformStatuses, eq as PayoutDestinationProviders, er as PayoutDestinationStatuses, es as PayoutDestinationTypes, et as PayoutErrorCodes, eu as PayoutIntervals, ev as PayoutMethods, ew as PayoutStatuses, ex as PayoutTokenAttributeDataTypes, ey as PayoutTokenAttributeInputTypes, ez as PayoutTokenAttributeValueTypes, eA as PayoutTokenProviders, eB as PayoutTokenStatuses, eC as PayoutTypes, eD as PaypalAccountStatuses, eE as PerkStatus, eF as PlanDirectLink, eG as PlanFilters, eH as PlanOrder, eI as PlanTypes, eJ as PlansOrder, eK as PlansSortableColumns, eL as PollInput, eM as PollOptionInput, eN as PostTypes, i2 as ProcessAttachmentMutation, i1 as ProcessAttachmentMutationVariables, eO as ProcessEntitiesInput, eP as ProductHighlightTypes, eQ as ProductImageStyles, eR as ProductTaxCodeProductTypes, eS as ProductUserFilters, eT as ProductUserOrder, eU as ProfileVisibilities, eV as PromoCodeFilters, eW as PromoCodeNewStatus, eX as PromoCodeOrder, eY as PromoCodeStatus, eZ as PromoCodesSortableColumns, e_ as PromoDurations, e$ as PromoTypes, hU as PromoteAppBuildMutation, hT as PromoteAppBuildMutationVariables, f0 as PromoteAppBuildToProductionInput, f1 as PublicAccessPassesOrder, f2 as PublicBountiesOrder, hf as PublicExperienceFragmentFragment, f3 as ReactionInput, f4 as ReactionTypes, f5 as ReceiptFeeTypes, f6 as ReceiptPaymentProcessor, f7 as ReceiptStatus, f8 as ReceiptStatusV2, f9 as ReceiptTaxBehaviors, fa as ReceiptV2Filters, fb as ReceiptV2Order, fc as ReceiptsSortableColumns, ai as ReceivableWebsocketMessage, fd as RefundStatuses, af as RefundWebhookData, fe as ReleaseMethod, ff as ReportTypes, k3 as Requester, fg as ResolutionActions, fh as ResolutionCustomerResponses, fi as ResolutionFilters, fj as ResolutionIneligibilityReason, fk as ResolutionIssueTypes, fl as ResolutionMerchantResponses, fm as ResolutionOrder, fn as ResolutionPlatformResponses, fo as ResolutionReporters, fp as ResolutionStatuses, fq as ResolutionsSortableColumns, fr as RestrictionSetReasonCodes, fs as RetryPaymentMyMembershipInput, ft as ReviewFilters, fu as ReviewOrder, fv as ReviewReportStatus, fw as ReviewStatus, fx as ReviewsSortableColumns, fy as RewardUnits, fz as RfiStatuses, ax as Scalars, k7 as Sdk, fA as SecurityLevels, jk as SendDirectMessageToUserMutation, jj as SendDirectMessageToUserMutationVariables, fB as SendMessageInput, jm as SendMessageToChatMutation, jl as SendMessageToChatMutationVariables, fC as SendNotificationInput, jo as SendPushNotificationMutation, jn as SendPushNotificationMutationVariables, aj as SendableWebsocketMessage, fD as SimpleNotificationPreferenceStatus, fE as SocialLinkWebsites, fF as SpecificFeeOrigins, fG as StatsConfigInput, fH as Status, fI as Statuses, fJ as StripeAccountStatuses, fK as StripeAccountTypes, fL as StripeBusinessTypes, fM as StripeExternalAccountStatuses, fN as StripePayoutMethods, fO as StripePayoutPayoutTypes, fP as StripePayoutStatuses, fQ as StripePayoutTraceStatuses, fR as TaxTypes, fS as TerminateMyMembershipInput, k0 as TestWebhookMutation, j$ as TestWebhookMutationVariables, fT as TestWebhookV2Input, fU as ToggleCancelMyMembershipInput, fV as Topic, fW as TrackingLinkDestination, fX as TrackingLinksSortableColumns, fY as TrackingPixelTypes, fZ as TransferFundsInput, f_ as TransferLinkMyMembershipInput, hW as UnassignAppBuildMutation, hV as UnassignAppBuildMutationVariables, f$ as UnassignProductionAppBuildInput, g0 as UnbanUserInput, jQ as UnbanUserMutation, jP as UnbanUserMutationVariables, g1 as UniversalPostFeedTypes, jS as UnmuteUserMutation, jR as UnmuteUserMutationVariables, g2 as UpdateAccessPassInput, hw as UpdateAccessPassMutation, hv as UpdateAccessPassMutationVariables, g3 as UpdateAffiliateInput, hK as UpdateAffiliateMutation, hJ as UpdateAffiliateMutationVariables, g4 as UpdateAgentUserInput, g5 as UpdateAppInput, h_ as UpdateAppMutation, hZ as UpdateAppMutationVariables, g6 as UpdateAppPermissionRequirementsInput, hY as UpdateAppPermissionsMutation, hX as UpdateAppPermissionsMutationVariables, g7 as UpdateChapterInput, iW as UpdateChapterMutation, iV as UpdateChapterMutationVariables, g8 as UpdateChapterOrderInput, iU as UpdateChapterOrderMutation, iT as UpdateChapterOrderMutationVariables, g9 as UpdateLessonInput, i_ as UpdateLessonMutation, iZ as UpdateLessonMutationVariables, ga as UpdateLessonOrderInput, iY as UpdateLessonOrderMutation, iX as UpdateLessonOrderMutationVariables, gb as UpdateMembershipInput, gc as UpdateWebhookInput, k2 as UpdateWebhookMutation, k1 as UpdateWebhookMutationVariables, i4 as UploadMediaMutation, i3 as UploadMediaMutationVariables, gd as UploadPartInput, ge as UpsellPlanInput, gf as UpsellTypes, gg as UserAffiliateReferralLogFilters, gh as UserAffiliateReferralLogOrder, gi as UserChartConfigInput, gj as UserContentRewardsSubmissionsFilters, gk as UserContentRewardsSubmissionsOrder, gl as UserNotificationPreferenceChannel, gm as UserOnboardingStepsTypes, gn as UserReceiptFilters, go as UserReceiptOrder, gp as UserReceiptPaidTypeFilter, gq as UserSocialLinkWebsites, aa as UserTokenPayload, gr as UserTypes, gs as ValidMembershipsOrder, gt as VaultMethods, gu as VaultTokenProviders, gv as VerificationErrorCodes, gw as VerificationProviders, gx as VerificationStatuses, gy as VerifiedStatuses, ab as VerifyUserTokenOptions, gz as VersionEventTypes, gA as VersionFilters, gB as VersionObjects, gC as VersionOrder, gD as Visibility, gE as VisibilityFilter, gF as WebhookEvent, ak as WebsocketBroadcastTarget, al as WebsocketMessageHandler, am as WebsocketStatus, an as WebsocketStatusHandler, gG as WeeklyAnchors, gH as WhoCanPostTypes, gI as WhoCanReactTypes, gJ as WhopSidebarFilters, gK as WhopSidebarOrderEnum, gL as WhopSidebarWithEarningsFilters, gM as WhopSidebarWithEarningsOrderEnum, ah as WhopWebhookRequestBody, ao as WhopWebsocketClientBase, ap as WhopWebsocketClientServer, k4 as WithError, gN as WithdrawalFeeTypes, gO as WithdrawalFilters, gP as WithdrawalMethods, gQ as WithdrawalProviders, gR as WithdrawalSpeeds, gS as WithdrawalStatus, gT as WithdrawalTypes, gU as WithdrawalsSortableColumns, k5 as carryErrors, k6 as getSdk, a7 as getUserToken, a8 as makeUserTokenVerifier, ag as makeWebhookValidator, a6 as proto, a9 as verifyUserToken } from './client-sdk-shared-BS3RW87z.js';
import 'tiny-typed-emitter';
import '@auth/core/providers';

declare function WhopClientSdk(options?: WhopClientSdkOptions): {
    attachments: {
        uploadAttachment: (input: {
            data: File | Blob;
            id: string;
            multipartUploadUrls: {
                __typename?: "MultipartUrl";
                partNumber: number;
                url: string;
            }[];
            multipartUploadId: string;
            record: AttachableRecords;
            multipart: true;
            uploadUrl?: undefined;
            headers?: undefined;
        } | {
            data: File | Blob;
            id: string;
            uploadUrl: string;
            headers: Record<string, string>;
            record: AttachableRecords;
            multipart: false;
            multipartUploadUrls?: undefined;
            multipartUploadId?: undefined;
        } | {
            file: File | Blob;
            record: AttachableRecords;
        } | Promise<{
            data: File | Blob;
            id: string;
            multipartUploadUrls: {
                __typename?: "MultipartUrl";
                partNumber: number;
                url: string;
            }[];
            multipartUploadId: string;
            record: AttachableRecords;
            multipart: true;
            uploadUrl?: undefined;
            headers?: undefined;
        } | {
            data: File | Blob;
            id: string;
            uploadUrl: string;
            headers: Record<string, string>;
            record: AttachableRecords;
            multipart: false;
            multipartUploadUrls?: undefined;
            multipartUploadId?: undefined;
        }>, args_1?: UploadFileOptions | undefined) => Promise<UploadAttachmentResponse>;
        prepareAttachmentForUpload: (data: File | Blob, record: AttachableRecords) => Promise<{
            data: File | Blob;
            id: string;
            multipartUploadUrls: {
                __typename?: "MultipartUrl";
                partNumber: number;
                url: string;
            }[];
            multipartUploadId: string;
            record: AttachableRecords;
            multipart: true;
            uploadUrl?: undefined;
            headers?: undefined;
        } | {
            data: File | Blob;
            id: string;
            uploadUrl: string;
            headers: Record<string, string>;
            record: AttachableRecords;
            multipart: false;
            multipartUploadUrls?: undefined;
            multipartUploadId?: undefined;
        }>;
        analyzeAttachment: (signedId: string, opts?: {
            signal?: AbortSignal;
        } | undefined) => Promise<({
            __typename: "AudioAttachment";
            duration?: number | null;
            waveformUrl?: string | null;
            id: string;
            signedId?: string | null;
            analyzed: boolean;
            byteSizeV2?: string | null;
            filename?: string | null;
            contentType?: string | null;
            source: {
                __typename?: "AttachmentSource";
                url: string;
            };
        } & {
            _error?: Error;
        }) | ({
            __typename: "ImageAttachment";
            height?: number | null;
            width?: number | null;
            blurhash?: string | null;
            aspectRatio?: number | null;
            id: string;
            signedId?: string | null;
            analyzed: boolean;
            byteSizeV2?: string | null;
            filename?: string | null;
            contentType?: string | null;
            source: {
                __typename?: "AttachmentSource";
                url: string;
            };
        } & {
            _error?: Error;
        }) | ({
            __typename: "OtherAttachment";
            id: string;
            signedId?: string | null;
            analyzed: boolean;
            byteSizeV2?: string | null;
            filename?: string | null;
            contentType?: string | null;
            source: {
                __typename?: "AttachmentSource";
                url: string;
            };
        } & {
            _error?: Error;
        }) | ({
            __typename: "VideoAttachment";
            height?: number | null;
            width?: number | null;
            duration?: number | null;
            aspectRatio?: number | null;
            id: string;
            signedId?: string | null;
            analyzed: boolean;
            byteSizeV2?: string | null;
            filename?: string | null;
            contentType?: string | null;
            preview: {
                __typename?: "AttachmentSource";
                url: string;
            };
            source: {
                __typename?: "AttachmentSource";
                url: string;
            };
        } & {
            _error?: Error;
        }) | undefined>;
        getAttachment(variables: Exact<{
            id: Scalars["ID"]["input"];
        }>, options?: RequestInit | undefined): Promise<WithError<GetAttachmentQuery["attachment"]>>;
        processAttachment(variables: AnalyzeAttachmentInput, options?: RequestInit | undefined): Promise<WithError<ProcessAttachmentMutation["mediaAnalyzeAttachment"]>>;
        uploadMedia(variables: DirectUploadInput, options?: RequestInit | undefined): Promise<WithError<UploadMediaMutation["mediaDirectUpload"]>>;
    };
    websockets: {
        client: (options: WebsocketClientOptionsClient) => WhopWebsocketClientBrowser;
    };
    accessPasses: {
        getAccessPass(variables: Exact<{
            accessPassId: Scalars["ID"]["input"];
        }>, options?: RequestInit | undefined): Promise<WithError<GetAccessPassQuery["accessPass"]>>;
    };
    companies: {
        getCompany(variables: Exact<{
            companyId: Scalars["ID"]["input"];
        }>, options?: RequestInit | undefined): Promise<WithError<GetCompanyQuery["company"]>>;
    };
    courses: {
        createAssessmentQuestion(variables: CreateAssessmentQuestionInput, options?: RequestInit | undefined): Promise<WithError<CreateAssessmentQuestionMutation["createAssessmentQuestion"]>>;
        createChapter(variables: CreateChapterInput, options?: RequestInit | undefined): Promise<WithError<CreateChapterMutation["createChapter"]>>;
        createCourse(variables: CreateCourseInput, options?: RequestInit | undefined): Promise<WithError<CreateCourseMutation["createCourse"]>>;
        createLesson(variables: CreateLessonInput, options?: RequestInit | undefined): Promise<WithError<CreateLessonMutation["createLesson"]>>;
        deleteAssessmentQuestionImage(variables: DeleteAssessmentQuestionImageInput, options?: RequestInit | undefined): Promise<WithError<DeleteAssessmentQuestionImageMutation["deleteAssessmentQuestionImage"]>>;
        deleteChapter(variables: DeleteChapterInput, options?: RequestInit | undefined): Promise<WithError<DeleteChapterMutation["deleteChapter"]>>;
        deleteLessonAttachment(variables: DeleteLessonAttachmentInput, options?: RequestInit | undefined): Promise<WithError<DeleteLessonAttachmentMutation["deleteLessonAttachment"]>>;
        deleteLesson(variables: DeleteLessonInput, options?: RequestInit | undefined): Promise<WithError<DeleteLessonMutation["deleteLesson"]>>;
        getCourse(variables: Exact<{
            courseId: Scalars["ID"]["input"];
        }>, options?: RequestInit | undefined): Promise<WithError<GetCourseQuery["course"]>>;
        getLesson(variables: Exact<{
            courseId: Scalars["ID"]["input"];
            lessonId: Scalars["ID"]["input"];
        }>, options?: RequestInit | undefined): Promise<WithError<GetLessonQuery["course"]>>;
        getUserLessonInteractions(variables: Exact<{
            courseId: Scalars["ID"]["input"];
        }>, options?: RequestInit | undefined): Promise<WithError<GetUserLessonInteractionsQuery["course"]>>;
        listCoursesForCompany(variables: Exact<{
            companyId: Scalars["ID"]["input"];
            first?: InputMaybe<Scalars["Int"]["input"]>;
            after?: InputMaybe<Scalars["String"]["input"]>;
        }>, options?: RequestInit | undefined): Promise<WithError<ListCoursesForCompanyQuery["company"]>>;
        listCoursesForExperience(variables: Exact<{
            experienceId: Scalars["ID"]["input"];
            first?: InputMaybe<Scalars["Int"]["input"]>;
            after?: InputMaybe<Scalars["String"]["input"]>;
        }>, options?: RequestInit | undefined): Promise<WithError<ListCoursesForExperienceQuery["publicExperience"]>>;
        markLessonAsCompleted(variables: MarkLessonAsCompletedInput, options?: RequestInit | undefined): Promise<WithError<MarkLessonAsCompletedMutation["markLessonAsCompleted"]>>;
        moveCourse(variables: MoveCourseInput, options?: RequestInit | undefined): Promise<WithError<MoveCourseMutation["moveCourse"]>>;
        updateChapterOrder(variables: UpdateChapterOrderInput, options?: RequestInit | undefined): Promise<WithError<UpdateChapterOrderMutation["updateChapterOrder"]>>;
        updateChapter(variables: UpdateChapterInput, options?: RequestInit | undefined): Promise<WithError<UpdateChapterMutation["updateChapter"]>>;
        updateLessonOrder(variables: UpdateLessonOrderInput, options?: RequestInit | undefined): Promise<WithError<UpdateLessonOrderMutation["updateLessonOrder"]>>;
        updateLesson(variables: UpdateLessonInput, options?: RequestInit | undefined): Promise<WithError<UpdateLessonMutation["updateLesson"]>>;
    };
    experiences: {
        getExperience(variables: Exact<{
            experienceId: Scalars["ID"]["input"];
        }>, options?: RequestInit | undefined): Promise<WithError<GetExperienceQuery["experience"]>>;
        listUsersForExperience(variables: Exact<{
            experienceId: Scalars["ID"]["input"];
            after?: InputMaybe<Scalars["String"]["input"]>;
            before?: InputMaybe<Scalars["String"]["input"]>;
            direction?: InputMaybe<Direction>;
            first?: InputMaybe<Scalars["Int"]["input"]>;
            searchQuery?: InputMaybe<Scalars["String"]["input"]>;
        }>, options?: RequestInit | undefined): Promise<WithError<ListUsersForExperienceQuery["publicExperience"]>>;
    };
    forums: {
        listForumPostsFromForum(variables: Exact<{
            experienceId: Scalars["ID"]["input"];
        }>, options?: RequestInit | undefined): Promise<WithError<ListForumPostsFromForumQuery["feedPosts"]>>;
    };
    messages: {
        listMessagesFromChat(variables?: Exact<{
            chatExperienceId?: InputMaybe<Scalars["ID"]["input"]>;
        }> | undefined, options?: RequestInit | undefined): Promise<WithError<ListMessagesFromChatQuery["feedPosts"]>>;
    };
    users: {
        getCurrentUser(variables?: Exact<{
            [key: string]: never;
        }> | undefined, options?: RequestInit | undefined): Promise<WithError<GetCurrentUserQuery["viewer"]>>;
        getUserLedgerAccount(variables?: Exact<{
            [key: string]: never;
        }> | undefined, options?: RequestInit | undefined): Promise<WithError<GetUserLedgerAccountQuery["viewer"]>>;
        getUser(variables: Exact<{
            userId: Scalars["ID"]["input"];
        }>, options?: RequestInit | undefined): Promise<WithError<GetUserQuery["publicUser"]>>;
    };
};
type WhopClientSdk = ReturnType<typeof WhopClientSdk>;

declare function WhopServerSdk(options: WhopServerSdkOptions): WhopServerSdk$1;
type WhopServerSdk = ReturnType<typeof WhopServerSdk>;

export { UploadAttachmentResponse, WhopClientSdk, WhopClientSdkOptions, WhopServerSdk, WhopServerSdkOptions, WhopWebsocketClientBrowser };
