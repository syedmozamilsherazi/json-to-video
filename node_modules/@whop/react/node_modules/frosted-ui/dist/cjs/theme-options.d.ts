import type { GetPropDefTypes } from './helpers';
import { radixGrayScales } from './helpers/radix-colors';
declare const colorPanelElevationColors: readonly ["color-panel-elevation"];
declare const semanticColors: readonly ["danger", "warning", "success", "info"];
declare const dangerColors: readonly ["tomato", "red", "ruby"];
declare const warningColors: readonly ["yellow", "amber"];
declare const successColors: readonly ["teal", "jade", "green", "grass"];
declare const infoColors: readonly ["blue", "sky"];
declare const themePropDefs: {
    hasBackground: {
        type: "boolean";
        default: true;
    };
    appearance: {
        type: "enum";
        values: readonly ["inherit", "light", "dark"];
        default: "inherit";
    };
    accentColor: {
        type: "enum";
        values: readonly ["tomato", "red", "ruby", "crimson", "pink", "plum", "purple", "violet", "iris", "cyan", "teal", "jade", "green", "grass", "brown", "blue", "orange", "indigo", "sky", "mint", "yellow", "amber", "lime", "lemon", "magenta", "gold", "bronze", "gray"];
        default: "blue";
    };
    grayColor: {
        type: "enum";
        values: readonly ["gray", "mauve", "slate", "sage", "olive", "sand", "auto"];
        default: "gray";
    };
    dangerColor: {
        type: "enum";
        values: readonly ["tomato", "red", "ruby"];
        default: "red";
    };
    warningColor: {
        type: "enum";
        values: readonly ["yellow", "amber"];
        default: "amber";
    };
    successColor: {
        type: "enum";
        values: readonly ["teal", "jade", "green", "grass"];
        default: "green";
    };
    infoColor: {
        type: "enum";
        values: readonly ["blue", "sky"];
        default: "sky";
    };
};
type ThemeProps = GetPropDefTypes<typeof themePropDefs>;
type ThemeAppearance = NonNullable<ThemeProps['appearance']>;
type ThemeAccentColor = NonNullable<ThemeProps['accentColor']>;
type ThemeGrayColor = NonNullable<ThemeProps['grayColor']>;
type ThemeDangerColor = NonNullable<ThemeProps['dangerColor']>;
type ThemeWarningColor = NonNullable<ThemeProps['warningColor']>;
type ThemeSuccessColor = NonNullable<ThemeProps['successColor']>;
type ThemeInfoColor = NonNullable<ThemeProps['infoColor']>;
type ThemeOptions = {
    appearance: ThemeAppearance;
    accentColor: ThemeAccentColor;
    grayColor: ThemeGrayColor;
    dangerColor: ThemeDangerColor;
    warningColor: ThemeWarningColor;
    successColor: ThemeSuccessColor;
    infoColor: ThemeInfoColor;
};
declare const themeAccentColorsGrouped: {
    label: string;
    values: ThemeAccentColor[];
}[];
declare const themeAccentColorsOrdered: ThemeAccentColor[];
declare const themeGrayColorsGrouped: {
    label: string;
    values: ThemeGrayColor[];
}[];
declare function getMatchingGrayColor(accentColor: ThemeAccentColor): (typeof radixGrayScales)[number];
export { colorPanelElevationColors, dangerColors, getMatchingGrayColor, infoColors, semanticColors, successColors, themeAccentColorsGrouped, themeAccentColorsOrdered, themeGrayColorsGrouped, themePropDefs, warningColors, };
export type { ThemeOptions };
