import * as React from 'react';
import type { ThemeOptions } from './theme-options';
interface ThemeChangeHandlers {
    onAppearanceChange: (appearance: ThemeOptions['appearance']) => void;
    onAccentColorChange: (accentColor: ThemeOptions['accentColor']) => void;
    onGrayColorChange: (grayColor: ThemeOptions['grayColor']) => void;
    onInfoColorChange: (infoColor: ThemeOptions['infoColor']) => void;
    onWarningColorChange: (warningColor: ThemeOptions['warningColor']) => void;
    onSuccessColorChange: (successColor: ThemeOptions['successColor']) => void;
    onDangerColorChange: (dangerColor: ThemeOptions['dangerColor']) => void;
}
interface ThemeContextValue extends ThemeOptions, ThemeChangeHandlers {
    resolvedGrayColor: ThemeOptions['grayColor'];
}
declare function useThemeContext(): ThemeContextValue;
interface ThemeProps extends ThemeRootProps {
}
declare const Theme: {
    (props: ThemeProps): React.JSX.Element;
    displayName: string;
};
interface ThemeRootProps extends ThemeImplPublicProps {
}
interface ThemeImplPublicProps extends Omit<React.ComponentPropsWithoutRef<'div'>, 'dir'>, Partial<ThemeOptions> {
    asChild?: boolean;
    isRoot?: boolean;
    hasBackground?: boolean;
}
declare function updateThemeAppearanceClass(appearance: ThemeOptions['appearance']): void;
export { Theme, updateThemeAppearanceClass, useThemeContext };
export type { ThemeProps };
