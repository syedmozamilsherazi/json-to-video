"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.Trigger = exports.Title = exports.Root = exports.Description = exports.Content = exports.Close = void 0;
const tslib_1 = require("tslib");
const classnames_1 = tslib_1.__importDefault(require("classnames"));
const radix_ui_1 = require("radix-ui");
const React = tslib_1.__importStar(require("react"));
const theme_1 = require("../../theme");
const heading_1 = require("../heading");
const text_1 = require("../text");
const dialog_props_1 = require("./dialog.props");
const DialogRoot = (props) => React.createElement(radix_ui_1.Dialog.Root, { ...props, modal: true });
exports.Root = DialogRoot;
DialogRoot.displayName = 'DialogRoot';
const DialogTrigger = (props) => React.createElement(radix_ui_1.Dialog.Trigger, { ...props, asChild: true });
exports.Trigger = DialogTrigger;
DialogTrigger.displayName = 'DialogTrigger';
const DialogContentContext = React.createContext({
    size: dialog_props_1.dialogContentPropDefs.size.default,
});
const DialogContent = (props) => {
    const { className, children, forceMount, container, size = dialog_props_1.dialogContentPropDefs.size.default, ...contentProps } = props;
    return (React.createElement(radix_ui_1.Dialog.Portal, { container: container, forceMount: forceMount },
        React.createElement(theme_1.Theme, { asChild: true },
            React.createElement(radix_ui_1.Dialog.Overlay, { className: "fui-DialogOverlay" },
                React.createElement(radix_ui_1.Dialog.Content, { ...contentProps, className: (0, classnames_1.default)('fui-DialogContent', className, `fui-r-size-${size}`) },
                    React.createElement(DialogContentContext.Provider, { value: React.useMemo(() => ({ size }), [size]) }, children))))));
};
exports.Content = DialogContent;
DialogContent.displayName = 'DialogContent';
const DialogTitle = ({ size: sizeProp, className, ...props }) => {
    const { size: contextSize } = React.useContext(DialogContentContext);
    let size;
    if (contextSize) {
        size = {
            '1': '3',
            '2': '5',
            '3': '5',
            '4': '6',
        }[contextSize];
    }
    return (React.createElement(radix_ui_1.Dialog.Title, { asChild: true },
        React.createElement(heading_1.Heading, { size: sizeProp || size, trim: "start", className: (0, classnames_1.default)('fui-DialogTitle', className), ...props })));
};
exports.Title = DialogTitle;
DialogTitle.displayName = 'DialogTitle';
const DialogDescription = ({ size: sizeProp, className, ...props }) => {
    const { size: contextSize } = React.useContext(DialogContentContext);
    let size;
    if (contextSize) {
        size = {
            '1': '1',
            '2': '2',
            '3': '2',
            '4': '3',
        }[contextSize];
    }
    return (React.createElement(radix_ui_1.Dialog.Description, { asChild: true },
        React.createElement(text_1.Text, { as: "p", size: sizeProp || size, className: (0, classnames_1.default)('fui-DialogDescription', className), ...props })));
};
exports.Description = DialogDescription;
DialogDescription.displayName = 'DialogDescription';
const DialogClose = (props) => React.createElement(radix_ui_1.Dialog.Close, { ...props, asChild: true });
exports.Close = DialogClose;
DialogClose.displayName = 'DialogClose';
//# sourceMappingURL=dialog.js.map