"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.StackedHorizontalBarChart = void 0;
const tslib_1 = require("tslib");
const classnames_1 = tslib_1.__importDefault(require("classnames"));
const React = tslib_1.__importStar(require("react"));
const tooltip_1 = require("../tooltip");
const StackedHorizontalBarChart = (props) => {
    const { className, data, ...rootProps } = props;
    const sum = data.reduce((acc, dataPoint) => acc + dataPoint.value, 0);
    return (React.createElement("div", { ...rootProps, className: (0, classnames_1.default)('fui-StackedHorizontalBarChart', className) }, data.map((dataPoint, i) => {
        // Round to max 2 decimal places
        const percent = `${Math.round((dataPoint.value / sum) * 100 * 100) / 100}%`;
        const label = typeof dataPoint.label === 'string' ? dataPoint.label : dataPoint.label(dataPoint.value, percent);
        const ariaLabel = typeof dataPoint.label === 'string' ? `${dataPoint.label} ${percent}` : label;
        return (React.createElement(tooltip_1.Tooltip, { content: label, key: i, delayDuration: 150, className: "fui-StackedHorizontalBarChartTooltip", "data-accent-color": dataPoint.color },
            React.createElement("div", { "data-accent-color": dataPoint.color, "aria-label": ariaLabel, className: "fui-StackedHorizontalBarChartBar", style: { width: percent } })));
    })));
};
exports.StackedHorizontalBarChart = StackedHorizontalBarChart;
StackedHorizontalBarChart.displayName = 'StackedHorizontalBarChart';
//# sourceMappingURL=stacked-horizontal-bar-chart.js.map