"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnavailableDates = exports.Disabled = exports.Default = void 0;
const tslib_1 = require("tslib");
const date_1 = require("@internationalized/date");
const i18n_1 = require("@react-aria/i18n");
const react_1 = tslib_1.__importDefault(require("react"));
const __1 = require("..");
// More on how to set up stories at: https://storybook.js.org/docs/react/writing-stories/introduction#default-export
const meta = {
    title: 'Controls/Dates/Calendar',
    component: __1.Calendar,
    args: {
        isDisabled: false,
    },
    parameters: {
        // Optional parameter to center the component in the Canvas. More info: https://storybook.js.org/docs/react/configure/story-layout
        layout: 'centered',
    },
    // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/react/writing-docs/autodocs
    tags: ['autodocs'],
};
exports.default = meta;
// More on writing stories with args: https://storybook.js.org/docs/react/writing-stories/args
exports.Default = {
    args: {},
    render: (args) => (react_1.default.createElement("div", null,
        react_1.default.createElement(__1.Calendar, { ...args, minValue: (0, date_1.parseDate)('1900-02-03'), defaultValue: (0, date_1.parseDate)('2020-02-03'), onChange: (date) => console.log(date.toString()) }))),
};
exports.Disabled = {
    args: {},
    render: (args) => (react_1.default.createElement("div", null,
        react_1.default.createElement(__1.Calendar, { ...args, isDisabled: true, defaultValue: (0, date_1.parseDate)('2020-02-03'), onChange: (date) => console.log(date.toString()) }))),
};
exports.UnavailableDates = {
    name: 'Unavailable Dates',
    args: {},
    render: (args) => {
        const now = (0, date_1.today)((0, date_1.getLocalTimeZone)());
        const disabledRanges = [
            [now, now.add({ days: 5 })],
            [now.add({ days: 14 }), now.add({ days: 16 })],
            [now.add({ days: 23 }), now.add({ days: 24 })],
        ];
        const { locale } = (0, i18n_1.useLocale)();
        const isDateUnavailable = (date) => (0, date_1.isWeekend)(date, locale) ||
            disabledRanges.some((interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0);
        return (react_1.default.createElement("div", { style: { width: 300 } },
            react_1.default.createElement(__1.Calendar, { ...args, "aria-label": "Appointment date", minValue: (0, date_1.today)((0, date_1.getLocalTimeZone)()), isDateUnavailable: isDateUnavailable })));
    },
};
//# sourceMappingURL=calendar.stories.js.map