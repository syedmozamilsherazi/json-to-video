"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.DateRangePicker = DateRangePicker;
const tslib_1 = require("tslib");
const datepicker_1 = require("@react-aria/datepicker");
const datepicker_2 = require("@react-stately/datepicker");
const classnames_1 = tslib_1.__importDefault(require("classnames"));
const react_1 = tslib_1.__importStar(require("react"));
const __1 = require("../");
const icons_1 = require("../../icons");
const calendar_1 = require("../calendar");
const date_field_1 = require("../date-field");
const date_picker_props_1 = require("../date-picker/date-picker.props");
const icon_button_1 = require("../icon-button");
function DateRangePicker(props) {
    const { className, ...otherProps } = props;
    const { color = date_picker_props_1.datePickerPropDefs.color.default, size = date_picker_props_1.datePickerPropDefs.size.default, ...datePickerProps } = otherProps;
    datePickerProps.onChange;
    const state = (0, datepicker_2.useDateRangePickerState)({
        ...datePickerProps,
        // shouldCloseOnSelect: false,
    });
    const ref = (0, react_1.useRef)(null);
    const { groupProps, startFieldProps: { onChange: onStartChange, ...startFieldProps }, endFieldProps: { onChange: onEndChange, ...endFieldProps }, buttonProps: { isDisabled: isButtonDisabled, onPress: onButtonClick, ...otherButtonProps }, calendarProps, } = (0, datepicker_1.useDateRangePicker)(props, state, ref);
    return (react_1.default.createElement("div", { ...groupProps, ref: ref, className: (0, classnames_1.default)('fui-DateRangePickerRoot', className) },
        react_1.default.createElement(date_field_1.DateField, { ...startFieldProps, color: color, size: size, 
            // @ts-expect-error TODO: Aria onChange types exclude NULL which is wrong
            onChange: onStartChange }),
        react_1.default.createElement(date_field_1.DateField, { ...endFieldProps, color: color, size: size, 
            // @ts-expect-error TODO: Aria onChange types exclude NULL which is wrong
            onChange: onEndChange }),
        react_1.default.createElement(__1.Popover.Root, { open: state.isOpen, onOpenChange: (open) => state.setOpen(open) },
            react_1.default.createElement(__1.Popover.Trigger, null,
                react_1.default.createElement(icon_button_1.IconButton, { ...otherButtonProps, disabled: isButtonDisabled, 
                    // @ts-expect-error fix mismatching onPress and onClick types
                    onClick: onButtonClick, onKeyDown: (e) => {
                        // Radix and Aria keyboard event handlers are clashing
                        // when pressing space or enter on the button.
                        // Stop propagation to avoid that.
                        if (e.code === 'Space' || e.code === 'Enter') {
                            e.stopPropagation();
                        }
                    }, size: size },
                    react_1.default.createElement(icons_1.CalendarIcon, { size: size }))),
            react_1.default.createElement(__1.Popover.Content, { variant: "translucent", align: "center" },
                react_1.default.createElement(calendar_1.RangeCalendar, { ...calendarProps })))));
}
//# sourceMappingURL=date-range-picker.js.map