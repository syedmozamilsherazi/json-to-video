"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.Slot = exports.Root = exports.Input = void 0;
const tslib_1 = require("tslib");
const primitive_1 = require("@radix-ui/primitive");
const classnames_1 = tslib_1.__importDefault(require("classnames"));
const React = tslib_1.__importStar(require("react"));
const text_field_props_1 = require("./text-field.props");
const TextFieldContext = React.createContext(undefined);
const TextFieldRoot = (props) => {
    const { children, className, size = text_field_props_1.textFieldPropDefs.size.default, variant = text_field_props_1.textFieldPropDefs.variant.default, color = text_field_props_1.textFieldPropDefs.color.default, ...rootProps } = props;
    return (React.createElement("div", { ...rootProps, className: (0, classnames_1.default)('fui-TextFieldRoot', className), onPointerDown: (0, primitive_1.composeEventHandlers)(rootProps.onPointerDown, (event) => {
            const target = event.target;
            if (target.closest('input, button, a'))
                return;
            const input = event.currentTarget.querySelector('.fui-TextFieldInput');
            if (!input)
                return;
            const position = input.compareDocumentPosition(target);
            const targetIsBeforeInput = (position & Node.DOCUMENT_POSITION_PRECEDING) !== 0;
            const cursorPosition = targetIsBeforeInput ? 0 : input.value.length;
            requestAnimationFrame(() => {
                input.setSelectionRange(cursorPosition, cursorPosition);
                input.focus();
            });
        }) },
        React.createElement(TextFieldContext.Provider, { value: { size, variant, color } }, children)));
};
exports.Root = TextFieldRoot;
TextFieldRoot.displayName = 'TextFieldRoot';
const TextFieldSlot = React.forwardRef((props, forwardedRef) => {
    const { className, color = text_field_props_1.textFieldSlotPropDefs.color.default, ...slotProps } = props;
    const context = React.useContext(TextFieldContext);
    return (React.createElement("div", { "data-accent-color": color, ...slotProps, ref: forwardedRef, className: (0, classnames_1.default)('fui-TextFieldSlot', className, `fui-r-size-${context === null || context === void 0 ? void 0 : context.size}`) }));
});
exports.Slot = TextFieldSlot;
TextFieldSlot.displayName = 'TextFieldSlot';
const TextFieldInput = React.forwardRef((props, forwardedRef) => {
    var _a, _b, _c;
    const context = React.useContext(TextFieldContext);
    const hasRoot = context !== undefined;
    const { className, size = (_a = context === null || context === void 0 ? void 0 : context.size) !== null && _a !== void 0 ? _a : text_field_props_1.textFieldPropDefs.size.default, variant = (_b = context === null || context === void 0 ? void 0 : context.variant) !== null && _b !== void 0 ? _b : text_field_props_1.textFieldPropDefs.variant.default, color = (_c = context === null || context === void 0 ? void 0 : context.color) !== null && _c !== void 0 ? _c : text_field_props_1.textFieldPropDefs.color.default, ...inputProps } = props;
    const input = (React.createElement(React.Fragment, null,
        React.createElement("input", { "data-accent-color": color, spellCheck: "false", ...inputProps, ref: forwardedRef, className: (0, classnames_1.default)('fui-TextFieldInput', className, `fui-r-size-${size}`, `fui-variant-${variant}`) }),
        React.createElement("div", { "data-accent-color": color, className: "fui-TextFieldChrome" })));
    return hasRoot ? (input) : (React.createElement(TextFieldRoot, { size: size, variant: variant, color: color }, input));
});
exports.Input = TextFieldInput;
TextFieldInput.displayName = 'TextFieldInput';
//# sourceMappingURL=text-field.js.map