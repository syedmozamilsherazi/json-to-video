"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Loading = exports.WithIcons = exports.HighContrast = exports.SemanticColor = exports.Color = exports.Variant = exports.Size = exports.Default = void 0;
const tslib_1 = require("tslib");
const icons_1 = require("@frosted-ui/icons");
const react_1 = tslib_1.__importDefault(require("react"));
const __1 = require("..");
const ExampleIcon = () => (react_1.default.createElement("svg", { width: "16", height: "16", viewBox: "0 0 15 15", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    react_1.default.createElement("path", { d: "M3 2.5C3 2.22386 3.22386 2 3.5 2H11.5C11.7761 2 12 2.22386 12 2.5V13.5C12 13.6818 11.9014 13.8492 11.7424 13.9373C11.5834 14.0254 11.3891 14.0203 11.235 13.924L7.5 11.5896L3.765 13.924C3.61087 14.0203 3.41659 14.0254 3.25762 13.9373C3.09864 13.8492 3 13.6818 3 13.5V2.5ZM4 3V12.5979L6.97 10.7416C7.29427 10.539 7.70573 10.539 8.03 10.7416L11 12.5979V3H4Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" })));
// More on how to set up stories at: https://storybook.js.org/docs/react/writing-stories/introduction#default-export
const meta = {
    title: 'Controls/Button',
    component: __1.Button,
    args: {
        disabled: false,
    },
    parameters: {
        // Optional parameter to center the component in the Canvas. More info: https://storybook.js.org/docs/react/configure/story-layout
        layout: 'centered',
    },
    // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/react/writing-docs/autodocs
    tags: ['autodocs'],
};
exports.default = meta;
// More on writing stories with args: https://storybook.js.org/docs/react/writing-stories/args
exports.Default = {
    args: {
        children: 'Button',
        size: __1.buttonPropDefs.size.default,
        variant: __1.buttonPropDefs.variant.default,
        color: __1.buttonPropDefs.color.default,
    },
};
exports.Size = {
    args: {
        children: 'Button',
        size: __1.buttonPropDefs.size.default,
        variant: __1.buttonPropDefs.variant.default,
        color: __1.buttonPropDefs.color.default,
    },
    render: (args) => (react_1.default.createElement("div", { style: { display: 'flex', alignItems: 'center', gap: 'var(--space-2)' } },
        react_1.default.createElement(__1.Button, { ...args, size: "4" }),
        react_1.default.createElement(__1.Button, { ...args, size: "3" }),
        react_1.default.createElement(__1.Button, { ...args, size: "2" }),
        react_1.default.createElement(__1.Button, { ...args, size: "1" }))),
};
exports.Variant = {
    args: {
        children: 'Button',
        size: __1.buttonPropDefs.size.default,
        color: __1.buttonPropDefs.color.default,
    },
    render: (args) => (react_1.default.createElement("div", { style: { display: 'flex', alignItems: 'center', gap: 'var(--space-4)' } },
        react_1.default.createElement(__1.Button, { ...args, variant: "classic" }),
        react_1.default.createElement(__1.Button, { ...args, variant: "solid" }),
        react_1.default.createElement(__1.Button, { ...args, variant: "soft" }),
        react_1.default.createElement(__1.Button, { ...args, variant: "surface" }),
        react_1.default.createElement(__1.Button, { ...args, variant: "ghost" }))),
};
exports.Color = {
    args: {
        children: 'Button',
        size: __1.buttonPropDefs.size.default,
    },
    render: (args) => (react_1.default.createElement("div", { style: { display: 'flex', alignItems: 'center', gap: 'var(--space-2)' } },
        react_1.default.createElement(__1.Button, { ...args, color: "indigo" }),
        react_1.default.createElement(__1.Button, { ...args, color: "cyan" }),
        react_1.default.createElement(__1.Button, { ...args, color: "orange" }),
        react_1.default.createElement(__1.Button, { ...args, color: "crimson" }))),
};
exports.SemanticColor = {
    name: 'Semantic color',
    args: {
        size: __1.buttonPropDefs.size.default,
    },
    render: (args) => (react_1.default.createElement("div", { style: { display: 'flex', alignItems: 'center', gap: 'var(--space-2)' } },
        react_1.default.createElement(__1.Button, { ...args, color: "info" }, "Info"),
        react_1.default.createElement(__1.Button, { ...args, color: "success" }, "Success"),
        react_1.default.createElement(__1.Button, { ...args, color: "warning" }, "Warning"),
        react_1.default.createElement(__1.Button, { ...args, color: "danger" }, "Danger"))),
};
exports.HighContrast = {
    name: 'High Contrast',
    args: {
        children: 'Button',
    },
    render: (args) => (react_1.default.createElement("div", { style: { display: 'flex', flexDirection: 'column', gap: 'var(--space-2)' } },
        react_1.default.createElement("div", { style: { display: 'flex', gap: 'var(--space-2)' } },
            react_1.default.createElement(__1.Button, { ...args, highContrast: false, variant: "classic" }),
            react_1.default.createElement(__1.Button, { ...args, highContrast: false, variant: "solid" }),
            react_1.default.createElement(__1.Button, { ...args, highContrast: false, variant: "soft" }),
            react_1.default.createElement(__1.Button, { ...args, highContrast: false, variant: "surface" }),
            react_1.default.createElement(__1.Button, { ...args, highContrast: false, variant: "ghost" })),
        react_1.default.createElement("div", { style: { display: 'flex', gap: 'var(--space-2)' } },
            react_1.default.createElement(__1.Button, { ...args, variant: "classic", highContrast: true }),
            react_1.default.createElement(__1.Button, { ...args, variant: "solid", highContrast: true }),
            react_1.default.createElement(__1.Button, { ...args, variant: "soft", highContrast: true }),
            react_1.default.createElement(__1.Button, { ...args, variant: "surface", highContrast: true }),
            react_1.default.createElement(__1.Button, { ...args, variant: "ghost", highContrast: true })))),
};
exports.WithIcons = {
    name: 'With Icons',
    args: {
        size: __1.buttonPropDefs.size.default,
    },
    render: (args) => (react_1.default.createElement("div", { style: { display: 'flex', alignItems: 'center', gap: 'var(--space-2)' } },
        react_1.default.createElement(__1.Button, { ...args },
            react_1.default.createElement(ExampleIcon, null),
            " With icon"))),
};
exports.Loading = {
    args: {
        children: 'Button',
        size: __1.buttonPropDefs.size.default,
        color: __1.buttonPropDefs.color.default,
        disabled: undefined,
        loading: true,
    },
    render: (args) => (react_1.default.createElement("div", { style: { display: 'flex', flexDirection: 'column', gap: 'var(--space-5)', maxWidth: 650 } },
        react_1.default.createElement(__1.Text, null,
            "Buttons have their own ",
            react_1.default.createElement(__1.Code, null, "loading"),
            " prop that automatically composes a spinner."),
        react_1.default.createElement("div", { style: { display: 'flex', alignItems: 'center', gap: 'var(--space-4)' } },
            react_1.default.createElement(__1.Button, { ...args, variant: "classic" }),
            react_1.default.createElement(__1.Button, { ...args, variant: "solid" }),
            react_1.default.createElement(__1.Button, { ...args, variant: "soft" }),
            react_1.default.createElement(__1.Button, { ...args, variant: "surface" }),
            react_1.default.createElement(__1.Button, { ...args, variant: "ghost" })),
        react_1.default.createElement(__1.Text, null,
            "If you have an icon inside the button, you can use the button`s ",
            react_1.default.createElement(__1.Code, null, "disabled"),
            " state and wrap the icon in a standalone ",
            react_1.default.createElement(__1.Code, null, `<Spinner>`),
            " to achieve a more sophisticated design."),
        react_1.default.createElement("div", { style: { display: 'flex', alignItems: 'center', gap: 'var(--space-4)' } },
            react_1.default.createElement(__1.Button, { ...args, loading: false, variant: "classic" },
                react_1.default.createElement(__1.Spinner, { loading: false },
                    react_1.default.createElement(icons_1.Download16, null)),
                "Download"),
            react_1.default.createElement(__1.Button, { ...args, loading: false, variant: "classic", disabled: true },
                react_1.default.createElement(__1.Spinner, { loading: true },
                    react_1.default.createElement(icons_1.Download16, null)),
                "Download")),
        react_1.default.createElement("div", { style: { display: 'flex', alignItems: 'center', gap: 'var(--space-4)' } },
            react_1.default.createElement(__1.Button, { ...args, loading: false, variant: "soft" },
                react_1.default.createElement(__1.Spinner, { loading: false },
                    react_1.default.createElement(icons_1.Download16, null)),
                "Download"),
            react_1.default.createElement(__1.Button, { ...args, loading: false, variant: "soft", disabled: true },
                react_1.default.createElement(__1.Spinner, { loading: true },
                    react_1.default.createElement(icons_1.Download16, null)),
                "Download")),
        react_1.default.createElement("div", { style: { display: 'flex', alignItems: 'center', gap: 'var(--space-4)' } },
            react_1.default.createElement(__1.Button, { ...args, loading: false, variant: "solid" },
                react_1.default.createElement(__1.Spinner, { loading: false },
                    react_1.default.createElement(icons_1.Download16, null)),
                "Download"),
            react_1.default.createElement(__1.Button, { ...args, loading: false, variant: "solid", disabled: true },
                react_1.default.createElement(__1.Spinner, { loading: true },
                    react_1.default.createElement(icons_1.Download16, null)),
                "Download")),
        react_1.default.createElement("div", { style: { display: 'flex', alignItems: 'center', gap: 'var(--space-4)' } },
            react_1.default.createElement(__1.Button, { ...args, loading: false, variant: "surface" },
                react_1.default.createElement(__1.Spinner, { loading: false },
                    react_1.default.createElement(icons_1.Download16, null)),
                "Download"),
            react_1.default.createElement(__1.Button, { ...args, loading: false, variant: "surface", disabled: true },
                react_1.default.createElement(__1.Spinner, { loading: true },
                    react_1.default.createElement(icons_1.Download16, null)),
                "Download")))),
};
//# sourceMappingURL=button.stories.js.map