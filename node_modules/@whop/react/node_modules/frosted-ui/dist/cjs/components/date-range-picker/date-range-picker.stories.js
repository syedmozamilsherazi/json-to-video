"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Custom = exports.Sizes = exports.Default = void 0;
const tslib_1 = require("tslib");
const date_1 = require("@internationalized/date");
const i18n_1 = require("@react-aria/i18n");
const react_1 = tslib_1.__importDefault(require("react"));
const __1 = require("..");
// More on how to set up stories at: https://storybook.js.org/docs/react/writing-stories/introduction#default-export
const meta = {
    title: 'Controls/Dates/DateRangePicker',
    component: __1.DateRangePicker,
    args: {
        size: __1.dateRangePickerPropDefs.size.default,
        color: __1.dateRangePickerPropDefs.color.default,
        defaultValue: {
            start: (0, date_1.parseDate)('2020-02-03'),
            end: (0, date_1.parseDate)('2020-02-08'),
        },
        onChange: (date) => console.log(date ? date.start.toString() + ' - ' + date.end.toString() : date),
        'aria-label': 'Birth date',
        isDisabled: false,
    },
    parameters: {
        // Optional parameter to center the component in the Canvas. More info: https://storybook.js.org/docs/react/configure/story-layout
        layout: 'centered',
    },
    // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/react/writing-docs/autodocs
    tags: ['autodocs'],
};
exports.default = meta;
// More on writing stories with args: https://storybook.js.org/docs/react/writing-stories/args
exports.Default = {
    args: {},
    render: (args) => (react_1.default.createElement("div", { style: { display: 'flex', flexDirection: 'column', gap: 'var(--space-5)' } },
        react_1.default.createElement(__1.DateRangePicker, { ...args }))),
};
exports.Sizes = {
    args: {},
    render: (args) => (react_1.default.createElement("div", { style: { display: 'flex', flexDirection: 'column', gap: 'var(--space-5)' } },
        react_1.default.createElement(__1.DateRangePicker, { ...args, size: "1" }),
        react_1.default.createElement(__1.DateRangePicker, { ...args, size: "2" }),
        react_1.default.createElement(__1.DateRangePicker, { ...args, size: "3" }))),
};
exports.Custom = {
    args: {},
    render: () => {
        const [date, setDate] = react_1.default.useState(null);
        const [calendarDate, setCalendarDate] = react_1.default.useState(date || { start: null, end: null });
        const [focusedDate, setFocusedDate] = react_1.default.useState();
        const formatter = (0, i18n_1.useDateFormatter)({ dateStyle: 'medium' });
        return (react_1.default.createElement("div", { style: { marginTop: -200 } },
            react_1.default.createElement(__1.Popover.Root, { defaultOpen: true, onOpenChange: (open) => {
                    if (!open) {
                        setCalendarDate(date || { start: null, end: null });
                        setFocusedDate(date
                            ? date.start
                            : calendarDate.start
                                ? calendarDate.start
                                : calendarDate.end
                                    ? calendarDate.end
                                    : undefined);
                    }
                } },
                react_1.default.createElement(__1.Popover.Trigger, null,
                    react_1.default.createElement(__1.Button, { size: "3" },
                        react_1.default.createElement(CalendarIcon, null),
                        "Selected date:",
                        ' ',
                        date
                            ? formatter.formatRange(date.start.toDate((0, date_1.getLocalTimeZone)()), date.end.toDate((0, date_1.getLocalTimeZone)()))
                            : '--')),
                react_1.default.createElement(__1.Popover.Content, { variant: "translucent", align: "center", style: { minWidth: 'unset' } },
                    react_1.default.createElement("div", { style: { display: 'flex', flexDirection: 'column', justifyContent: 'center' } },
                        react_1.default.createElement("div", { style: {
                                display: 'flex',
                                marginBottom: 'var(--space-4)',
                                gap: 'var(--space-3)',
                                justifyContent: 'space-between',
                                alignItems: 'center',
                            } },
                            react_1.default.createElement(__1.DateField, { "aria-label": "Start date", value: calendarDate.start, onChange: (date) => {
                                    setCalendarDate((state) => ({
                                        ...state,
                                        start: date || null,
                                    }));
                                    setFocusedDate(date || undefined);
                                } }),
                            react_1.default.createElement(ArrowRightIcon, null),
                            react_1.default.createElement(__1.DateField, { "aria-label": "End date", value: calendarDate.end, onChange: (date) => {
                                    setCalendarDate((state) => ({
                                        ...state,
                                        end: date || null,
                                    }));
                                    setFocusedDate(date || undefined);
                                } })),
                        react_1.default.createElement(__1.RangeCalendar, { value: calendarDate.start && calendarDate.end ? { start: calendarDate.start, end: calendarDate.end } : null, onChange: (value) => {
                                if (value === null) {
                                    setCalendarDate({ start: null, end: null });
                                }
                                else {
                                    setCalendarDate({ start: value.start, end: value.end });
                                }
                            }, focusedValue: focusedDate, onFocusChange: setFocusedDate }),
                        react_1.default.createElement("div", { style: { marginTop: 'var(--space-4)' } },
                            react_1.default.createElement(__1.Inset, { side: "x" },
                                react_1.default.createElement(__1.Separator, { size: "4" }))),
                        react_1.default.createElement("div", { style: {
                                display: 'flex',
                                paddingTop: 'var(--space-4)',
                                gap: 'var(--space-2)',
                                justifyContent: 'space-between',
                            } },
                            react_1.default.createElement(__1.Popover.Close, null,
                                react_1.default.createElement(__1.Button, { style: { flex: 1 } }, "Cancel")),
                            react_1.default.createElement(__1.Popover.Close, null,
                                react_1.default.createElement(__1.Button, { variant: "classic", style: { flex: 1 }, disabled: !calendarDate.start || !calendarDate.end, onClick: () => {
                                        if (calendarDate.start && calendarDate.end) {
                                            if (calendarDate.start.compare(calendarDate.end) <= 0) {
                                                setDate({
                                                    start: calendarDate.start,
                                                    end: calendarDate.end,
                                                });
                                            }
                                            else {
                                                setDate({
                                                    start: calendarDate.end,
                                                    end: calendarDate.start,
                                                });
                                            }
                                        }
                                    } }, "Set"))))))));
    },
};
const ArrowRightIcon = () => (react_1.default.createElement("svg", { width: "12", height: "12", viewBox: "0 0 12 12", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    react_1.default.createElement("path", { d: "M0.75 6H11.25M11.25 6L7 1.75M11.25 6L7 10.25", stroke: "var(--gray-a10)", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" })));
const CalendarIcon = () => (react_1.default.createElement("svg", { width: "16", height: "16", viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
    react_1.default.createElement("g", { clipPath: "url(#clip0_1869_102855)" },
        react_1.default.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M4 0C4.41421 0 4.75 0.335786 4.75 0.75V2H11.25V0.75C11.25 0.335786 11.5858 0 12 0C12.4142 0 12.75 0.335786 12.75 0.75V2.03304C14.5847 2.27749 16 3.84846 16 5.75V12.25C16 14.3211 14.3211 16 12.25 16H3.75C1.67893 16 0 14.3211 0 12.25V5.75C0 3.84846 1.41532 2.27749 3.25 2.03304V0.75C3.25 0.335786 3.58579 0 4 0ZM12 3.5H4H3.75C2.50736 3.5 1.5 4.50736 1.5 5.75V6H14.5V5.75C14.5 4.50736 13.4926 3.5 12.25 3.5H12ZM1.5 7.5V12.25C1.5 13.4926 2.50736 14.5 3.75 14.5H12.25C13.4926 14.5 14.5 13.4926 14.5 12.25V7.5H1.5Z", fill: "var(--gray-10)" })),
    react_1.default.createElement("defs", null,
        react_1.default.createElement("clipPath", { id: "clip0_1869_102855" },
            react_1.default.createElement("rect", { width: "16", height: "16", fill: "var(--gray-10)" })))));
//# sourceMappingURL=date-range-picker.stories.js.map