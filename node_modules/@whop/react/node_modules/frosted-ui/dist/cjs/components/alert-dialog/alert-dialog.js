"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.Trigger = exports.Title = exports.Root = exports.Description = exports.Content = exports.Cancel = exports.Action = void 0;
const tslib_1 = require("tslib");
const classnames_1 = tslib_1.__importDefault(require("classnames"));
const radix_ui_1 = require("radix-ui");
const React = tslib_1.__importStar(require("react"));
const theme_1 = require("../../theme");
const heading_1 = require("../heading");
const text_1 = require("../text");
const alert_dialog_props_1 = require("./alert-dialog.props");
const AlertDialogRoot = (props) => React.createElement(radix_ui_1.AlertDialog.Root, { ...props });
exports.Root = AlertDialogRoot;
AlertDialogRoot.displayName = 'AlertDialogRoot';
const AlertDialogTrigger = (props) => React.createElement(radix_ui_1.AlertDialog.Trigger, { ...props, asChild: true });
exports.Trigger = AlertDialogTrigger;
AlertDialogTrigger.displayName = 'AlertDialogTrigger';
const AlertDialogContentContext = React.createContext({
    size: alert_dialog_props_1.alertDialogContentPropDefs.size.default,
});
const AlertDialogContent = (props) => {
    const { className, children, forceMount, container, size = alert_dialog_props_1.alertDialogContentPropDefs.size.default, ...contentProps } = props;
    return (React.createElement(radix_ui_1.AlertDialog.Portal, { container: container, forceMount: forceMount },
        React.createElement(theme_1.Theme, { asChild: true },
            React.createElement(radix_ui_1.AlertDialog.Overlay, { className: "fui-DialogOverlay fui-AlertDialogOverlay" },
                React.createElement(radix_ui_1.AlertDialog.Content, { ...contentProps, className: (0, classnames_1.default)('fui-DialogContent', 'fui-AlertDialogContent', className, `fui-r-size-${size}`) },
                    React.createElement(AlertDialogContentContext.Provider, { value: React.useMemo(() => ({ size }), [size]) }, children))))));
};
exports.Content = AlertDialogContent;
AlertDialogContent.displayName = 'AlertDialogContent';
const AlertDialogTitle = ({ size: sizeProp, className, ...props }) => {
    const { size: contextSize } = React.useContext(AlertDialogContentContext);
    let size;
    if (contextSize) {
        size = {
            '1': '3',
            '2': '5',
            '3': '5',
            '4': '6',
        }[contextSize];
    }
    return (React.createElement(radix_ui_1.AlertDialog.Title, { asChild: true },
        React.createElement(heading_1.Heading, { size: sizeProp || size, trim: "start", className: (0, classnames_1.default)('fui-DialogTitle', className), ...props })));
};
exports.Title = AlertDialogTitle;
AlertDialogTitle.displayName = 'AlertDialogTitle';
const AlertDialogDescription = ({ size: sizeProp, className, ...props }) => {
    const { size: contextSize } = React.useContext(AlertDialogContentContext);
    let size;
    if (contextSize) {
        size = {
            '1': '1',
            '2': '2',
            '3': '2',
            '4': '3',
        }[contextSize];
    }
    return (React.createElement(radix_ui_1.AlertDialog.Description, { asChild: true },
        React.createElement(text_1.Text, { as: "p", size: sizeProp || size, className: (0, classnames_1.default)('fui-DialogDescription', className), ...props })));
};
exports.Description = AlertDialogDescription;
AlertDialogDescription.displayName = 'AlertDialogDescription';
const AlertDialogAction = (props) => React.createElement(radix_ui_1.AlertDialog.Action, { ...props, asChild: true });
exports.Action = AlertDialogAction;
AlertDialogAction.displayName = 'AlertDialogAction';
const AlertDialogCancel = (props) => React.createElement(radix_ui_1.AlertDialog.Cancel, { ...props, asChild: true });
exports.Cancel = AlertDialogCancel;
AlertDialogCancel.displayName = 'AlertDialogCancel';
//# sourceMappingURL=alert-dialog.js.map