"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.Trigger = exports.Separator = exports.Root = exports.Label = exports.Item = exports.Group = exports.Content = void 0;
const tslib_1 = require("tslib");
const classnames_1 = tslib_1.__importDefault(require("classnames"));
const radix_ui_1 = require("radix-ui");
const React = tslib_1.__importStar(require("react"));
const icons_1 = require("../../icons");
const theme_1 = require("../../theme");
const select_props_1 = require("./select.props");
const SelectContext = React.createContext({});
const SelectRoot = (props) => {
    const { children, size = select_props_1.selectRootPropDefs.size.default, ...rootProps } = props;
    return (React.createElement(radix_ui_1.Select.Root, { ...rootProps },
        React.createElement(SelectContext.Provider, { value: React.useMemo(() => ({ size }), [size]) }, children)));
};
exports.Root = SelectRoot;
SelectRoot.displayName = 'SelectRoot';
const SelectTrigger = (props) => {
    const { className, variant = select_props_1.selectTriggerPropDefs.variant.default, color = select_props_1.selectTriggerPropDefs.color.default, placeholder, ...triggerProps } = props;
    const { size } = React.useContext(SelectContext);
    return (React.createElement(radix_ui_1.Select.Trigger, { asChild: true },
        React.createElement("button", { "data-accent-color": color, ...triggerProps, className: (0, classnames_1.default)('fui-reset', 'fui-SelectTrigger', className, `fui-r-size-${size}`, `fui-variant-${variant}`) },
            React.createElement("span", { className: "fui-SelectTriggerInner" },
                React.createElement(radix_ui_1.Select.Value, { placeholder: placeholder })),
            React.createElement(radix_ui_1.Select.Icon, { asChild: true },
                React.createElement("svg", { className: "fui-SelectIcon", xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "3.25 5.25 9.5 5.5", fill: "none" },
                    React.createElement("path", { d: "M4 6L8 10L12 6", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }))))));
};
exports.Trigger = SelectTrigger;
SelectTrigger.displayName = 'SelectTrigger';
const SelectContent = (props) => {
    const { className, children, highContrast = select_props_1.selectContentPropDefs.highContrast.default, container, ...contentProps } = props;
    const { size } = React.useContext(SelectContext);
    return (React.createElement(radix_ui_1.Select.Portal, { container: container },
        React.createElement(theme_1.Theme, { asChild: true },
            React.createElement(radix_ui_1.Select.Content, { sideOffset: 4, ...contentProps, className: (0, classnames_1.default)({ 'fui-PopperContent': contentProps.position === 'popper' }, 'fui-SelectContent', className, `fui-r-size-${size}`, { 'fui-high-contrast': highContrast }) },
                React.createElement(radix_ui_1.ScrollArea.Root, { type: "auto", className: "fui-ScrollAreaRoot" },
                    React.createElement(radix_ui_1.Select.Viewport, { asChild: true, className: "fui-SelectViewport" },
                        React.createElement(radix_ui_1.ScrollArea.Viewport, { className: "fui-ScrollAreaViewport", style: { overflowY: undefined } }, children)),
                    React.createElement(radix_ui_1.ScrollArea.Scrollbar, { className: "fui-ScrollAreaScrollbar fui-r-size-1", orientation: "vertical" },
                        React.createElement(radix_ui_1.ScrollArea.Thumb, { className: "fui-ScrollAreaThumb" })))))));
};
exports.Content = SelectContent;
SelectContent.displayName = 'SelectContent';
const SelectItem = (props) => {
    const { className, children, ...itemProps } = props;
    return (React.createElement(radix_ui_1.Select.Item, { ...itemProps, className: (0, classnames_1.default)('fui-SelectItem', className) },
        React.createElement(radix_ui_1.Select.ItemIndicator, { className: "fui-SelectItemIndicator" },
            React.createElement(icons_1.ThickCheckIcon, { className: "fui-SelectItemIndicatorIcon" })),
        React.createElement(radix_ui_1.Select.ItemText, null, children)));
};
exports.Item = SelectItem;
SelectItem.displayName = 'SelectItem';
const SelectGroup = (props) => (React.createElement(radix_ui_1.Select.Group, { ...props, className: (0, classnames_1.default)('fui-SelectGroup', props.className) }));
exports.Group = SelectGroup;
SelectGroup.displayName = 'SelectGroup';
const SelectLabel = (props) => (React.createElement(radix_ui_1.Select.Label, { ...props, className: (0, classnames_1.default)('fui-SelectLabel', props.className) }));
exports.Label = SelectLabel;
SelectLabel.displayName = 'SelectLabel';
const SelectSeparator = (props) => (React.createElement(radix_ui_1.Select.Separator, { ...props, className: (0, classnames_1.default)('fui-SelectSeparator', props.className) }));
exports.Separator = SelectSeparator;
SelectSeparator.displayName = 'SelectSeparator';
//# sourceMappingURL=select.js.map