"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Table = exports.RowHeaderCell = exports.Row = exports.Root = exports.Header = exports.Footer = exports.ColumnHeaderCellButton = exports.ColumnHeaderCell = exports.Cell = exports.BottomBar = exports.Body = void 0;
const tslib_1 = require("tslib");
const classnames_1 = tslib_1.__importDefault(require("classnames"));
const React = tslib_1.__importStar(require("react"));
const button_1 = require("../button");
const table_props_1 = require("./table.props");
const TableRoot = (props) => {
    const { className, children, size = table_props_1.tableRootPropDefs.size.default, variant = table_props_1.tableRootPropDefs.variant.default, ...rootProps } = props;
    return (React.createElement("div", { ...rootProps, className: (0, classnames_1.default)('fui-TableRoot', 
        // This class name applies size related variables to a table.
        // This class name will allow us to implement things like
        // column cells Drag and Drop with DragOverlay. (dnd-kit)
        'fui-TableRoot-vars', className, `fui-variant-${variant}`, `fui-r-size-${size}`) }, children));
};
exports.Root = TableRoot;
TableRoot.displayName = 'TableRoot';
const TableTable = (props) => {
    const { className, ...otherProps } = props;
    return React.createElement("table", { ...otherProps, className: (0, classnames_1.default)('fui-TableTable', className) });
};
exports.Table = TableTable;
TableTable.displayName = 'TableTable';
const TableHeader = (props) => (React.createElement("thead", { ...props, className: (0, classnames_1.default)('fui-TableHeader', props.className) }));
exports.Header = TableHeader;
TableHeader.displayName = 'TableHeader';
const TableBody = (props) => (React.createElement("tbody", { ...props, className: (0, classnames_1.default)('fui-TableBody', props.className) }));
exports.Body = TableBody;
TableBody.displayName = 'TableBody';
const TableFooter = (props) => (React.createElement("tfoot", { ...props, className: (0, classnames_1.default)('fui-TableFooter', props.className) }));
exports.Footer = TableFooter;
TableFooter.displayName = 'TableFooter';
const alignMap = {
    baseline: 'baseline',
    start: 'top',
    center: 'middle',
    end: 'bottom',
};
const TableRow = (props) => {
    const { className, align = table_props_1.tableRowPropDefs.align.default, ...rowProps } = props;
    return (React.createElement("tr", { ...rowProps, className: (0, classnames_1.default)('fui-TableRow', className, align ? `fui-r-va-${alignMap[align]}` : undefined) }));
};
exports.Row = TableRow;
TableRow.displayName = 'TableRow';
const justifyMap = {
    start: 'left',
    center: 'center',
    end: 'right',
};
const TableCellImpl = (props) => {
    const { tag: Tag = 'td', className, style, justify = table_props_1.tableCellPropDefs.justify.default, width = table_props_1.tableCellPropDefs.width.default, ...cellProps } = props;
    return (React.createElement(Tag, { ...cellProps, className: (0, classnames_1.default)('fui-TableCell', className, justify ? `fui-r-ta-${justifyMap[justify]}` : undefined), style: { width, ...style } }));
};
TableCellImpl.displayName = 'TableCellImpl';
const TableCell = (props) => React.createElement(TableCellImpl, { ...props, tag: "td" });
exports.Cell = TableCell;
TableCell.displayName = 'TableCell';
const TableColumnHeaderCell = (props) => (React.createElement(TableCellImpl, { scope: "col", ...props, tag: "th", className: (0, classnames_1.default)('fui-TableColumnHeaderCell', props.className) }));
exports.ColumnHeaderCell = TableColumnHeaderCell;
TableColumnHeaderCell.displayName = 'TableColumnHeaderCell';
const TableRowHeaderCell = (props) => (React.createElement(TableCellImpl, { scope: "row", ...props, tag: "th", className: (0, classnames_1.default)('fui-TableRowHeaderCell', props.className) }));
exports.RowHeaderCell = TableRowHeaderCell;
TableRowHeaderCell.displayName = 'TableRowHeaderCell';
const TableBottomBar = (props) => (React.createElement("div", { ...props, className: (0, classnames_1.default)('fui-TableBottomBar', props.className) }));
exports.BottomBar = TableBottomBar;
TableBottomBar.displayName = 'TableBottomBar';
const TableColumnHeaderCellButton = (props) => {
    const { children, className, sortDirection, isSortable = false, ...buttonProps } = props;
    return (React.createElement(button_1.Button, { variant: "ghost", color: "gray", highContrast: true, ...buttonProps, className: (0, classnames_1.default)('fui-TableColumnHeaderCellButton', {
            'fui-sortable': isSortable,
            'fui-active': sortDirection,
            'fui-asc': sortDirection === 'asc',
            'fui-desc': sortDirection === 'desc',
        }, className) }, children));
};
exports.ColumnHeaderCellButton = TableColumnHeaderCellButton;
TableColumnHeaderCellButton.displayName = 'TableColumnHeaderCellButton';
//# sourceMappingURL=table.js.map