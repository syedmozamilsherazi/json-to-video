"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.Trigger = exports.SubTrigger = exports.SubContent = exports.Sub = exports.Separator = exports.Root = exports.RadioItem = exports.RadioGroup = exports.Label = exports.Item = exports.Group = exports.Content = exports.CheckboxItem = void 0;
const tslib_1 = require("tslib");
const classnames_1 = tslib_1.__importDefault(require("classnames"));
const radix_ui_1 = require("radix-ui");
const React = tslib_1.__importStar(require("react"));
const icons_1 = require("../../icons");
const theme_1 = require("../../theme");
const scroll_area_1 = require("../scroll-area");
const context_menu_props_1 = require("./context-menu.props");
const ContextMenuRoot = (props) => React.createElement(radix_ui_1.ContextMenu.Root, { ...props });
exports.Root = ContextMenuRoot;
ContextMenuRoot.displayName = 'ContextMenuRoot';
const ContextMenuTrigger = (props) => React.createElement(radix_ui_1.ContextMenu.Trigger, { ...props, asChild: true });
exports.Trigger = ContextMenuTrigger;
ContextMenuTrigger.displayName = 'ContextMenuTrigger';
const ContextMenuContentContext = React.createContext({});
const ContextMenuContent = (props) => {
    const themeContext = (0, theme_1.useThemeContext)();
    const { className, children, size = context_menu_props_1.contextMenuContentPropDefs.size.default, color = context_menu_props_1.contextMenuContentPropDefs.color.default, variant = context_menu_props_1.contextMenuContentPropDefs.variant.default, container, forceMount, ...contentProps } = props;
    const resolvedColor = color !== null && color !== void 0 ? color : themeContext.accentColor;
    return (React.createElement(radix_ui_1.ContextMenu.Portal, { container: container, forceMount: forceMount },
        React.createElement(theme_1.Theme, { asChild: true },
            React.createElement(radix_ui_1.ContextMenu.Content, { "data-accent-color": resolvedColor, alignOffset: -Number(size) * 4, collisionPadding: 10, ...contentProps, className: (0, classnames_1.default)('fui-PopperContent', 'fui-BaseMenuContent', 'fui-ContextMenuContent', `fui-variant-${variant}`, className, `fui-r-size-${size}`) },
                React.createElement(scroll_area_1.ScrollArea, { type: "auto" },
                    React.createElement("div", { className: (0, classnames_1.default)('fui-BaseMenuViewport', 'fui-ContextMenuViewport') },
                        React.createElement(ContextMenuContentContext.Provider, { value: React.useMemo(() => ({ size, color: resolvedColor, variant }), [size, resolvedColor, variant]) }, children)))))));
};
exports.Content = ContextMenuContent;
ContextMenuContent.displayName = 'ContextMenuContent';
const ContextMenuLabel = (props) => (React.createElement(radix_ui_1.ContextMenu.Label, { ...props, className: (0, classnames_1.default)('fui-BaseMenuLabel', 'fui-ContextMenuLabel', props.className) }));
exports.Label = ContextMenuLabel;
ContextMenuLabel.displayName = 'ContextMenuLabel';
const ContextMenuItem = (props) => {
    const { className, children, color = context_menu_props_1.contextMenuItemPropDefs.color.default, shortcut, ...itemProps } = props;
    return (React.createElement(radix_ui_1.ContextMenu.Item, { "data-accent-color": color, ...itemProps, className: (0, classnames_1.default)('fui-reset', 'fui-BaseMenuItem', 'fui-ContextMenuItem', className) },
        React.createElement(radix_ui_1.Slot.Slottable, null, children),
        shortcut && React.createElement("div", { className: "fui-BaseMenuShortcut fui-ContextMenuShortcut" }, shortcut)));
};
exports.Item = ContextMenuItem;
ContextMenuItem.displayName = 'ContextMenuItem';
const ContextMenuGroup = (props) => (React.createElement(radix_ui_1.ContextMenu.Group, { ...props, className: (0, classnames_1.default)('fui-BaseMenuGroup', 'fui-ContextMenuGroup', props.className) }));
exports.Group = ContextMenuGroup;
ContextMenuGroup.displayName = 'ContextMenuGroup';
const ContextMenuRadioGroup = (props) => (React.createElement(radix_ui_1.ContextMenu.RadioGroup, { ...props, className: (0, classnames_1.default)('fui-BaseMenuRadioGroup', 'fui-ContextMenuRadioGroup', props.className) }));
exports.RadioGroup = ContextMenuRadioGroup;
ContextMenuRadioGroup.displayName = 'ContextMenuRadioGroup';
const ContextMenuRadioItem = (props) => {
    const { children, className, ...itemProps } = props;
    return (React.createElement(radix_ui_1.ContextMenu.RadioItem, { ...itemProps, className: (0, classnames_1.default)('fui-BaseMenuItem', 'fui-BaseMenuRadioItem', 'fui-ContextMenuItem', 'fui-ContextMenuRadioItem', className) },
        React.createElement(radix_ui_1.Slot.Slottable, null, children),
        React.createElement(radix_ui_1.ContextMenu.ItemIndicator, { className: "fui-BaseMenuItemIndicator fui-ContextMenuItemIndicator" },
            React.createElement(icons_1.ThickCheckIcon, { className: "fui-BaseMenuItemIndicatorIcon fui-ContextMenuItemIndicatorIcon" }))));
};
exports.RadioItem = ContextMenuRadioItem;
ContextMenuRadioItem.displayName = 'ContextMenuRadioItem';
const ContextMenuCheckboxItem = (props) => {
    const { children, className, shortcut, ...itemProps } = props;
    return (React.createElement(radix_ui_1.ContextMenu.CheckboxItem, { ...itemProps, className: (0, classnames_1.default)('fui-BaseMenuItem', 'fui-BaseMenuCheckboxItem', 'fui-ContextMenuItem', 'fui-ContextMenuCheckboxItem', className) },
        React.createElement(radix_ui_1.Slot.Slottable, null, children),
        React.createElement(radix_ui_1.ContextMenu.ItemIndicator, { className: "fui-BaseMenuItemIndicator fui-ContextMenuItemIndicator" },
            React.createElement(icons_1.ThickCheckIcon, { className: "fui-BaseMenuItemIndicatorIcon fui-ContextMenuItemIndicatorIcon" })),
        shortcut && React.createElement("div", { className: "fui-BaseMenuShortcut fui-ContextMenuShortcut" }, shortcut)));
};
exports.CheckboxItem = ContextMenuCheckboxItem;
ContextMenuCheckboxItem.displayName = 'ContextMenuCheckboxItem';
const ContextMenuSub = (props) => React.createElement(radix_ui_1.ContextMenu.Sub, { ...props });
exports.Sub = ContextMenuSub;
ContextMenuSub.displayName = 'ContextMenuSub';
const ContextMenuSubTrigger = (props) => {
    const { className, children, ...subTriggerProps } = props;
    return (React.createElement(radix_ui_1.ContextMenu.SubTrigger, { ...subTriggerProps, className: (0, classnames_1.default)('fui-BaseMenuItem', 'fui-BaseMenuSubTrigger', 'fui-ContextMenuItem', 'fui-ContextMenuSubTrigger', className) },
        React.createElement(radix_ui_1.Slot.Slottable, null, children),
        React.createElement(icons_1.ThickChevronRightIcon, { className: "fui-BaseMenuSubTriggerIcon fui-ContextMenuSubTriggerIcon" })));
};
exports.SubTrigger = ContextMenuSubTrigger;
ContextMenuSubTrigger.displayName = 'ContextMenuSubTrigger';
const ContextMenuSubContent = (props) => {
    const { className, children, container, forceMount, ...contentProps } = props;
    const { size, color, variant } = React.useContext(ContextMenuContentContext);
    return (React.createElement(radix_ui_1.ContextMenu.Portal, { container: container, forceMount: forceMount },
        React.createElement(theme_1.Theme, { asChild: true },
            React.createElement(radix_ui_1.ContextMenu.SubContent, { "data-accent-color": color, alignOffset: -Number(size) * 4, collisionPadding: 10, ...contentProps, className: (0, classnames_1.default)('fui-PopperContent', 'fui-BaseMenuContent', 'fui-BaseMenuSubContent', 'fui-ContextMenuContent', 'fui-ContextMenuSubContent', `fui-variant-${variant}`, className, `fui-r-size-${size}`) },
                React.createElement(scroll_area_1.ScrollArea, { type: "auto" },
                    React.createElement("div", { className: (0, classnames_1.default)('fui-BaseMenuViewport', 'fui-ContextMenuViewport') }, children))))));
};
exports.SubContent = ContextMenuSubContent;
ContextMenuSubContent.displayName = 'ContextMenuSubContent';
const ContextMenuSeparator = (props) => (React.createElement(radix_ui_1.ContextMenu.Separator, { ...props, className: (0, classnames_1.default)('fui-BaseMenuSeparator', 'fui-ContextMenuSeparator', props.className) }));
exports.Separator = ContextMenuSeparator;
ContextMenuSeparator.displayName = 'ContextMenuSeparator';
//# sourceMappingURL=context-menu.js.map