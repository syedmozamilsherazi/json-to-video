declare const colorsWithSemanticColors: ("ruby" | "tomato" | "red" | "crimson" | "pink" | "plum" | "purple" | "violet" | "iris" | "cyan" | "teal" | "jade" | "green" | "grass" | "brown" | "blue" | "orange" | "indigo" | "sky" | "mint" | "yellow" | "amber" | "lime" | "lemon" | "magenta" | "gold" | "bronze" | "gray" | "danger" | "warning" | "success" | "info")[];
declare const colorProp: {
    type: "enum";
    values: ("ruby" | "tomato" | "red" | "crimson" | "pink" | "plum" | "purple" | "violet" | "iris" | "cyan" | "teal" | "jade" | "green" | "grass" | "brown" | "blue" | "orange" | "indigo" | "sky" | "mint" | "yellow" | "amber" | "lime" | "lemon" | "magenta" | "gold" | "bronze" | "gray" | "danger" | "warning" | "success" | "info")[];
    default: (typeof colorsWithSemanticColors)[number] | undefined;
};
type PropsWithoutRefOrColor<T extends React.ElementType> = Omit<React.ComponentPropsWithRef<T>, 'color'>;
type PropsWithoutColor<T extends React.ElementType> = Omit<React.ComponentProps<T>, 'color'>;
export { colorProp };
export type { PropsWithoutRefOrColor, PropsWithoutColor };
