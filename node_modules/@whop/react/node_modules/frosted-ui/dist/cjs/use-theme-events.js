"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.WithThemeEvents = void 0;
exports.useThemeEvents = useThemeEvents;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importStar(require("react"));
const theme_1 = require("./theme");
const theme_options_1 = require("./theme-options");
function validateThemeColor(key, value) {
    const validValues = theme_options_1.themePropDefs[key].values;
    return validValues.includes(value);
}
function validateThemeOptions(detail) {
    if (typeof detail !== 'object' || !detail)
        return {};
    const ret = {};
    const keysToCheck = [
        'accentColor',
        'appearance',
        'dangerColor',
        'grayColor',
        'infoColor',
        'successColor',
        'warningColor',
    ];
    for (const key of keysToCheck) {
        if (!(key in detail))
            continue;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        if (!validateThemeColor(key, detail[key])) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            console.warn(`Invalid value for ${key}: ${detail[key]}`);
            continue;
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        ret[key] = detail[key];
    }
    return ret;
}
function useThemeEvents() {
    const { accentColor, appearance, dangerColor, grayColor, infoColor, successColor, warningColor, onAccentColorChange, onAppearanceChange, onDangerColorChange, onGrayColorChange, onInfoColorChange, onSuccessColorChange, onWarningColorChange, } = (0, theme_1.useThemeContext)();
    // Emit an event when the component is mounted.
    // Listen for theme changes from the outside.
    (0, react_1.useEffect)(() => {
        const listener = (e) => {
            if (e instanceof CustomEvent) {
                const d = validateThemeOptions(e.detail);
                if (d.appearance)
                    onAppearanceChange(d.appearance);
                if (d.accentColor)
                    onAccentColorChange(d.accentColor);
                if (d.grayColor)
                    onGrayColorChange(d.grayColor);
                if (d.infoColor)
                    onInfoColorChange(d.infoColor);
                if (d.successColor)
                    onSuccessColorChange(d.successColor);
                if (d.warningColor)
                    onWarningColorChange(d.warningColor);
                if (d.dangerColor)
                    onDangerColorChange(d.dangerColor);
            }
        };
        document.documentElement.addEventListener('frosted-ui:set-theme', listener);
        // Let external code know that the component is mounted.
        const event = new CustomEvent('frosted-ui:mounted');
        document.documentElement.dispatchEvent(event);
        return () => {
            document.documentElement.removeEventListener('frosted-ui:set-theme', listener);
            const event = new CustomEvent('frosted-ui:unmounted');
            document.documentElement.dispatchEvent(event);
        };
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    // Emit an event when the theme is changed.
    react_1.default.useEffect(() => {
        const event = new CustomEvent('frosted-ui:on-theme-change', {
            detail: {
                appearance,
                accentColor,
                grayColor,
                infoColor,
                successColor,
                warningColor,
                dangerColor,
            },
        });
        document.documentElement.dispatchEvent(event);
    }, [appearance, accentColor, grayColor, infoColor, successColor, warningColor, dangerColor]);
}
const WithThemeEvents = () => {
    useThemeEvents();
    return null;
};
exports.WithThemeEvents = WithThemeEvents;
//# sourceMappingURL=use-theme-events.js.map