import { REGEXP_ONLY_DIGITS_AND_CHARS } from 'input-otp';
import React from 'react';
import { OTPField, Text } from '..';
// More on how to set up stories at: https://storybook.js.org/docs/react/writing-stories/introduction#default-export
const meta = {
    title: 'Controls/OTPField',
    component: OTPField.Root,
    args: {},
    parameters: {
        // Optional parameter to center the component in the Canvas. More info: https://storybook.js.org/docs/react/configure/story-layout
        layout: 'centered',
    },
    // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/react/writing-docs/autodocs
    tags: ['autodocs'],
};
export default meta;
// More on writing stories with args: https://storybook.js.org/docs/react/writing-stories/args
export const Default = {
    render: (args) => {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const { children, ...otherArgs } = args;
        return (React.createElement("div", null,
            React.createElement(OTPField.Root, { ...otherArgs, maxLength: 6, render: ({ slots }) => (React.createElement(React.Fragment, null,
                    React.createElement(OTPField.Group, null,
                        slots.slice(0, 3).map((slot, index) => (React.createElement(OTPField.Slot, { key: index, ...slot }))),
                        ' '),
                    React.createElement(OTPField.Separator, null),
                    React.createElement(OTPField.Group, null, slots.slice(3).map((slot, index) => (React.createElement(OTPField.Slot, { key: index, ...slot })))))) })));
    },
};
export const Pattern = {
    render: (args) => {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const { children, ...otherArgs } = args;
        return (React.createElement("div", null,
            React.createElement(OTPField.Root, { ...otherArgs, maxLength: 6, pattern: REGEXP_ONLY_DIGITS_AND_CHARS, render: ({ slots }) => (React.createElement(OTPField.Group, null,
                    slots.map((slot, index) => (React.createElement(OTPField.Slot, { key: index, ...slot }))),
                    ' ')) })));
    },
};
export const Separator = {
    render: (args) => {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const { children, ...otherArgs } = args;
        return (React.createElement("div", null,
            React.createElement(OTPField.Root, { ...otherArgs, maxLength: 6, render: ({ slots }) => (React.createElement(OTPField.Group, { style: { gap: 4 } },
                    slots.map((slot, index) => (React.createElement(React.Fragment, { key: index },
                        React.createElement(OTPField.Slot, { style: { borderRadius: 10 }, ...slot }),
                        index !== slots.length - 1 && React.createElement(OTPField.Separator, null)))),
                    ' ')) })));
    },
};
export const Controlled = {
    render: (args) => {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const { children, ...otherArgs } = args;
        const [value, setValue] = React.useState('');
        return (React.createElement("div", null,
            React.createElement("div", { style: { marginBottom: 16 } },
                React.createElement(OTPField.Root, { ...otherArgs, maxLength: 6, value: value, onChange: (value) => setValue(value), render: ({ slots }) => (React.createElement(OTPField.Group, null,
                        slots.map((slot, index) => (React.createElement(OTPField.Slot, { key: index, ...slot }))),
                        ' ')) })),
            React.createElement(Text, { align: "center", color: "gray", size: "2", as: "div" }, value === '' ? React.createElement(React.Fragment, null, "Enter your one-time password.") : React.createElement(React.Fragment, null,
                "You entered: ",
                value))));
    },
};
//# sourceMappingURL=otp-field.stories.js.map