'use client';
import classNames from 'classnames';
import { ContextMenu as ContextMenuPrimitive, Slot } from 'radix-ui';
import * as React from 'react';
import { ThickCheckIcon, ThickChevronRightIcon } from '../../icons';
import { Theme, useThemeContext } from '../../theme';
import { ScrollArea } from '../scroll-area';
import { contextMenuContentPropDefs, contextMenuItemPropDefs, } from './context-menu.props';
const ContextMenuRoot = (props) => React.createElement(ContextMenuPrimitive.Root, { ...props });
ContextMenuRoot.displayName = 'ContextMenuRoot';
const ContextMenuTrigger = (props) => React.createElement(ContextMenuPrimitive.Trigger, { ...props, asChild: true });
ContextMenuTrigger.displayName = 'ContextMenuTrigger';
const ContextMenuContentContext = React.createContext({});
const ContextMenuContent = (props) => {
    const themeContext = useThemeContext();
    const { className, children, size = contextMenuContentPropDefs.size.default, color = contextMenuContentPropDefs.color.default, variant = contextMenuContentPropDefs.variant.default, container, forceMount, ...contentProps } = props;
    const resolvedColor = color !== null && color !== void 0 ? color : themeContext.accentColor;
    return (React.createElement(ContextMenuPrimitive.Portal, { container: container, forceMount: forceMount },
        React.createElement(Theme, { asChild: true },
            React.createElement(ContextMenuPrimitive.Content, { "data-accent-color": resolvedColor, alignOffset: -Number(size) * 4, collisionPadding: 10, ...contentProps, className: classNames('fui-PopperContent', 'fui-BaseMenuContent', 'fui-ContextMenuContent', `fui-variant-${variant}`, className, `fui-r-size-${size}`) },
                React.createElement(ScrollArea, { type: "auto" },
                    React.createElement("div", { className: classNames('fui-BaseMenuViewport', 'fui-ContextMenuViewport') },
                        React.createElement(ContextMenuContentContext.Provider, { value: React.useMemo(() => ({ size, color: resolvedColor, variant }), [size, resolvedColor, variant]) }, children)))))));
};
ContextMenuContent.displayName = 'ContextMenuContent';
const ContextMenuLabel = (props) => (React.createElement(ContextMenuPrimitive.Label, { ...props, className: classNames('fui-BaseMenuLabel', 'fui-ContextMenuLabel', props.className) }));
ContextMenuLabel.displayName = 'ContextMenuLabel';
const ContextMenuItem = (props) => {
    const { className, children, color = contextMenuItemPropDefs.color.default, shortcut, ...itemProps } = props;
    return (React.createElement(ContextMenuPrimitive.Item, { "data-accent-color": color, ...itemProps, className: classNames('fui-reset', 'fui-BaseMenuItem', 'fui-ContextMenuItem', className) },
        React.createElement(Slot.Slottable, null, children),
        shortcut && React.createElement("div", { className: "fui-BaseMenuShortcut fui-ContextMenuShortcut" }, shortcut)));
};
ContextMenuItem.displayName = 'ContextMenuItem';
const ContextMenuGroup = (props) => (React.createElement(ContextMenuPrimitive.Group, { ...props, className: classNames('fui-BaseMenuGroup', 'fui-ContextMenuGroup', props.className) }));
ContextMenuGroup.displayName = 'ContextMenuGroup';
const ContextMenuRadioGroup = (props) => (React.createElement(ContextMenuPrimitive.RadioGroup, { ...props, className: classNames('fui-BaseMenuRadioGroup', 'fui-ContextMenuRadioGroup', props.className) }));
ContextMenuRadioGroup.displayName = 'ContextMenuRadioGroup';
const ContextMenuRadioItem = (props) => {
    const { children, className, ...itemProps } = props;
    return (React.createElement(ContextMenuPrimitive.RadioItem, { ...itemProps, className: classNames('fui-BaseMenuItem', 'fui-BaseMenuRadioItem', 'fui-ContextMenuItem', 'fui-ContextMenuRadioItem', className) },
        React.createElement(Slot.Slottable, null, children),
        React.createElement(ContextMenuPrimitive.ItemIndicator, { className: "fui-BaseMenuItemIndicator fui-ContextMenuItemIndicator" },
            React.createElement(ThickCheckIcon, { className: "fui-BaseMenuItemIndicatorIcon fui-ContextMenuItemIndicatorIcon" }))));
};
ContextMenuRadioItem.displayName = 'ContextMenuRadioItem';
const ContextMenuCheckboxItem = (props) => {
    const { children, className, shortcut, ...itemProps } = props;
    return (React.createElement(ContextMenuPrimitive.CheckboxItem, { ...itemProps, className: classNames('fui-BaseMenuItem', 'fui-BaseMenuCheckboxItem', 'fui-ContextMenuItem', 'fui-ContextMenuCheckboxItem', className) },
        React.createElement(Slot.Slottable, null, children),
        React.createElement(ContextMenuPrimitive.ItemIndicator, { className: "fui-BaseMenuItemIndicator fui-ContextMenuItemIndicator" },
            React.createElement(ThickCheckIcon, { className: "fui-BaseMenuItemIndicatorIcon fui-ContextMenuItemIndicatorIcon" })),
        shortcut && React.createElement("div", { className: "fui-BaseMenuShortcut fui-ContextMenuShortcut" }, shortcut)));
};
ContextMenuCheckboxItem.displayName = 'ContextMenuCheckboxItem';
const ContextMenuSub = (props) => React.createElement(ContextMenuPrimitive.Sub, { ...props });
ContextMenuSub.displayName = 'ContextMenuSub';
const ContextMenuSubTrigger = (props) => {
    const { className, children, ...subTriggerProps } = props;
    return (React.createElement(ContextMenuPrimitive.SubTrigger, { ...subTriggerProps, className: classNames('fui-BaseMenuItem', 'fui-BaseMenuSubTrigger', 'fui-ContextMenuItem', 'fui-ContextMenuSubTrigger', className) },
        React.createElement(Slot.Slottable, null, children),
        React.createElement(ThickChevronRightIcon, { className: "fui-BaseMenuSubTriggerIcon fui-ContextMenuSubTriggerIcon" })));
};
ContextMenuSubTrigger.displayName = 'ContextMenuSubTrigger';
const ContextMenuSubContent = (props) => {
    const { className, children, container, forceMount, ...contentProps } = props;
    const { size, color, variant } = React.useContext(ContextMenuContentContext);
    return (React.createElement(ContextMenuPrimitive.Portal, { container: container, forceMount: forceMount },
        React.createElement(Theme, { asChild: true },
            React.createElement(ContextMenuPrimitive.SubContent, { "data-accent-color": color, alignOffset: -Number(size) * 4, collisionPadding: 10, ...contentProps, className: classNames('fui-PopperContent', 'fui-BaseMenuContent', 'fui-BaseMenuSubContent', 'fui-ContextMenuContent', 'fui-ContextMenuSubContent', `fui-variant-${variant}`, className, `fui-r-size-${size}`) },
                React.createElement(ScrollArea, { type: "auto" },
                    React.createElement("div", { className: classNames('fui-BaseMenuViewport', 'fui-ContextMenuViewport') }, children))))));
};
ContextMenuSubContent.displayName = 'ContextMenuSubContent';
const ContextMenuSeparator = (props) => (React.createElement(ContextMenuPrimitive.Separator, { ...props, className: classNames('fui-BaseMenuSeparator', 'fui-ContextMenuSeparator', props.className) }));
ContextMenuSeparator.displayName = 'ContextMenuSeparator';
export { ContextMenuCheckboxItem as CheckboxItem, ContextMenuContent as Content, ContextMenuGroup as Group, ContextMenuItem as Item, ContextMenuLabel as Label, ContextMenuRadioGroup as RadioGroup, ContextMenuRadioItem as RadioItem, ContextMenuRoot as Root, ContextMenuSeparator as Separator, ContextMenuSub as Sub, ContextMenuSubContent as SubContent, ContextMenuSubTrigger as SubTrigger, ContextMenuTrigger as Trigger, };
//# sourceMappingURL=context-menu.js.map