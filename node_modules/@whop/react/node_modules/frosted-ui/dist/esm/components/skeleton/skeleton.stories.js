import React from 'react';
import { Avatar, Card, Skeleton, Text, skeletonAvatarPropDefs, skeletonRectPropDefs, skeletonTextPropDefs } from '..';
// More on how to set up stories at: https://storybook.js.org/docs/react/writing-stories/introduction#default-export
const meta = {
    title: 'Components/Skeleton',
    component: Skeleton.Avatar,
    args: {
        highContrast: false,
    },
    parameters: {
        // Optional parameter to center the component in the Canvas. More info: https://storybook.js.org/docs/react/configure/story-layout
        layout: 'centered',
    },
    // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/react/writing-docs/autodocs
    tags: ['autodocs'],
};
export default meta;
// More on writing stories with args: https://storybook.js.org/docs/react/writing-stories/args
// Avatar
export const AvatarDefault = {
    name: 'Avatar',
    args: {
        size: skeletonAvatarPropDefs.size.default,
        color: skeletonAvatarPropDefs.color.default,
    },
    render: (args) => React.createElement(Skeleton.Avatar, { ...args }),
};
export const AvatarSizes = {
    name: 'Avatar sizes',
    args: {
        size: skeletonAvatarPropDefs.size.default,
        color: skeletonAvatarPropDefs.color.default,
    },
    render: (args) => (React.createElement("div", { style: { display: 'flex', flexDirection: 'row', gap: 'var(--space-3)' } },
        React.createElement(Skeleton.Avatar, { ...args, size: "1" }),
        React.createElement(Skeleton.Avatar, { ...args, size: "2" }),
        React.createElement(Skeleton.Avatar, { ...args, size: "3" }),
        React.createElement(Skeleton.Avatar, { ...args, size: "4" }),
        React.createElement(Skeleton.Avatar, { ...args, size: "5" }),
        React.createElement(Skeleton.Avatar, { ...args, size: "6" }),
        React.createElement(Skeleton.Avatar, { ...args, size: "7" }),
        React.createElement(Skeleton.Avatar, { ...args, size: "8" }),
        React.createElement(Skeleton.Avatar, { ...args, size: "9" }))),
};
export const AvatarColors = {
    name: 'Avatar colors',
    args: {
        size: skeletonAvatarPropDefs.size.default,
        color: skeletonAvatarPropDefs.color.default,
    },
    render: (args) => (React.createElement("div", { style: { display: 'flex', flexDirection: 'row', gap: 'var(--space-3)' } },
        React.createElement(Skeleton.Avatar, { ...args, color: "indigo" }),
        React.createElement(Skeleton.Avatar, { ...args, color: "cyan" }),
        React.createElement(Skeleton.Avatar, { ...args, color: "orange" }),
        React.createElement(Skeleton.Avatar, { ...args, color: "crimson" }))),
};
export const AvatarHighContrast = {
    name: 'Avatar high contrast',
    args: {
        size: skeletonAvatarPropDefs.size.default,
        color: skeletonAvatarPropDefs.color.default,
    },
    render: (args) => (React.createElement("div", { style: { display: 'flex', flexDirection: 'column', gap: 'var(--space-2)' } },
        React.createElement("div", { style: { display: 'flex', gap: 'var(--space-2)' } },
            React.createElement(Skeleton.Avatar, { ...args, color: "gray", highContrast: false }),
            React.createElement(Skeleton.Avatar, { ...args, color: "indigo", highContrast: false }),
            React.createElement(Skeleton.Avatar, { ...args, color: "cyan", highContrast: false }),
            React.createElement(Skeleton.Avatar, { ...args, color: "orange", highContrast: false }),
            React.createElement(Skeleton.Avatar, { ...args, color: "crimson", highContrast: false })),
        React.createElement("div", { style: { display: 'flex', gap: 'var(--space-2)' } },
            React.createElement(Skeleton.Avatar, { ...args, color: "gray", highContrast: true }),
            React.createElement(Skeleton.Avatar, { ...args, color: "indigo", highContrast: true }),
            React.createElement(Skeleton.Avatar, { ...args, color: "cyan", highContrast: true }),
            React.createElement(Skeleton.Avatar, { ...args, color: "orange", highContrast: true }),
            React.createElement(Skeleton.Avatar, { ...args, color: "crimson", highContrast: true })))),
};
// Text
export const TextDefault = {
    name: 'Text',
    args: {
        size: skeletonTextPropDefs.size.default,
        color: skeletonTextPropDefs.color.default,
    },
    render: (args) => React.createElement(Skeleton.Text, { ...args, style: { width: 400 } }),
};
export const TextSizes = {
    name: 'Text sizes',
    args: {
        size: skeletonTextPropDefs.size.default,
        color: skeletonTextPropDefs.color.default,
    },
    render: (args) => (React.createElement("div", { style: { display: 'flex', flexDirection: 'column', gap: 'var(--space-3)' } },
        React.createElement(Skeleton.Text, { ...args, size: "0", style: { width: 400 } }),
        React.createElement(Skeleton.Text, { ...args, size: "1", style: { width: 400 } }),
        React.createElement(Skeleton.Text, { ...args, size: "2", style: { width: 400 } }),
        React.createElement(Skeleton.Text, { ...args, size: "3", style: { width: 400 } }),
        React.createElement(Skeleton.Text, { ...args, size: "4", style: { width: 400 } }),
        React.createElement(Skeleton.Text, { ...args, size: "5", style: { width: 400 } }),
        React.createElement(Skeleton.Text, { ...args, size: "6", style: { width: 400 } }),
        React.createElement(Skeleton.Text, { ...args, size: "7", style: { width: 400 } }),
        React.createElement(Skeleton.Text, { ...args, size: "8", style: { width: 400 } }),
        React.createElement(Skeleton.Text, { ...args, size: "9", style: { width: 400 } }))),
};
export const TextColors = {
    name: 'Text colors',
    args: {
        size: skeletonTextPropDefs.size.default,
        color: skeletonTextPropDefs.color.default,
    },
    render: (args) => (React.createElement("div", { style: { display: 'flex', flexDirection: 'column', gap: 'var(--space-3)' } },
        React.createElement(Skeleton.Text, { ...args, color: "indigo", style: { width: 400 } }),
        React.createElement(Skeleton.Text, { ...args, color: "cyan", style: { width: 400 } }),
        React.createElement(Skeleton.Text, { ...args, color: "orange", style: { width: 400 } }),
        React.createElement(Skeleton.Text, { ...args, color: "crimson", style: { width: 400 } }))),
};
export const TextHighContrast = {
    name: 'Text high contrast',
    args: {
        size: skeletonTextPropDefs.size.default,
        color: skeletonTextPropDefs.color.default,
    },
    render: (args) => (React.createElement("div", { style: { display: 'flex', flexDirection: 'row', gap: 'var(--space-2)' } },
        React.createElement("div", { style: { display: 'flex', flexDirection: 'column', gap: 'var(--space-2)' } },
            React.createElement(Skeleton.Text, { ...args, color: "gray", highContrast: false, style: { width: 400 } }),
            React.createElement(Skeleton.Text, { ...args, color: "indigo", highContrast: false, style: { width: 400 } }),
            React.createElement(Skeleton.Text, { ...args, color: "cyan", highContrast: false, style: { width: 400 } }),
            React.createElement(Skeleton.Text, { ...args, color: "orange", highContrast: false, style: { width: 400 } }),
            React.createElement(Skeleton.Text, { ...args, color: "crimson", highContrast: false, style: { width: 400 } })),
        React.createElement("div", { style: { display: 'flex', flexDirection: 'column', gap: 'var(--space-2)' } },
            React.createElement(Skeleton.Text, { ...args, color: "gray", highContrast: true, style: { width: 400 } }),
            React.createElement(Skeleton.Text, { ...args, color: "indigo", highContrast: true, style: { width: 400 } }),
            React.createElement(Skeleton.Text, { ...args, color: "cyan", highContrast: true, style: { width: 400 } }),
            React.createElement(Skeleton.Text, { ...args, color: "orange", highContrast: true, style: { width: 400 } }),
            React.createElement(Skeleton.Text, { ...args, color: "crimson", highContrast: true, style: { width: 400 } })))),
};
// Rect
export const RectDefault = {
    name: 'Rect',
    args: {
        color: skeletonRectPropDefs.color.default,
    },
    render: (args) => React.createElement(Skeleton.Rect, { style: { width: 140, height: 140 }, ...args }),
};
export const RectColors = {
    name: 'Rect colors',
    args: {
        color: skeletonRectPropDefs.color.default,
    },
    render: (args) => (React.createElement("div", { style: { display: 'flex', flexDirection: 'row', gap: 'var(--space-3)' } },
        React.createElement(Skeleton.Rect, { style: { width: 140, height: 140 }, ...args, color: "indigo" }),
        React.createElement(Skeleton.Rect, { style: { width: 140, height: 140 }, ...args, color: "cyan" }),
        React.createElement(Skeleton.Rect, { style: { width: 140, height: 140 }, ...args, color: "orange" }),
        React.createElement(Skeleton.Rect, { style: { width: 140, height: 140 }, ...args, color: "crimson" }))),
};
export const RectHighContrast = {
    name: 'Rect high contrast',
    args: {
        color: skeletonRectPropDefs.color.default,
    },
    render: (args) => (React.createElement("div", { style: { display: 'flex', flexDirection: 'column', gap: 'var(--space-2)' } },
        React.createElement("div", { style: { display: 'flex', gap: 'var(--space-2)' } },
            React.createElement(Skeleton.Rect, { style: { width: 140, height: 140 }, ...args, color: "gray", highContrast: false }),
            React.createElement(Skeleton.Rect, { style: { width: 140, height: 140 }, ...args, color: "indigo", highContrast: false }),
            React.createElement(Skeleton.Rect, { style: { width: 140, height: 140 }, ...args, color: "cyan", highContrast: false }),
            React.createElement(Skeleton.Rect, { style: { width: 140, height: 140 }, ...args, color: "orange", highContrast: false }),
            React.createElement(Skeleton.Rect, { style: { width: 140, height: 140 }, ...args, color: "crimson", highContrast: false })),
        React.createElement("div", { style: { display: 'flex', gap: 'var(--space-2)' } },
            React.createElement(Skeleton.Rect, { style: { width: 140, height: 140 }, ...args, color: "gray", highContrast: true }),
            React.createElement(Skeleton.Rect, { style: { width: 140, height: 140 }, ...args, color: "indigo", highContrast: true }),
            React.createElement(Skeleton.Rect, { style: { width: 140, height: 140 }, ...args, color: "cyan", highContrast: true }),
            React.createElement(Skeleton.Rect, { style: { width: 140, height: 140 }, ...args, color: "orange", highContrast: true }),
            React.createElement(Skeleton.Rect, { style: { width: 140, height: 140 }, ...args, color: "crimson", highContrast: true })))),
};
export const Composed = {
    args: {
        color: skeletonTextPropDefs.color.default,
        highContrast: skeletonTextPropDefs.highContrast.default,
    },
    render: (args) => {
        const [show, setShow] = React.useState(false);
        return (React.createElement(Card, { variant: "surface", size: "3", onMouseOver: () => setShow(true), onMouseOut: () => setShow(false), style: { minWidth: 400 } },
            React.createElement("div", { style: {
                    objectFit: 'cover',
                    width: 400,
                    aspectRatio: '2 / 1',
                    borderRadius: 'var(--radius-2)',
                    overflow: 'hidden',
                    display: 'flex',
                } }, show ? (React.createElement("img", { className: "Image", src: "https://images.unsplash.com/photo-1535025183041-0991a977e25b?w=300&dpr=2&q=80", alt: "Landscape photograph by Tobias Tullius", style: {
                    objectFit: 'cover',
                    display: 'inline-block',
                    verticalAlign: 'center',
                    flex: 1,
                } })) : (React.createElement(Skeleton.Rect, { highContrast: args.highContrast, color: args.color, style: {
                    flex: 1,
                } }))),
            React.createElement("div", { style: {
                    display: 'flex',
                    flexDirection: 'row',
                    gap: 'var(--space-4)',
                    alignItems: 'center',
                    marginTop: 'var(--space-4)',
                } },
                show ? (React.createElement(Avatar, { highContrast: args.highContrast, color: args.color, fallback: "AB", size: "6" })) : (React.createElement(Skeleton.Avatar, { ...args, size: "6" })),
                React.createElement("div", { style: { display: 'flex', flexDirection: 'column', gap: 'var(--space-2)' } }, show ? (React.createElement(React.Fragment, null,
                    React.createElement(Text, { highContrast: args.highContrast, size: "6" }, "Artur"),
                    React.createElement(Text, { highContrast: args.highContrast, size: "2" }, "Design Engineer at Whop"),
                    React.createElement(Text, { highContrast: args.highContrast, size: "2" }, "Professional button polisher."))) : (React.createElement(React.Fragment, null,
                    React.createElement(Skeleton.Text, { ...args, size: "6", style: { width: 150 } }),
                    React.createElement(Skeleton.Text, { ...args, size: "2", style: { width: 250 } }),
                    React.createElement(Skeleton.Text, { ...args, size: "2", style: { width: 200 } })))))));
    },
};
export const ComposedColor = {
    name: 'Composed color',
    args: {
        color: 'iris',
        highContrast: skeletonTextPropDefs.highContrast.default,
    },
    render: (args) => {
        const [show, setShow] = React.useState(false);
        return (React.createElement("div", { style: {
                minWidth: 400,
                boxSizing: 'border-box',
                padding: 24,
                background: `var(--${args.color}-a2)`,
                border: `1px solid var(--${args.color}-a6)`,
                borderRadius: 'var(--radius-5)',
            }, onMouseOver: () => setShow(true), onMouseOut: () => setShow(false) },
            React.createElement("div", { style: {
                    objectFit: 'cover',
                    width: 400,
                    aspectRatio: '2 / 1',
                    borderRadius: 'var(--radius-2)',
                    overflow: 'hidden',
                    display: 'flex',
                } }, show ? (React.createElement("img", { className: "Image", src: "https://images.unsplash.com/photo-1535025183041-0991a977e25b?w=300&dpr=2&q=80", alt: "Landscape photograph by Tobias Tullius", style: {
                    objectFit: 'cover',
                    display: 'inline-block',
                    verticalAlign: 'center',
                    flex: 1,
                } })) : (React.createElement(Skeleton.Rect, { highContrast: args.highContrast, color: args.color, style: {
                    flex: 1,
                } }))),
            React.createElement("div", { style: {
                    display: 'flex',
                    flexDirection: 'row',
                    gap: 'var(--space-4)',
                    alignItems: 'center',
                    marginTop: 'var(--space-4)',
                } },
                show ? (React.createElement(Avatar, { highContrast: args.highContrast, color: args.color, fallback: "AB", size: "6" })) : (React.createElement(Skeleton.Avatar, { ...args, size: "6" })),
                React.createElement("div", { style: { display: 'flex', flexDirection: 'column', gap: 'var(--space-2)' } }, show ? (React.createElement(React.Fragment, null,
                    React.createElement(Text, { color: args.color, highContrast: args.highContrast, size: "6" }, "Artur"),
                    React.createElement(Text, { color: args.color, highContrast: args.highContrast, size: "2" }, "Design Engineer at Whop"),
                    React.createElement(Text, { color: args.color, highContrast: args.highContrast, size: "2" }, "Professional button polisher."))) : (React.createElement(React.Fragment, null,
                    React.createElement(Skeleton.Text, { ...args, size: "6", style: { width: 150 } }),
                    React.createElement(Skeleton.Text, { ...args, size: "2", style: { width: 250 } }),
                    React.createElement(Skeleton.Text, { ...args, size: "2", style: { width: 200 } })))))));
    },
};
//# sourceMappingURL=skeleton.stories.js.map