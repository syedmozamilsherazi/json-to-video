import React from 'react';
import { Badge, Button, Checkbox, Dialog, Inset, ScrollArea, Table, Text, TextField, dialogContentPropDefs } from '..';
// More on how to set up stories at: https://storybook.js.org/docs/react/writing-stories/introduction#default-export
const meta = {
    title: 'Components/Dialog',
    component: Dialog.Content,
    args: {
        size: dialogContentPropDefs.size.default,
    },
    parameters: {
        // Optional parameter to center the component in the Canvas. More info: https://storybook.js.org/docs/react/configure/story-layout
        layout: 'centered',
    },
    // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/react/writing-docs/autodocs
    tags: ['autodocs'],
};
export default meta;
// More on writing stories with args: https://storybook.js.org/docs/react/writing-stories/args
export const Default = {
    render: (args) => (React.createElement(Dialog.Root, null,
        React.createElement(Dialog.Trigger, null,
            React.createElement(Button, null, "Edit profile")),
        React.createElement(Dialog.Content, { style: { maxWidth: 450 }, ...args },
            React.createElement(Dialog.Title, null, "Edit profile"),
            React.createElement(Dialog.Description, null, "Make changes to your profile."),
            React.createElement("div", { style: { display: 'flex', flexDirection: 'column', gap: 'var(--space-3)' } },
                React.createElement("label", null,
                    React.createElement(Text, { as: "div", size: "2", style: { marginBottom: 4 }, weight: "bold" }, "Name"),
                    React.createElement(TextField.Input, { defaultValue: "Freja Johnsen", placeholder: "Enter your full name" })),
                React.createElement("label", null,
                    React.createElement(Text, { as: "div", size: "2", style: { marginBottom: 4 }, weight: "bold" }, "Email"),
                    React.createElement(TextField.Input, { defaultValue: "freja@example.com", placeholder: "Enter your email" }))),
            React.createElement("div", { style: { display: 'flex', gap: 'var(--space-3)', marginTop: 'var(--space-4)', justifyContent: 'flex-end' } },
                React.createElement(Dialog.Close, null,
                    React.createElement(Button, { variant: "soft", color: "gray", onClick: () => alert('Cancel') }, "Cancel")),
                React.createElement(Dialog.Close, null,
                    React.createElement(Button, { onClick: () => alert('Save') }, "Save")))))),
};
export const Sizes = {
    render: (args) => (React.createElement("div", { style: { display: 'flex', gap: 'var(--space-4)' } },
        React.createElement(Dialog.Root, null,
            React.createElement(Dialog.Trigger, null,
                React.createElement(Button, null, "Size 1")),
            React.createElement(Dialog.Content, { style: { maxWidth: 350 }, ...args, size: "1" },
                React.createElement(Dialog.Title, null, "Edit profile"),
                React.createElement(Dialog.Description, null, "Make changes to your profile."),
                React.createElement("div", { style: { display: 'flex', gap: 'var(--space-2)', justifyContent: 'flex-end' } },
                    React.createElement(Dialog.Close, null,
                        React.createElement(Button, { size: "1", variant: "soft", color: "gray", onClick: () => alert('Cancel') }, "Cancel")),
                    React.createElement(Dialog.Close, null,
                        React.createElement(Button, { size: "1", onClick: () => alert('Save'), variant: "classic" }, "Save"))))),
        React.createElement(Dialog.Root, null,
            React.createElement(Dialog.Trigger, null,
                React.createElement(Button, null, "Size 2")),
            React.createElement(Dialog.Content, { style: { maxWidth: 350 }, ...args, size: "2" },
                React.createElement(Dialog.Title, null, "Edit profile"),
                React.createElement(Dialog.Description, null, "Make changes to your profile."),
                React.createElement("div", { style: { display: 'flex', gap: 'var(--space-2)', justifyContent: 'flex-end' } },
                    React.createElement(Dialog.Close, null,
                        React.createElement(Button, { size: "2", variant: "soft", color: "gray", onClick: () => alert('Cancel') }, "Cancel")),
                    React.createElement(Dialog.Close, null,
                        React.createElement(Button, { size: "2", onClick: () => alert('Save'), variant: "classic" }, "Save"))))),
        React.createElement(Dialog.Root, null,
            React.createElement(Dialog.Trigger, null,
                React.createElement(Button, null, "Size 3")),
            React.createElement(Dialog.Content, { style: { maxWidth: 350 }, ...args, size: "3" },
                React.createElement(Dialog.Title, null, "Edit profile"),
                React.createElement(Dialog.Description, null, "Make changes to your profile."),
                React.createElement("div", { style: { display: 'flex', gap: 'var(--space-3)', justifyContent: 'flex-end' } },
                    React.createElement(Dialog.Close, null,
                        React.createElement(Button, { size: "2", variant: "soft", color: "gray", onClick: () => alert('Cancel') }, "Cancel")),
                    React.createElement(Dialog.Close, null,
                        React.createElement(Button, { size: "2", onClick: () => alert('Save'), variant: "classic" }, "Save"))))),
        React.createElement(Dialog.Root, null,
            React.createElement(Dialog.Trigger, null,
                React.createElement(Button, null, "Size 4")),
            React.createElement(Dialog.Content, { style: { maxWidth: 350 }, ...args, size: "4" },
                React.createElement(Dialog.Title, null, "Edit profile"),
                React.createElement(Dialog.Description, null, "Make changes to your profile."),
                React.createElement("div", { style: { display: 'flex', gap: 'var(--space-3)', justifyContent: 'flex-end', alignItems: 'center' } },
                    React.createElement(Dialog.Close, null,
                        React.createElement(Button, { size: "3", variant: "soft", color: "gray", onClick: () => alert('Cancel') }, "Cancel")),
                    React.createElement(Dialog.Close, null,
                        React.createElement(Button, { size: "3", onClick: () => alert('Save'), variant: "classic" }, "Save"))))))),
};
export const InsetContent = {
    name: 'With inset content',
    render: (args) => (React.createElement(Dialog.Root, null,
        React.createElement(Dialog.Trigger, null,
            React.createElement(Button, null, "View users")),
        React.createElement(Dialog.Content, { ...args },
            React.createElement(Dialog.Title, null, "Users"),
            React.createElement(Dialog.Description, null, "The following users have access to this project."),
            React.createElement(Inset, { side: "x", style: { marginTop: 20 } },
                React.createElement(Table.Root, { variant: "ghost", size: "1" },
                    React.createElement(ScrollArea, { scrollbars: "horizontal" },
                        React.createElement(Table.Table, null,
                            React.createElement(Table.Header, null,
                                React.createElement(Table.Row, null,
                                    React.createElement(Table.ColumnHeaderCell, null,
                                        React.createElement("div", { style: { display: 'flex', alignItems: 'center', gap: 'var(--space-3)' } },
                                            React.createElement(Checkbox, null),
                                            "Full name")),
                                    React.createElement(Table.ColumnHeaderCell, null, "Email"),
                                    React.createElement(Table.ColumnHeaderCell, null, "Group"))),
                            React.createElement(Table.Body, null,
                                React.createElement(Table.Row, null,
                                    React.createElement(Table.RowHeaderCell, null,
                                        React.createElement("div", { style: { display: 'flex', alignItems: 'center', gap: 'var(--space-3)' } },
                                            React.createElement(Checkbox, null),
                                            "Danilo Sousa")),
                                    React.createElement(Table.Cell, null, "danilo@example.com"),
                                    React.createElement(Table.Cell, null,
                                        React.createElement(Badge, { color: "green" }, "Developer"))),
                                React.createElement(Table.Row, null,
                                    React.createElement(Table.RowHeaderCell, null,
                                        React.createElement("div", { style: { display: 'flex', alignItems: 'center', gap: 'var(--space-3)' } },
                                            React.createElement(Checkbox, null),
                                            "Zahra Ambessa")),
                                    React.createElement(Table.Cell, null, "zahra@example.com"),
                                    React.createElement(Table.Cell, null,
                                        React.createElement(Badge, { color: "amber" }, "Admin"))),
                                React.createElement(Table.Row, null,
                                    React.createElement(Table.RowHeaderCell, null,
                                        React.createElement("div", { style: { display: 'flex', alignItems: 'center', gap: 'var(--space-3)' } },
                                            React.createElement(Checkbox, null),
                                            "Jasper Eriksson")),
                                    React.createElement(Table.Cell, null, "jasper@example.com"),
                                    React.createElement(Table.Cell, null,
                                        React.createElement(Badge, { color: "green" }, "Developer"))))))))))),
};
//# sourceMappingURL=dialog.stories.js.map