import * as React from 'react';
import type { GetPropDefTypes, PropsWithoutColor } from '../../helpers';
import { widgetStackRootPropDefs } from './widget-stack.props';
export declare function useWidgetStack(): {
    nextDisabled: boolean;
    prevDisabled: boolean;
    controls: {
        prev: () => void;
        next: () => void;
        scrollToIndex: (index: number) => void;
    } | null;
    currentWidgetIndex: number;
    widgetsCount: number | undefined;
};
interface WidgetStackRootProps extends GetPropDefTypes<typeof widgetStackRootPropDefs> {
    children: React.ReactNode;
    autoPlay?: number;
}
declare const WidgetStackRoot: React.FC<WidgetStackRootProps>;
interface WidgetStackStackProps extends PropsWithoutColor<'div'> {
    asChild?: boolean;
}
declare const WidgetStackStack: {
    (props: WidgetStackStackProps): React.JSX.Element;
    displayName: string;
};
export declare function useWidgetStackItem(): {
    isFullyVisible: boolean;
};
interface WidgetStackItemProps extends React.ComponentProps<'div'> {
}
declare const WidgetStackItem: {
    (props: WidgetStackItemProps): React.JSX.Element;
    displayName: string;
};
interface WidgetStackNextProps extends Omit<React.ComponentProps<'button'>, 'asChild' | 'disabled' | 'onClick'> {
}
declare const WidgetStackNext: {
    (props: WidgetStackNextProps): React.JSX.Element;
    displayName: string;
};
interface WidgetStackPrevProps extends Omit<React.ComponentProps<'button'>, 'asChild' | 'disabled' | 'onClick'> {
}
declare const WidgetStackPrev: {
    (props: WidgetStackPrevProps): React.JSX.Element;
    displayName: string;
};
export { WidgetStackItem as Item, WidgetStackNext as Next, WidgetStackPrev as Prev, WidgetStackRoot as Root, WidgetStackStack as Stack, };
export type { WidgetStackItemProps as ItemProps, WidgetStackNextProps as NextProps, WidgetStackPrevProps as PrevProps, WidgetStackRootProps as RootProps, WidgetStackStackProps as StackProps, };
