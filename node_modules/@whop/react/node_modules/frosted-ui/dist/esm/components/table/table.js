import classNames from 'classnames';
import * as React from 'react';
import { Button } from '../button';
import { tableCellPropDefs, tableRootPropDefs, tableRowPropDefs } from './table.props';
const TableRoot = (props) => {
    const { className, children, size = tableRootPropDefs.size.default, variant = tableRootPropDefs.variant.default, ...rootProps } = props;
    return (React.createElement("div", { ...rootProps, className: classNames('fui-TableRoot', 
        // This class name applies size related variables to a table.
        // This class name will allow us to implement things like
        // column cells Drag and Drop with DragOverlay. (dnd-kit)
        'fui-TableRoot-vars', className, `fui-variant-${variant}`, `fui-r-size-${size}`) }, children));
};
TableRoot.displayName = 'TableRoot';
const TableTable = (props) => {
    const { className, ...otherProps } = props;
    return React.createElement("table", { ...otherProps, className: classNames('fui-TableTable', className) });
};
TableTable.displayName = 'TableTable';
const TableHeader = (props) => (React.createElement("thead", { ...props, className: classNames('fui-TableHeader', props.className) }));
TableHeader.displayName = 'TableHeader';
const TableBody = (props) => (React.createElement("tbody", { ...props, className: classNames('fui-TableBody', props.className) }));
TableBody.displayName = 'TableBody';
const TableFooter = (props) => (React.createElement("tfoot", { ...props, className: classNames('fui-TableFooter', props.className) }));
TableFooter.displayName = 'TableFooter';
const alignMap = {
    baseline: 'baseline',
    start: 'top',
    center: 'middle',
    end: 'bottom',
};
const TableRow = (props) => {
    const { className, align = tableRowPropDefs.align.default, ...rowProps } = props;
    return (React.createElement("tr", { ...rowProps, className: classNames('fui-TableRow', className, align ? `fui-r-va-${alignMap[align]}` : undefined) }));
};
TableRow.displayName = 'TableRow';
const justifyMap = {
    start: 'left',
    center: 'center',
    end: 'right',
};
const TableCellImpl = (props) => {
    const { tag: Tag = 'td', className, style, justify = tableCellPropDefs.justify.default, width = tableCellPropDefs.width.default, ...cellProps } = props;
    return (React.createElement(Tag, { ...cellProps, className: classNames('fui-TableCell', className, justify ? `fui-r-ta-${justifyMap[justify]}` : undefined), style: { width, ...style } }));
};
TableCellImpl.displayName = 'TableCellImpl';
const TableCell = (props) => React.createElement(TableCellImpl, { ...props, tag: "td" });
TableCell.displayName = 'TableCell';
const TableColumnHeaderCell = (props) => (React.createElement(TableCellImpl, { scope: "col", ...props, tag: "th", className: classNames('fui-TableColumnHeaderCell', props.className) }));
TableColumnHeaderCell.displayName = 'TableColumnHeaderCell';
const TableRowHeaderCell = (props) => (React.createElement(TableCellImpl, { scope: "row", ...props, tag: "th", className: classNames('fui-TableRowHeaderCell', props.className) }));
TableRowHeaderCell.displayName = 'TableRowHeaderCell';
const TableBottomBar = (props) => (React.createElement("div", { ...props, className: classNames('fui-TableBottomBar', props.className) }));
TableBottomBar.displayName = 'TableBottomBar';
const TableColumnHeaderCellButton = (props) => {
    const { children, className, sortDirection, isSortable = false, ...buttonProps } = props;
    return (React.createElement(Button, { variant: "ghost", color: "gray", highContrast: true, ...buttonProps, className: classNames('fui-TableColumnHeaderCellButton', {
            'fui-sortable': isSortable,
            'fui-active': sortDirection,
            'fui-asc': sortDirection === 'asc',
            'fui-desc': sortDirection === 'desc',
        }, className) }, children));
};
TableColumnHeaderCellButton.displayName = 'TableColumnHeaderCellButton';
export { TableBody as Body, TableBottomBar as BottomBar, TableCell as Cell, TableColumnHeaderCell as ColumnHeaderCell, TableColumnHeaderCellButton as ColumnHeaderCellButton, TableFooter as Footer, TableHeader as Header, TableRoot as Root, TableRow as Row, TableRowHeaderCell as RowHeaderCell, TableTable as Table, };
//# sourceMappingURL=table.js.map