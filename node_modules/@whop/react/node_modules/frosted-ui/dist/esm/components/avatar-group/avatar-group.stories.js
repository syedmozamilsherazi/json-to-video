import React from 'react';
import { Button } from 'react-aria-components';
import { AvatarGroup } from '..';
// More on how to set up stories at: https://storybook.js.org/docs/react/writing-stories/introduction#default-export
const meta = {
    title: 'Components/AvatarGroup',
    component: AvatarGroup.Root,
    parameters: {
        // Optional parameter to center the component in the Canvas. More info: https://storybook.js.org/docs/react/configure/story-layout
        layout: 'centered',
    },
    // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/react/writing-docs/autodocs
    tags: ['autodocs'],
};
export default meta;
const availableUsers = [
    {
        name: 'Artur BieÅ„',
        color: 'blue',
        src: 'https://images.unsplash.com/photo-1502823403499-6ccfcf4fb453?&w=256&h=256&q=70&crop=focalpoint&fp-x=0.5&fp-y=0.3&fp-z=1&fit=crop',
    },
    {
        name: 'Cameron Zoub',
        color: 'green',
        src: '',
    },
    {
        name: 'Carlos Whitt',
        color: 'pink',
        src: '',
    },
    {
        name: 'Ilya Miskov',
        color: 'yellow',
        src: '',
    },
    {
        name: 'Guillermo',
        color: 'bronze',
        src: '',
    },
    {
        name: 'Steven Schwartz',
        color: 'lime',
        src: '',
    },
    {
        name: 'FJ',
        color: 'tomato',
        src: '',
    },
];
// More on writing stories with args: https://storybook.js.org/docs/react/writing-stories/args
export const Default = {
    args: {},
    render: (args) => {
        const [users, setUsers] = React.useState(availableUsers);
        return (React.createElement("div", { style: { display: 'flex', gap: 'var(--space-2)' } },
            React.createElement(AvatarGroup.Root, { ...args, size: "3" }, users.map((user) => (React.createElement(AvatarGroup.Avatar, { fallback: user.name, color: user.color, key: user.name, src: user.src })))),
            React.createElement(AvatarGroup.Root, { ...args, size: "9" }, users.map((user) => (React.createElement(AvatarGroup.Avatar, { fallback: user.name, color: user.color, key: user.name, src: user.src })))),
            React.createElement("div", { style: { display: 'flex', flexDirection: 'column', gap: 'var(--space-2)' } }, availableUsers.map((user) => (React.createElement(Button, { key: user.name, onPress: () => {
                    setUsers((prev) => prev.map((a) => a.name).includes(user.name)
                        ? prev.filter((u) => u.name !== user.name)
                        : [...prev, user]);
                } },
                "Toggle ",
                user.name))))));
    },
};
export const Size = {
    args: {},
    render: (args) => (React.createElement("div", { style: { display: 'flex', alignItems: 'center', gap: 'var(--space-4)' } },
        React.createElement(AvatarGroup.Root, { ...args, size: "1" }, availableUsers.map((user) => (React.createElement(AvatarGroup.Avatar, { fallback: user.name, color: user.color, key: user.name, src: user.src })))),
        React.createElement(AvatarGroup.Root, { ...args, size: "2" }, availableUsers.map((user) => (React.createElement(AvatarGroup.Avatar, { fallback: user.name, color: user.color, key: user.name, src: user.src })))),
        React.createElement(AvatarGroup.Root, { ...args, size: "3" }, availableUsers.map((user) => (React.createElement(AvatarGroup.Avatar, { fallback: user.name, color: user.color, key: user.name, src: user.src })))),
        React.createElement(AvatarGroup.Root, { ...args, size: "4" }, availableUsers.map((user) => (React.createElement(AvatarGroup.Avatar, { fallback: user.name, color: user.color, key: user.name, src: user.src })))),
        React.createElement(AvatarGroup.Root, { ...args, size: "5" }, availableUsers.map((user) => (React.createElement(AvatarGroup.Avatar, { fallback: user.name, color: user.color, key: user.name, src: user.src })))),
        React.createElement(AvatarGroup.Root, { ...args, size: "6" }, availableUsers.map((user) => (React.createElement(AvatarGroup.Avatar, { fallback: user.name, color: user.color, key: user.name, src: user.src })))),
        React.createElement(AvatarGroup.Root, { ...args, size: "7" }, availableUsers.map((user) => (React.createElement(AvatarGroup.Avatar, { fallback: user.name, color: user.color, key: user.name, src: user.src })))),
        React.createElement(AvatarGroup.Root, { ...args, size: "8" }, availableUsers.map((user) => (React.createElement(AvatarGroup.Avatar, { fallback: user.name, color: user.color, key: user.name, src: user.src })))),
        React.createElement(AvatarGroup.Root, { ...args, size: "9" }, availableUsers.map((user) => (React.createElement(AvatarGroup.Avatar, { fallback: user.name, color: user.color, key: user.name, src: user.src })))))),
};
export const Color = {
    args: {},
    render: (args) => (React.createElement("div", { style: { display: 'flex', gap: 'var(--space-2)' } },
        React.createElement(AvatarGroup.Root, { size: "5", ...args, color: "indigo" }, availableUsers.map((user) => (React.createElement(AvatarGroup.Avatar, { fallback: user.name, color: user.color, key: user.name, src: user.src })))),
        React.createElement(AvatarGroup.Root, { size: "5", ...args, color: "cyan" }, availableUsers.map((user) => (React.createElement(AvatarGroup.Avatar, { fallback: user.name, color: user.color, key: user.name, src: user.src })))),
        React.createElement(AvatarGroup.Root, { size: "5", ...args, color: "orange" }, availableUsers.map((user) => (React.createElement(AvatarGroup.Avatar, { fallback: user.name, color: user.color, key: user.name, src: user.src })))),
        React.createElement(AvatarGroup.Root, { size: "5", ...args, color: "gold" }, availableUsers.map((user) => (React.createElement(AvatarGroup.Avatar, { fallback: user.name, color: user.color, key: user.name, src: user.src })))))),
};
//# sourceMappingURL=avatar-group.stories.js.map