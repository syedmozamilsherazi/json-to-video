import React from 'react';
import { Card, SegmentedControl, Separator, StackedHorizontalBarChart, Text } from '..';
// More on how to set up stories at: https://storybook.js.org/docs/react/writing-stories/introduction#default-export
const meta = {
    title: 'Data presentation/StackedHorizontalBarChart',
    component: StackedHorizontalBarChart,
    args: {},
    parameters: {
        // Optional parameter to center the component in the Canvas. More info: https://storybook.js.org/docs/react/configure/story-layout
        layout: 'centered',
    },
    // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/react/writing-docs/autodocs
    tags: ['autodocs'],
};
export default meta;
// More on writing stories with args: https://storybook.js.org/docs/react/writing-stories/args
export const Default = {
    args: {
        data: [
            { label: 'Nitrogen', value: 78, color: 'amber' },
            { label: 'Oxygen', value: 20.9, color: 'green' },
            { label: 'Argon', value: 0.9, color: 'sky' },
            { label: 'Other gasses', value: 0.17, color: 'blue' },
            { label: 'Carbon Dioxide', value: 0.03, color: 'danger' },
        ],
    },
    render: (args) => (React.createElement("div", { style: { width: 300 } },
        React.createElement(StackedHorizontalBarChart, { ...args }))),
};
export const CustomLabel = {
    name: 'Custom label',
    args: {
        data: [
            {
                label: (value, percent) => `Successful: ${value} (${percent})`,
                value: 481,
                color: 'success',
            },
            {
                label: (value, percent) => `Past: ${value} (${percent})`,
                value: 202,
                color: 'sky',
            },
            {
                label: (value, percent) => `Due: ${value} (${percent})`,
                value: 534,
                color: 'purple',
            },
            {
                label: (value, percent) => `Failed: ${value} (${percent})`,
                value: 495,
                color: 'danger',
            },
            {
                label: (value, percent) => `Refunded: ${value} (${percent})`,
                value: 128,
                color: 'warning',
            },
        ],
    },
    render: (args) => (React.createElement("div", { style: { width: 300 } },
        React.createElement(StackedHorizontalBarChart, { ...args }))),
};
export const Animated = {
    args: {
        data: [],
    },
    render: () => {
        const uiLibariesData = {
            FrostedUI: [
                { label: 'Typescript', value: 75.9, color: 'success' },
                { label: 'CSS', value: 22.9, color: 'warning' },
                { label: 'Other', value: 1.2, color: 'danger' },
            ],
            BaseUI: [
                { label: 'Typescript', value: 50.5, color: 'success' },
                { label: 'CSS', value: 40, color: 'warning' },
                { label: 'Other', value: 9.5, color: 'danger' },
            ],
            React95: [
                { label: 'Typescript', value: 98.8, color: 'success' },
                { label: 'CSS', value: 1.1, color: 'warning' },
                { label: 'Other', value: 0.1, color: 'danger' },
            ],
        };
        const [state, setState] = React.useState('FrostedUI');
        const data = uiLibariesData[state];
        return (React.createElement(Card, { size: "3", variant: "surface", style: {
                backgroundImage: `linear-gradient(var(--color-panel-elevation-a3), var(--color-panel-elevation-a3))`,
            } },
            React.createElement("div", { style: { width: 300, display: 'flex', flexDirection: 'column', gap: 'var(--space-3)' } },
                React.createElement(SegmentedControl.Root, { value: state, onValueChange: (value) => setState(value) },
                    React.createElement(SegmentedControl.List, null,
                        React.createElement(SegmentedControl.Trigger, { value: "FrostedUI" }, "Frosted UI"),
                        React.createElement(SegmentedControl.Trigger, { value: "BaseUI" }, "Base UI"),
                        React.createElement(SegmentedControl.Trigger, { value: "React95" }, "React95"))),
                React.createElement(StackedHorizontalBarChart, { data: data }),
                React.createElement("div", { style: { display: 'flex', flexDirection: 'column', gap: 'var(--space-3)' } }, data.map((dataPoint, i) => (React.createElement(React.Fragment, null,
                    i !== 0 && React.createElement(Separator, { size: "4", orientation: "horizontal" }),
                    React.createElement("div", { style: { display: 'flex', alignItems: 'center', justifyContent: 'space-between' }, key: dataPoint.label },
                        React.createElement("div", { style: { display: 'flex', alignItems: 'center', gap: 'var(--space-2)' } },
                            React.createElement("div", { style: {
                                    width: 'var(--space-3)',
                                    height: 'var(--space-1)',
                                    borderRadius: 3,
                                    backgroundColor: `var(--${dataPoint.color}-9)`,
                                } }),
                            React.createElement(Text, { size: "2", color: "gray" }, dataPoint.label)),
                        React.createElement(Text, { size: "2" },
                            dataPoint.value,
                            "%")))))))));
    },
};
//# sourceMappingURL=stacked-horizontal-bar-chart.stories.js.map