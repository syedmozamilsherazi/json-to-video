'use client';
import classNames from 'classnames';
import * as React from 'react';
import { Text } from '../text';
import { calloutRootPropDefs } from './callout.props';
const CalloutContext = React.createContext({});
const CalloutRoot = (props) => {
    const { children, className, size = calloutRootPropDefs.size.default, variant = calloutRootPropDefs.variant.default, color = calloutRootPropDefs.color.default, highContrast = calloutRootPropDefs.highContrast.default, ...rootProps } = props;
    return (React.createElement("div", { "data-accent-color": color, ...rootProps, className: classNames('fui-CalloutRoot', className, `fui-r-size-${size}`, `fui-variant-${variant}`, {
            'fui-high-contrast': highContrast,
        }) },
        React.createElement(CalloutContext.Provider, { value: React.useMemo(() => ({ size, color, highContrast }), [size, color, highContrast]) }, children)));
};
CalloutRoot.displayName = 'CalloutRoot';
const CalloutIcon = (props) => {
    const { color, size, highContrast } = React.useContext(CalloutContext);
    return (React.createElement(Text, { asChild: true, color: color, size: getTextSize(size), highContrast: highContrast },
        React.createElement("div", { ...props, className: classNames('fui-CalloutIcon', props.className) })));
};
CalloutIcon.displayName = 'CalloutIcon';
const CalloutText = (props) => {
    const { color, size, highContrast } = React.useContext(CalloutContext);
    return (React.createElement(Text, { as: "p", size: getTextSize(size), color: color, highContrast: highContrast, weight: "medium", ...props, className: classNames('fui-CalloutText', props.className) }));
};
CalloutText.displayName = 'CalloutText';
function getTextSize(size) {
    if (size === undefined)
        return undefined;
    return getNonResponsiveTextSize(size);
}
function getNonResponsiveTextSize(size) {
    return size === '3' ? '3' : '2';
}
export { CalloutIcon as Icon, CalloutRoot as Root, CalloutText as Text };
//# sourceMappingURL=callout.js.map