import { flexRender, getCoreRowModel, getFilteredRowModel, getPaginationRowModel, getSortedRowModel, useReactTable, } from '@tanstack/react-table';
import React from 'react';
import { Badge, Button, Checkbox, Code, DropdownMenu, IconButton, ScrollArea, Select, Table, Text, TextField, tableRootPropDefs, } from '..';
// More on how to set up stories at: https://storybook.js.org/docs/react/writing-stories/introduction#default-export
const meta = {
    title: 'Data presentation/Table',
    component: Table.Root,
    args: {
        size: tableRootPropDefs.size.default,
        variant: tableRootPropDefs.variant.default,
    },
    parameters: {
        // Optional parameter to center the component in the Canvas. More info: https://storybook.js.org/docs/react/configure/story-layout
        layout: 'centered',
    },
    // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/react/writing-docs/autodocs
    tags: ['autodocs'],
};
export default meta;
// More on writing stories with args: https://storybook.js.org/docs/react/writing-stories/args
export const Default = {
    render: (args) => (React.createElement(Table.Root, { ...args },
        React.createElement(Table.Table, null,
            React.createElement(Table.Header, null,
                React.createElement(Table.Row, null,
                    React.createElement(Table.ColumnHeaderCell, null, "Full name"),
                    React.createElement(Table.ColumnHeaderCell, null, "Email"),
                    React.createElement(Table.ColumnHeaderCell, null, "Group"))),
            React.createElement(Table.Body, null,
                React.createElement(Table.Row, null,
                    React.createElement(Table.RowHeaderCell, null, "Danilo Sousa"),
                    React.createElement(Table.Cell, null, "danilo@example.com"),
                    React.createElement(Table.Cell, null,
                        React.createElement(Badge, { color: "green" }, "Developer"))),
                React.createElement(Table.Row, null,
                    React.createElement(Table.RowHeaderCell, null, "Zahra Ambessa"),
                    React.createElement(Table.Cell, null, "zahra@example.com"),
                    React.createElement(Table.Cell, null,
                        React.createElement(Badge, { color: "amber" }, "Admin"))),
                React.createElement(Table.Row, null,
                    React.createElement(Table.RowHeaderCell, null, "Jasper Eriksson"),
                    React.createElement(Table.Cell, null, "jasper@example.com"),
                    React.createElement(Table.Cell, null,
                        React.createElement(Badge, { color: "green" }, "Developer"))))),
        React.createElement(Table.BottomBar, null, "Showing 1 to 3 of 3 entries"))),
};
export const Variant = {
    render: (args) => (React.createElement("div", { style: { display: 'flex', flexDirection: 'row', gap: 'var(--space-3)' } },
        React.createElement("div", null,
            React.createElement(Table.Root, { ...args, variant: "ghost" },
                React.createElement(Table.Table, null,
                    React.createElement(Table.Header, null,
                        React.createElement(Table.Row, null,
                            React.createElement(Table.ColumnHeaderCell, null,
                                React.createElement("div", { style: { display: 'flex', alignItems: 'center', gap: 'var(--space-3)' } },
                                    React.createElement(Checkbox, null),
                                    "Full name")),
                            React.createElement(Table.ColumnHeaderCell, null, "Email"),
                            React.createElement(Table.ColumnHeaderCell, null, "Group"))),
                    React.createElement(Table.Body, null,
                        React.createElement(Table.Row, null,
                            React.createElement(Table.RowHeaderCell, null,
                                React.createElement("div", { style: { display: 'flex', alignItems: 'center', gap: 'var(--space-3)' } },
                                    React.createElement(Checkbox, null),
                                    "Danilo Sousa")),
                            React.createElement(Table.Cell, null, "danilo@example.com"),
                            React.createElement(Table.Cell, null,
                                React.createElement(Badge, { color: "green" }, "Developer"))),
                        React.createElement(Table.Row, null,
                            React.createElement(Table.RowHeaderCell, null,
                                React.createElement("div", { style: { display: 'flex', alignItems: 'center', gap: 'var(--space-3)' } },
                                    React.createElement(Checkbox, null),
                                    "Zahra Ambessa")),
                            React.createElement(Table.Cell, null, "zahra@example.com"),
                            React.createElement(Table.Cell, null,
                                React.createElement(Badge, { color: "amber" }, "Admin"))),
                        React.createElement(Table.Row, null,
                            React.createElement(Table.RowHeaderCell, null,
                                React.createElement("div", { style: { display: 'flex', alignItems: 'center', gap: 'var(--space-3)' } },
                                    React.createElement(Checkbox, null),
                                    "Jasper Eriksson")),
                            React.createElement(Table.Cell, null, "jasper@example.com"),
                            React.createElement(Table.Cell, null,
                                React.createElement(Badge, { color: "green" }, "Developer"))))))),
        React.createElement("div", null,
            React.createElement(Table.Root, { ...args, variant: "surface" },
                React.createElement(Table.Table, null,
                    React.createElement(Table.Header, null,
                        React.createElement(Table.Row, null,
                            React.createElement(Table.ColumnHeaderCell, null,
                                React.createElement("div", { style: { display: 'flex', alignItems: 'center', gap: 'var(--space-3)' } },
                                    React.createElement(Checkbox, null),
                                    "Full name")),
                            React.createElement(Table.ColumnHeaderCell, null, "Email"),
                            React.createElement(Table.ColumnHeaderCell, null, "Group"))),
                    React.createElement(Table.Body, null,
                        React.createElement(Table.Row, null,
                            React.createElement(Table.RowHeaderCell, null,
                                React.createElement("div", { style: { display: 'flex', alignItems: 'center', gap: 'var(--space-3)' } },
                                    React.createElement(Checkbox, null),
                                    "Danilo Sousa")),
                            React.createElement(Table.Cell, null, "danilo@example.com"),
                            React.createElement(Table.Cell, null,
                                React.createElement(Badge, { color: "green" }, "Developer"))),
                        React.createElement(Table.Row, null,
                            React.createElement(Table.RowHeaderCell, null,
                                React.createElement("div", { style: { display: 'flex', alignItems: 'center', gap: 'var(--space-3)' } },
                                    React.createElement(Checkbox, null),
                                    "Zahra Ambessa")),
                            React.createElement(Table.Cell, null, "zahra@example.com"),
                            React.createElement(Table.Cell, null,
                                React.createElement(Badge, { color: "amber" }, "Admin"))),
                        React.createElement(Table.Row, null,
                            React.createElement(Table.RowHeaderCell, null,
                                React.createElement("div", { style: { display: 'flex', alignItems: 'center', gap: 'var(--space-3)' } },
                                    React.createElement(Checkbox, null),
                                    "Jasper Eriksson")),
                            React.createElement(Table.Cell, null, "jasper@example.com"),
                            React.createElement(Table.Cell, null,
                                React.createElement(Badge, { color: "green" }, "Developer"))))))))),
};
export const TableFooter = {
    render: (args) => (React.createElement("div", { style: {
            display: 'flex',
            flexDirection: 'column',
            gap: 'var(--space-6)',
            justifyContent: 'center',
            alignItems: 'center',
        } },
        React.createElement(Text, { style: { maxWidth: 700 } },
            "The ",
            React.createElement(Code, null, '<TableFooter />'),
            " component is usually used as summary of the columns, e.g., a sum of the given numbers in a column."),
        React.createElement("div", { style: { display: 'flex', flexDirection: 'row', gap: 'var(--space-8)' } },
            React.createElement("div", null,
                React.createElement(Table.Root, { ...args, variant: "ghost" },
                    React.createElement(Table.Table, null,
                        React.createElement(Table.Header, null,
                            React.createElement(Table.Row, null,
                                React.createElement(Table.ColumnHeaderCell, null, "Product"),
                                React.createElement(Table.ColumnHeaderCell, null, "Price"))),
                        React.createElement(Table.Body, null,
                            React.createElement(Table.Row, null,
                                React.createElement(Table.RowHeaderCell, null, "Pizza"),
                                React.createElement(Table.Cell, null, "$20")),
                            React.createElement(Table.Row, null,
                                React.createElement(Table.RowHeaderCell, null, "Confetti"),
                                React.createElement(Table.Cell, null, "$30")),
                            React.createElement(Table.Row, null,
                                React.createElement(Table.RowHeaderCell, null, "Beer"),
                                React.createElement(Table.Cell, null, "$43"))),
                        React.createElement(Table.Footer, null,
                            React.createElement(Table.Row, null,
                                React.createElement(Table.RowHeaderCell, null, "Total"),
                                React.createElement(Table.Cell, null,
                                    React.createElement(Text, { color: "green" }, "$93"))))))),
            React.createElement("div", null,
                React.createElement(Table.Root, { ...args, variant: "surface" },
                    React.createElement(Table.Table, null,
                        React.createElement(Table.Header, null,
                            React.createElement(Table.Row, null,
                                React.createElement(Table.ColumnHeaderCell, null, "Product"),
                                React.createElement(Table.ColumnHeaderCell, null, "Price"))),
                        React.createElement(Table.Body, null,
                            React.createElement(Table.Row, null,
                                React.createElement(Table.RowHeaderCell, null, "Pizza"),
                                React.createElement(Table.Cell, null, "$20")),
                            React.createElement(Table.Row, null,
                                React.createElement(Table.RowHeaderCell, null, "Confetti"),
                                React.createElement(Table.Cell, null, "$30")),
                            React.createElement(Table.Row, null,
                                React.createElement(Table.RowHeaderCell, null, "Beer"),
                                React.createElement(Table.Cell, null, "$43"))),
                        React.createElement(Table.Footer, null,
                            React.createElement(Table.Row, null,
                                React.createElement(Table.RowHeaderCell, null, "Total"),
                                React.createElement(Table.Cell, null,
                                    React.createElement(Text, { color: "green" }, "$93")))))))))),
};
export const HorizontalScroll = {
    render: (args) => (React.createElement("div", { style: { display: 'flex', flexDirection: 'row', gap: 'var(--space-8)' } },
        React.createElement("div", null,
            React.createElement(Table.Root, { ...args, variant: "ghost", style: { maxWidth: 400, whiteSpace: 'nowrap' } },
                React.createElement(ScrollArea, { scrollbars: "horizontal" },
                    React.createElement(Table.Table, null,
                        React.createElement(Table.Header, null,
                            React.createElement(Table.Row, null,
                                React.createElement(Table.ColumnHeaderCell, null, "Product"),
                                React.createElement(Table.ColumnHeaderCell, null, "Availability"),
                                React.createElement(Table.ColumnHeaderCell, null, "Store"),
                                React.createElement(Table.ColumnHeaderCell, null, "Price"),
                                React.createElement(Table.ColumnHeaderCell, null, "Tax"))),
                        React.createElement(Table.Body, null,
                            React.createElement(Table.Row, null,
                                React.createElement(Table.RowHeaderCell, null, "Pizza"),
                                React.createElement(Table.Cell, null,
                                    React.createElement(Badge, { color: "green" }, "In stock")),
                                React.createElement(Table.Cell, null, "Tesco"),
                                React.createElement(Table.Cell, null, "$20"),
                                React.createElement(Table.Cell, null, "$2")),
                            React.createElement(Table.Row, null,
                                React.createElement(Table.RowHeaderCell, null, "Confetti"),
                                React.createElement(Table.Cell, null,
                                    React.createElement(Badge, { color: "green" }, "In stock")),
                                React.createElement(Table.Cell, null, "Wallmart"),
                                React.createElement(Table.Cell, null, "$30"),
                                React.createElement(Table.Cell, null, "$3.50")),
                            React.createElement(Table.Row, null,
                                React.createElement(Table.RowHeaderCell, null, "Beer"),
                                React.createElement(Table.Cell, null,
                                    React.createElement(Badge, { color: "red" }, "Out of stock")),
                                React.createElement(Table.Cell, null, "Beer Enthusiast"),
                                React.createElement(Table.Cell, null, "$43"),
                                React.createElement(Table.Cell, null, "$13.75"))),
                        React.createElement(Table.Footer, null,
                            React.createElement(Table.Row, null,
                                React.createElement(Table.RowHeaderCell, { colSpan: 3 }, "Total"),
                                React.createElement(Table.Cell, null,
                                    React.createElement(Text, { color: "green" }, "$93")),
                                React.createElement(Table.Cell, null,
                                    React.createElement(Text, { color: "red" }, "$19.25")))))),
                React.createElement(Table.BottomBar, null,
                    React.createElement(Text, { size: "1", color: "gray", align: "center" }, "Birthday party shopping list.")))),
        React.createElement("div", null,
            React.createElement(Table.Root, { ...args, variant: "surface", style: { maxWidth: 400, whiteSpace: 'nowrap' } },
                React.createElement(ScrollArea, { scrollbars: "horizontal" },
                    React.createElement(Table.Table, null,
                        React.createElement(Table.Header, null,
                            React.createElement(Table.Row, null,
                                React.createElement(Table.ColumnHeaderCell, null, "Product"),
                                React.createElement(Table.ColumnHeaderCell, null, "Availability"),
                                React.createElement(Table.ColumnHeaderCell, null, "Store"),
                                React.createElement(Table.ColumnHeaderCell, null, "Price"),
                                React.createElement(Table.ColumnHeaderCell, null, "Tax"))),
                        React.createElement(Table.Body, null,
                            React.createElement(Table.Row, null,
                                React.createElement(Table.RowHeaderCell, null, "Pizza"),
                                React.createElement(Table.Cell, null,
                                    React.createElement(Badge, { color: "green" }, "In stock")),
                                React.createElement(Table.Cell, null, "Tesco"),
                                React.createElement(Table.Cell, null, "$20"),
                                React.createElement(Table.Cell, null, "$2")),
                            React.createElement(Table.Row, null,
                                React.createElement(Table.RowHeaderCell, null, "Confetti"),
                                React.createElement(Table.Cell, null,
                                    React.createElement(Badge, { color: "green" }, "In stock")),
                                React.createElement(Table.Cell, null, "Wallmart"),
                                React.createElement(Table.Cell, null, "$30"),
                                React.createElement(Table.Cell, null, "$3.50")),
                            React.createElement(Table.Row, null,
                                React.createElement(Table.RowHeaderCell, null, "Beer"),
                                React.createElement(Table.Cell, null,
                                    React.createElement(Badge, { color: "red" }, "Out of stock")),
                                React.createElement(Table.Cell, null, "Beer Enthusiast"),
                                React.createElement(Table.Cell, null, "$43"),
                                React.createElement(Table.Cell, null, "$13.75"))),
                        React.createElement(Table.Footer, null,
                            React.createElement(Table.Row, null,
                                React.createElement(Table.RowHeaderCell, { colSpan: 3 }, "Total"),
                                React.createElement(Table.Cell, null,
                                    React.createElement(Text, { color: "green" }, "$93")),
                                React.createElement(Table.Cell, null,
                                    React.createElement(Text, { color: "red" }, "$19.25")))))),
                React.createElement(Table.BottomBar, null,
                    React.createElement(Text, { size: "1", color: "gray", align: "center" }, "Birthday party shopping list.")))))),
};
const data = [
    {
        id: '3u1reuv4',
        amount: 242,
        status: 'success',
        email: 'ilya@gmail.com',
    },
    {
        id: 'derv1ws0',
        amount: 837,
        status: 'processing',
        email: 'jamie@gmail.com',
    },
    {
        id: 'm5gr84i9',
        amount: 316,
        status: 'success',
        email: 'artur@yahoo.com',
    },
    {
        id: '5kma53ae',
        amount: 874,
        status: 'success',
        email: 'fj@gmail.com',
    },
    {
        id: 'bhqecj4p',
        amount: 721,
        status: 'failed',
        email: 'steven@whop.com',
    },
    {
        id: '5kma23ae',
        amount: 874,
        status: 'success',
        email: 'es@whop.com',
    },
    {
        id: '8jqecj4p',
        amount: 721,
        status: 'failed',
        email: 'dima@yahoo.com',
    },
    {
        id: 'asma53ae',
        amount: 174,
        status: 'success',
        email: 'tester@wp.pl',
    },
    {
        id: 'bhqokj4p',
        amount: 721,
        status: 'failed',
        email: 'someone@gmail.com',
    },
    {
        id: '5kma93ae',
        amount: 894,
        status: 'success',
        email: 'tristan@whop.com',
    },
];
const columns = [
    {
        id: 'select',
        header: ({ table }) => (React.createElement(Checkbox, { checked: table.getIsAllRowsSelected() || (table.getIsSomeRowsSelected() && 'indeterminate'), onCheckedChange: (value) => table.toggleAllRowsSelected(!!value), "aria-label": "Select all" })),
        cell: ({ row }) => (React.createElement(Checkbox, { checked: row.getIsSelected(), onCheckedChange: (value) => row.toggleSelected(!!value), "aria-label": "Select row" })),
        enableSorting: false,
        enableHiding: false,
    },
    {
        accessorKey: 'status',
        header: ({ column }) => (React.createElement(Table.ColumnHeaderCellButton, { isSortable: column.getCanSort(), sortDirection: column.getIsSorted(), onClick: () => column.toggleSorting() }, "Status")),
        cell: ({ row }) => row.getValue('status'),
    },
    {
        accessorKey: 'email',
        header: ({ column }) => {
            return (React.createElement(Table.ColumnHeaderCellButton, { isSortable: column.getCanSort(), sortDirection: column.getIsSorted(), onClick: () => column.toggleSorting() }, "Email"));
        },
        cell: ({ row }) => row.getValue('email'),
    },
    {
        enableSorting: true,
        accessorKey: 'amount',
        header: ({ column }) => {
            return (React.createElement(Table.ColumnHeaderCellButton, { isSortable: column.getCanSort(), sortDirection: column.getIsSorted(), onClick: () => column.toggleSorting() }, "Amount"));
        },
        cell: ({ row }) => {
            const amount = parseFloat(row.getValue('amount'));
            // Format the amount as a dollar amount
            const formatted = new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD',
            }).format(amount);
            return React.createElement(Text, { color: "green" }, formatted);
        },
    },
    {
        id: 'actions',
        enableHiding: false,
        cell: ({ row }) => {
            const payment = row.original;
            return (React.createElement("div", { style: { display: 'flex', justifyContent: 'end' } },
                React.createElement(DropdownMenu.Root, null,
                    React.createElement(DropdownMenu.Trigger, null,
                        React.createElement(IconButton, { variant: "ghost", color: "gray", "aria-label": "Open menu", style: { margin: 0 } },
                            React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", style: { width: 16, height: 16 } },
                                React.createElement("circle", { cx: "12", cy: "12", r: "1" }),
                                React.createElement("circle", { cx: "19", cy: "12", r: "1" }),
                                React.createElement("circle", { cx: "5", cy: "12", r: "1" })))),
                    React.createElement(DropdownMenu.Content, { align: "end" },
                        React.createElement(DropdownMenu.Item, null, "View customer"),
                        React.createElement(DropdownMenu.Item, null, "View payment details"),
                        React.createElement(DropdownMenu.Separator, null),
                        React.createElement(DropdownMenu.Label, null, "Actions"),
                        React.createElement(DropdownMenu.Item, { onClick: () => navigator.clipboard.writeText(payment.id) }, "Copy payment ID"),
                        React.createElement(DropdownMenu.Item, { color: "danger" }, "Refund")))));
        },
    },
];
const TanstackTableExample = (props) => {
    var _a, _b, _c;
    const [sorting, setSorting] = React.useState([]);
    const [columnFilters, setColumnFilters] = React.useState([]);
    const [columnVisibility, setColumnVisibility] = React.useState({});
    const [rowSelection, setRowSelection] = React.useState({});
    const [pagination, setPagination] = React.useState({
        pageSize: 5,
        pageIndex: 0,
    });
    const table = useReactTable({
        data,
        columns,
        onSortingChange: setSorting,
        onColumnFiltersChange: setColumnFilters,
        getCoreRowModel: getCoreRowModel(),
        getPaginationRowModel: getPaginationRowModel(),
        getSortedRowModel: getSortedRowModel(),
        getFilteredRowModel: getFilteredRowModel(),
        onColumnVisibilityChange: setColumnVisibility,
        onRowSelectionChange: setRowSelection,
        onPaginationChange: setPagination,
        state: {
            sorting,
            columnFilters,
            columnVisibility,
            rowSelection,
            pagination,
        },
    });
    return (React.createElement("div", { style: { display: 'flex', flexDirection: 'column', gap: 'var(--space-4)', width: 580 } },
        React.createElement("div", { style: { display: 'flex', gap: 'var(--space-4)', width: '100%' } },
            React.createElement("div", { style: { width: '100%' } },
                React.createElement(TextField.Input, { placeholder: "Filter emails...", value: (_b = (_a = table.getColumn('email')) === null || _a === void 0 ? void 0 : _a.getFilterValue()) !== null && _b !== void 0 ? _b : '', onChange: (event) => { var _a; return (_a = table.getColumn('email')) === null || _a === void 0 ? void 0 : _a.setFilterValue(event.target.value); }, style: { width: '100%' }, width: '100%' })),
            React.createElement(DropdownMenu.Root, null,
                React.createElement(DropdownMenu.Trigger, null,
                    React.createElement(Button, { variant: "surface", className: "ml-auto" }, "Columns")),
                React.createElement(DropdownMenu.Content, { align: "end" }, table
                    .getAllColumns()
                    .filter((column) => column.getCanHide())
                    .map((column) => {
                    return (React.createElement(DropdownMenu.CheckboxItem, { key: column.id, className: "capitalize", checked: column.getIsVisible(), onCheckedChange: (value) => column.toggleVisibility(!!value), onSelect: (event) => event.preventDefault() }, column.id));
                })))),
        React.createElement(Table.Root, { ...props },
            React.createElement(Table.Table, null,
                React.createElement(Table.Header, null, table.getHeaderGroups().map((headerGroup) => (React.createElement(Table.Row, { key: headerGroup.id }, headerGroup.headers.map((header) => {
                    return (React.createElement(Table.ColumnHeaderCell, { key: header.id }, header.isPlaceholder
                        ? null
                        : flexRender(header.column.columnDef.header, header.getContext())));
                }))))),
                React.createElement(Table.Body, null, ((_c = table.getRowModel().rows) === null || _c === void 0 ? void 0 : _c.length) ? (table.getRowModel().rows.map((row) => (React.createElement(Table.Row, { key: row.id, "data-state": row.getIsSelected() && 'selected' }, row.getVisibleCells().map((cell) => (React.createElement(Table.Cell, { key: cell.id }, flexRender(cell.column.columnDef.cell, cell.getContext())))))))) : (React.createElement(Table.Row, null,
                    React.createElement(Table.Cell, { colSpan: columns.length }, "No results."))))),
            React.createElement(Table.BottomBar, null,
                React.createElement("div", { style: { display: 'flex', alignItems: 'center', justifyContent: 'space-between' } },
                    React.createElement(Text, { color: "gray", size: "2" },
                        table.getFilteredSelectedRowModel().rows.length,
                        " of ",
                        table.getFilteredRowModel().rows.length,
                        " row(s) selected."),
                    React.createElement("div", { style: { display: 'flex', gap: 'var(--space-2)' } },
                        React.createElement(Button, { variant: "surface", onClick: () => table.previousPage(), disabled: !table.getCanPreviousPage() }, "Previous"),
                        React.createElement(Button, { variant: "surface", onClick: () => table.nextPage(), disabled: !table.getCanNextPage() }, "Next"),
                        React.createElement(Select.Root, { onValueChange: (newPerPage) => table.setPageSize(Number(newPerPage)), size: "2", value: table.getState().pagination.pageSize.toString(), "aria-label": "Rows per page" },
                            React.createElement(Select.Trigger, { color: "gray", variant: "soft" }),
                            React.createElement(Select.Content, null, [2, 5, 10].map((option) => (React.createElement(Select.Item, { key: option, value: option.toString() }, option)))))))))));
};
export const TanstackTable = {
    render: (args) => React.createElement(TanstackTableExample, { ...args }),
};
//# sourceMappingURL=table.stories.js.map