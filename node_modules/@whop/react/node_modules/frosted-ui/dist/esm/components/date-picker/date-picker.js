'use client';
import { useDatePicker } from '@react-aria/datepicker';
import { useDatePickerState } from '@react-stately/datepicker';
import classNames from 'classnames';
import React, { useRef } from 'react';
import { Popover } from '../';
import { CalendarIcon } from '../../icons';
import { Calendar } from '../calendar';
import { DateField } from '../date-field';
import { IconButton } from '../icon-button';
import { datePickerPropDefs } from './date-picker.props';
export function DatePicker(props) {
    const { className, color = datePickerPropDefs.color.default, size = datePickerPropDefs.size.default, ...datePickerProps } = props;
    const state = useDatePickerState(datePickerProps);
    const ref = useRef(null);
    const { groupProps, fieldProps: { onChange, ...otherFieldProps }, buttonProps: { isDisabled: isButtonDisabled, onPress: onButtonClick, ...buttonProps }, calendarProps, } = useDatePicker(props, state, ref);
    return (React.createElement("div", { ...groupProps, ref: ref, className: classNames('fui-DatePickerRoot', className) },
        React.createElement(DateField, { ...otherFieldProps, color: color, size: size, 
            // @ts-expect-error React Arias onChange type is incorrect - it's missing UNDEFINED
            onChange: onChange }),
        React.createElement(Popover.Root, { open: state.isOpen, onOpenChange: (open) => state.setOpen(open) },
            React.createElement(Popover.Trigger, { ...buttonProps, disabled: isButtonDisabled, 
                // @ts-expect-error fix mismatching onPress and onClick types
                onClick: onButtonClick, onKeyDown: (e) => {
                    // Radix and Aria keyboard event handlers are clashing
                    // when pressing space or enter on the button.
                    // Stop propagation to avoid that.
                    if (e.code === 'Space' || e.code === 'Enter') {
                        e.stopPropagation();
                    }
                } },
                React.createElement(IconButton, { size: size },
                    React.createElement(CalendarIcon, { size: size }))),
            React.createElement(Popover.Content, { variant: "translucent", align: "center" },
                React.createElement(Calendar, { ...calendarProps })))));
}
//# sourceMappingURL=date-picker.js.map