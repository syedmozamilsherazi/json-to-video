'use client';
import classNames from 'classnames';
import { Dialog as DialogPrimitive } from 'radix-ui';
import * as React from 'react';
import { Theme } from '../../theme';
import { Heading } from '../heading';
import { Text } from '../text';
import { dialogContentPropDefs } from './dialog.props';
const DialogRoot = (props) => React.createElement(DialogPrimitive.Root, { ...props, modal: true });
DialogRoot.displayName = 'DialogRoot';
const DialogTrigger = (props) => React.createElement(DialogPrimitive.Trigger, { ...props, asChild: true });
DialogTrigger.displayName = 'DialogTrigger';
const DialogContentContext = React.createContext({
    size: dialogContentPropDefs.size.default,
});
const DialogContent = (props) => {
    const { className, children, forceMount, container, size = dialogContentPropDefs.size.default, ...contentProps } = props;
    return (React.createElement(DialogPrimitive.Portal, { container: container, forceMount: forceMount },
        React.createElement(Theme, { asChild: true },
            React.createElement(DialogPrimitive.Overlay, { className: "fui-DialogOverlay" },
                React.createElement(DialogPrimitive.Content, { ...contentProps, className: classNames('fui-DialogContent', className, `fui-r-size-${size}`) },
                    React.createElement(DialogContentContext.Provider, { value: React.useMemo(() => ({ size }), [size]) }, children))))));
};
DialogContent.displayName = 'DialogContent';
const DialogTitle = ({ size: sizeProp, className, ...props }) => {
    const { size: contextSize } = React.useContext(DialogContentContext);
    let size;
    if (contextSize) {
        size = {
            '1': '3',
            '2': '5',
            '3': '5',
            '4': '6',
        }[contextSize];
    }
    return (React.createElement(DialogPrimitive.Title, { asChild: true },
        React.createElement(Heading, { size: sizeProp || size, trim: "start", className: classNames('fui-DialogTitle', className), ...props })));
};
DialogTitle.displayName = 'DialogTitle';
const DialogDescription = ({ size: sizeProp, className, ...props }) => {
    const { size: contextSize } = React.useContext(DialogContentContext);
    let size;
    if (contextSize) {
        size = {
            '1': '1',
            '2': '2',
            '3': '2',
            '4': '3',
        }[contextSize];
    }
    return (React.createElement(DialogPrimitive.Description, { asChild: true },
        React.createElement(Text, { as: "p", size: sizeProp || size, className: classNames('fui-DialogDescription', className), ...props })));
};
DialogDescription.displayName = 'DialogDescription';
const DialogClose = (props) => React.createElement(DialogPrimitive.Close, { ...props, asChild: true });
DialogClose.displayName = 'DialogClose';
export { DialogClose as Close, DialogContent as Content, DialogDescription as Description, DialogRoot as Root, DialogTitle as Title, DialogTrigger as Trigger, };
//# sourceMappingURL=dialog.js.map