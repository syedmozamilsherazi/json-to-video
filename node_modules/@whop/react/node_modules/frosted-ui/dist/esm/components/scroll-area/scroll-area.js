'use client';
import classNames from 'classnames';
import { ScrollArea as ScrollAreaPrimitive } from 'radix-ui';
import * as React from 'react';
import { scrollAreaPropDefs } from './scroll-area.props';
const ScrollArea = (props) => {
    const { className, style, type, scrollHideDelay = type !== 'scroll' ? 0 : undefined, 
    // dir,
    size = scrollAreaPropDefs.size.default, scrollbars = scrollAreaPropDefs.scrollbars.default, ...viewportProps } = props;
    return (React.createElement(ScrollAreaPrimitive.Root, { type: type, scrollHideDelay: scrollHideDelay, className: classNames('fui-ScrollAreaRoot', className), style: style },
        React.createElement(ScrollAreaPrimitive.Viewport, { ...viewportProps, className: "fui-ScrollAreaViewport" }),
        React.createElement("div", { className: "fui-ScrollAreaViewportFocusRing" }),
        scrollbars !== 'vertical' ? (React.createElement(ScrollAreaPrimitive.Scrollbar, { orientation: "horizontal", className: classNames('fui-ScrollAreaScrollbar', `fui-r-size-${size}`) },
            React.createElement(ScrollAreaPrimitive.Thumb, { className: "fui-ScrollAreaThumb" }))) : null,
        scrollbars !== 'horizontal' ? (React.createElement(ScrollAreaPrimitive.Scrollbar, { orientation: "vertical", className: classNames('fui-ScrollAreaScrollbar', `fui-r-size-${size}`) },
            React.createElement(ScrollAreaPrimitive.Thumb, { className: "fui-ScrollAreaThumb" }))) : null,
        scrollbars === 'both' ? React.createElement(ScrollAreaPrimitive.Corner, { className: "fui-ScrollAreaCorner" }) : null));
};
ScrollArea.displayName = 'ScrollArea';
export { ScrollArea };
//# sourceMappingURL=scroll-area.js.map