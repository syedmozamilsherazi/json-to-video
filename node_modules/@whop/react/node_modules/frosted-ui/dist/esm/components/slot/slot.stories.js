import React from 'react';
import { Link, Slot, Text } from '..';
const CustomButton = ({ asChild, ...props }) => {
    const Comp = asChild ? Slot.Root : 'button';
    return (React.createElement(Comp, { ...props, style: {
            padding: '8px 16px',
            border: '1px solid var(--gray-7)',
        } }));
};
// More on how to set up stories at: https://storybook.js.org/docs/react/writing-stories/introduction#default-export
const meta = {
    title: 'Utilities/Slot',
    component: Slot.Root,
    parameters: {
        // Optional parameter to center the component in the Canvas. More info: https://storybook.js.org/docs/react/configure/story-layout
        layout: 'centered',
    },
    // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/react/writing-docs/autodocs
    tags: ['autodocs'],
};
export default meta;
// More on writing stories with args: https://storybook.js.org/docs/react/writing-stories/args
export const Default = {
    args: {},
    render: () => (React.createElement("div", { style: { display: 'flex', flexDirection: 'column', gap: 'var(--space-4)' } },
        React.createElement(Text, null,
            "Can be used to support your own `asChild` prop. See",
            ' ',
            React.createElement(Link, { href: "https://www.radix-ui.com/primitives/docs/utilities/slot" }, "Radix UI docs"),
            "."),
        React.createElement("div", null,
            React.createElement(CustomButton, { asChild: true },
                React.createElement("a", { href: "/contact" }, "Contact"))))),
};
//# sourceMappingURL=slot.stories.js.map