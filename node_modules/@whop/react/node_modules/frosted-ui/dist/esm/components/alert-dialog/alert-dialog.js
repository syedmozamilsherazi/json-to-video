'use client';
import classNames from 'classnames';
import { AlertDialog as AlertDialogPrimitive } from 'radix-ui';
import * as React from 'react';
import { Theme } from '../../theme';
import { Heading } from '../heading';
import { Text } from '../text';
import { alertDialogContentPropDefs } from './alert-dialog.props';
const AlertDialogRoot = (props) => React.createElement(AlertDialogPrimitive.Root, { ...props });
AlertDialogRoot.displayName = 'AlertDialogRoot';
const AlertDialogTrigger = (props) => React.createElement(AlertDialogPrimitive.Trigger, { ...props, asChild: true });
AlertDialogTrigger.displayName = 'AlertDialogTrigger';
const AlertDialogContentContext = React.createContext({
    size: alertDialogContentPropDefs.size.default,
});
const AlertDialogContent = (props) => {
    const { className, children, forceMount, container, size = alertDialogContentPropDefs.size.default, ...contentProps } = props;
    return (React.createElement(AlertDialogPrimitive.Portal, { container: container, forceMount: forceMount },
        React.createElement(Theme, { asChild: true },
            React.createElement(AlertDialogPrimitive.Overlay, { className: "fui-DialogOverlay fui-AlertDialogOverlay" },
                React.createElement(AlertDialogPrimitive.Content, { ...contentProps, className: classNames('fui-DialogContent', 'fui-AlertDialogContent', className, `fui-r-size-${size}`) },
                    React.createElement(AlertDialogContentContext.Provider, { value: React.useMemo(() => ({ size }), [size]) }, children))))));
};
AlertDialogContent.displayName = 'AlertDialogContent';
const AlertDialogTitle = ({ size: sizeProp, className, ...props }) => {
    const { size: contextSize } = React.useContext(AlertDialogContentContext);
    let size;
    if (contextSize) {
        size = {
            '1': '3',
            '2': '5',
            '3': '5',
            '4': '6',
        }[contextSize];
    }
    return (React.createElement(AlertDialogPrimitive.Title, { asChild: true },
        React.createElement(Heading, { size: sizeProp || size, trim: "start", className: classNames('fui-DialogTitle', className), ...props })));
};
AlertDialogTitle.displayName = 'AlertDialogTitle';
const AlertDialogDescription = ({ size: sizeProp, className, ...props }) => {
    const { size: contextSize } = React.useContext(AlertDialogContentContext);
    let size;
    if (contextSize) {
        size = {
            '1': '1',
            '2': '2',
            '3': '2',
            '4': '3',
        }[contextSize];
    }
    return (React.createElement(AlertDialogPrimitive.Description, { asChild: true },
        React.createElement(Text, { as: "p", size: sizeProp || size, className: classNames('fui-DialogDescription', className), ...props })));
};
AlertDialogDescription.displayName = 'AlertDialogDescription';
const AlertDialogAction = (props) => React.createElement(AlertDialogPrimitive.Action, { ...props, asChild: true });
AlertDialogAction.displayName = 'AlertDialogAction';
const AlertDialogCancel = (props) => React.createElement(AlertDialogPrimitive.Cancel, { ...props, asChild: true });
AlertDialogCancel.displayName = 'AlertDialogCancel';
export { AlertDialogAction as Action, AlertDialogCancel as Cancel, AlertDialogContent as Content, AlertDialogDescription as Description, AlertDialogRoot as Root, AlertDialogTitle as Title, AlertDialogTrigger as Trigger, };
//# sourceMappingURL=alert-dialog.js.map