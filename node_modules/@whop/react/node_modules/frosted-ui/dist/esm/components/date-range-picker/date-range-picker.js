'use client';
import { useDateRangePicker } from '@react-aria/datepicker';
import { useDateRangePickerState } from '@react-stately/datepicker';
import classNames from 'classnames';
import React, { useRef } from 'react';
import { Popover } from '../';
import { CalendarIcon } from '../../icons';
import { RangeCalendar } from '../calendar';
import { DateField } from '../date-field';
import { datePickerPropDefs } from '../date-picker/date-picker.props';
import { IconButton } from '../icon-button';
export function DateRangePicker(props) {
    const { className, ...otherProps } = props;
    const { color = datePickerPropDefs.color.default, size = datePickerPropDefs.size.default, ...datePickerProps } = otherProps;
    datePickerProps.onChange;
    const state = useDateRangePickerState({
        ...datePickerProps,
        // shouldCloseOnSelect: false,
    });
    const ref = useRef(null);
    const { groupProps, startFieldProps: { onChange: onStartChange, ...startFieldProps }, endFieldProps: { onChange: onEndChange, ...endFieldProps }, buttonProps: { isDisabled: isButtonDisabled, onPress: onButtonClick, ...otherButtonProps }, calendarProps, } = useDateRangePicker(props, state, ref);
    return (React.createElement("div", { ...groupProps, ref: ref, className: classNames('fui-DateRangePickerRoot', className) },
        React.createElement(DateField, { ...startFieldProps, color: color, size: size, 
            // @ts-expect-error TODO: Aria onChange types exclude NULL which is wrong
            onChange: onStartChange }),
        React.createElement(DateField, { ...endFieldProps, color: color, size: size, 
            // @ts-expect-error TODO: Aria onChange types exclude NULL which is wrong
            onChange: onEndChange }),
        React.createElement(Popover.Root, { open: state.isOpen, onOpenChange: (open) => state.setOpen(open) },
            React.createElement(Popover.Trigger, null,
                React.createElement(IconButton, { ...otherButtonProps, disabled: isButtonDisabled, 
                    // @ts-expect-error fix mismatching onPress and onClick types
                    onClick: onButtonClick, onKeyDown: (e) => {
                        // Radix and Aria keyboard event handlers are clashing
                        // when pressing space or enter on the button.
                        // Stop propagation to avoid that.
                        if (e.code === 'Space' || e.code === 'Enter') {
                            e.stopPropagation();
                        }
                    }, size: size },
                    React.createElement(CalendarIcon, { size: size }))),
            React.createElement(Popover.Content, { variant: "translucent", align: "center" },
                React.createElement(RangeCalendar, { ...calendarProps })))));
}
//# sourceMappingURL=date-range-picker.js.map