'use client';
import classNames from 'classnames';
import * as React from 'react';
import { Tooltip } from '../tooltip';
const StackedHorizontalBarChart = (props) => {
    const { className, data, ...rootProps } = props;
    const sum = data.reduce((acc, dataPoint) => acc + dataPoint.value, 0);
    return (React.createElement("div", { ...rootProps, className: classNames('fui-StackedHorizontalBarChart', className) }, data.map((dataPoint, i) => {
        // Round to max 2 decimal places
        const percent = `${Math.round((dataPoint.value / sum) * 100 * 100) / 100}%`;
        const label = typeof dataPoint.label === 'string' ? dataPoint.label : dataPoint.label(dataPoint.value, percent);
        const ariaLabel = typeof dataPoint.label === 'string' ? `${dataPoint.label} ${percent}` : label;
        return (React.createElement(Tooltip, { content: label, key: i, delayDuration: 150, className: "fui-StackedHorizontalBarChartTooltip", "data-accent-color": dataPoint.color },
            React.createElement("div", { "data-accent-color": dataPoint.color, "aria-label": ariaLabel, className: "fui-StackedHorizontalBarChartBar", style: { width: percent } })));
    })));
};
StackedHorizontalBarChart.displayName = 'StackedHorizontalBarChart';
export { StackedHorizontalBarChart };
//# sourceMappingURL=stacked-horizontal-bar-chart.js.map