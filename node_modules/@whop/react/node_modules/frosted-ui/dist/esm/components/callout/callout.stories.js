import { InfoCircle16 } from '@frosted-ui/icons';
import React from 'react';
import { Callout, Code, Link, Text, calloutRootPropDefs } from '..';
// More on how to set up stories at: https://storybook.js.org/docs/react/writing-stories/introduction#default-export
const meta = {
    title: 'Components/Callout',
    component: Callout.Root,
    parameters: {
        // Optional parameter to center the component in the Canvas. More info: https://storybook.js.org/docs/react/configure/story-layout
        layout: 'centered',
    },
    // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/react/writing-docs/autodocs
    tags: ['autodocs'],
};
export default meta;
// More on writing stories with args: https://storybook.js.org/docs/react/writing-stories/args
export const Default = {
    args: {
        color: calloutRootPropDefs.color.default,
        variant: calloutRootPropDefs.variant.default,
        children: (React.createElement(React.Fragment, null,
            "You will need to upgrade to the ",
            React.createElement(Link, { href: "#" }, "newest Frosted-UI version"),
            " now.")),
    },
    render: ({ children, ...args }) => (React.createElement(Callout.Root, { ...args },
        React.createElement(Callout.Icon, null,
            React.createElement(InfoCircle16, null)),
        React.createElement(Callout.Text, null, children))),
};
export const Size = {
    args: {
        color: calloutRootPropDefs.color.default,
        variant: calloutRootPropDefs.variant.default,
        children: (React.createElement(React.Fragment, null,
            "You will need to upgrade to the ",
            React.createElement(Link, { href: "#" }, "newest Frosted-UI version"),
            " now.")),
    },
    render: ({ children, ...args }) => (React.createElement("div", { style: { display: 'flex', flexDirection: 'column', gap: 'var(--space-3)', alignItems: 'flex-start' } },
        React.createElement(Callout.Root, { ...args, size: "3" },
            React.createElement(Callout.Icon, null,
                React.createElement(Callout.Icon, null,
                    React.createElement(InfoCircle16, null))),
            React.createElement(Callout.Text, null, children)),
        React.createElement(Callout.Root, { ...args, size: "2" },
            React.createElement(Callout.Icon, null,
                React.createElement(Callout.Icon, null,
                    React.createElement(InfoCircle16, null))),
            React.createElement(Callout.Text, null, children)),
        React.createElement(Callout.Root, { ...args, size: "1" },
            React.createElement(Callout.Icon, null,
                React.createElement(Callout.Icon, null,
                    React.createElement(InfoCircle16, null))),
            React.createElement(Callout.Text, null, children)))),
};
export const Variant = {
    args: {
        color: calloutRootPropDefs.color.default,
        children: (React.createElement(React.Fragment, null,
            "You will need to upgrade to the ",
            React.createElement(Link, { href: "#" }, "newest Frosted-UI version"),
            " now.")),
    },
    render: ({ children, ...args }) => (React.createElement("div", { style: { display: 'flex', flexDirection: 'column', gap: 'var(--space-3)' } },
        React.createElement(Callout.Root, { ...args, variant: "soft" },
            React.createElement(Callout.Icon, null,
                React.createElement(Callout.Icon, null,
                    React.createElement(InfoCircle16, null))),
            React.createElement(Callout.Text, null, children)),
        React.createElement(Callout.Root, { ...args, variant: "surface" },
            React.createElement(Callout.Icon, null,
                React.createElement(Callout.Icon, null,
                    React.createElement(InfoCircle16, null))),
            React.createElement(Callout.Text, null, children)),
        React.createElement(Callout.Root, { ...args, variant: "outline" },
            React.createElement(Callout.Icon, null,
                React.createElement(Callout.Icon, null,
                    React.createElement(InfoCircle16, null))),
            React.createElement(Callout.Text, null, children)))),
};
export const Color = {
    args: {
        color: calloutRootPropDefs.color.default,
        variant: calloutRootPropDefs.variant.default,
        children: (React.createElement(React.Fragment, null,
            "You will need to upgrade to the ",
            React.createElement(Link, { href: "#" }, "newest Frosted-UI version"),
            " now.")),
    },
    render: ({ children, ...args }) => (React.createElement("div", { style: { display: 'flex', flexDirection: 'column', gap: 'var(--space-3)' } },
        React.createElement(Callout.Root, { ...args, color: "blue" },
            React.createElement(Callout.Icon, null,
                React.createElement(Callout.Icon, null,
                    React.createElement(InfoCircle16, null))),
            React.createElement(Callout.Text, null, children)),
        React.createElement(Callout.Root, { ...args, color: "green" },
            React.createElement(Callout.Icon, null,
                React.createElement(Callout.Icon, null,
                    React.createElement(InfoCircle16, null))),
            React.createElement(Callout.Text, null, children)),
        React.createElement(Callout.Root, { ...args, color: "red" },
            React.createElement(Callout.Icon, null,
                React.createElement(Callout.Icon, null,
                    React.createElement(InfoCircle16, null))),
            React.createElement(Callout.Text, null, children)))),
};
export const SemanticColor = {
    name: 'Semantic color',
    args: {
        color: calloutRootPropDefs.color.default,
        variant: calloutRootPropDefs.variant.default,
        children: (React.createElement(React.Fragment, null,
            "You will need to upgrade to the ",
            React.createElement(Link, { href: "#" }, "newest Frosted-UI version"),
            " now.")),
    },
    render: ({ children, ...args }) => (React.createElement("div", { style: { display: 'flex', flexDirection: 'column', gap: 'var(--space-3)' } },
        React.createElement(Callout.Root, { ...args, color: "info" },
            React.createElement(Callout.Icon, null,
                React.createElement(Callout.Icon, null,
                    React.createElement(InfoCircle16, null))),
            React.createElement(Callout.Text, null, children)),
        React.createElement(Callout.Root, { ...args, color: "success" },
            React.createElement(Callout.Icon, null,
                React.createElement(Callout.Icon, null,
                    React.createElement(InfoCircle16, null))),
            React.createElement(Callout.Text, null, children)),
        React.createElement(Callout.Root, { ...args, color: "warning" },
            React.createElement(Callout.Icon, null,
                React.createElement(Callout.Icon, null,
                    React.createElement(InfoCircle16, null))),
            React.createElement(Callout.Text, null, children)),
        React.createElement(Callout.Root, { ...args, color: "danger" },
            React.createElement(Callout.Icon, null,
                React.createElement(Callout.Icon, null,
                    React.createElement(InfoCircle16, null))),
            React.createElement(Callout.Text, null, children)))),
};
export const HighContrast = {
    name: 'High Contrast',
    args: {
        color: calloutRootPropDefs.color.default,
        variant: calloutRootPropDefs.variant.default,
        children: (React.createElement(React.Fragment, null,
            "You will need to upgrade to the ",
            React.createElement(Link, { href: "#" }, "newest Frosted-UI version"),
            " now.")),
    },
    render: ({ children, ...args }) => (React.createElement("div", { style: { display: 'flex', flexDirection: 'column', gap: 'var(--space-3)' } },
        React.createElement(Callout.Root, { ...args, variant: "soft" },
            React.createElement(Callout.Icon, null,
                React.createElement(Callout.Icon, null,
                    React.createElement(InfoCircle16, null))),
            React.createElement(Callout.Text, null, children)),
        React.createElement(Callout.Root, { ...args, variant: "soft", highContrast: true },
            React.createElement(Callout.Icon, null,
                React.createElement(Callout.Icon, null,
                    React.createElement(InfoCircle16, null))),
            React.createElement(Callout.Text, null, children)))),
};
export const AsAlert = {
    name: 'As Alert',
    render: (args) => (React.createElement(React.Fragment, null,
        React.createElement("div", { style: { maxWidth: 500 } },
            React.createElement(Text, null,
                "Add a native",
                ' ',
                React.createElement(Link, { href: "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/alert_role", target: "_blank" },
                    "WAI-ARIA ",
                    React.createElement(Code, null, "alert"),
                    " role"),
                ' ',
                "to the callout when the user's immediate attention is required, like when an error message appears. The screen reader will be interrupted, announcing the new content immediately.")),
        React.createElement("br", null),
        React.createElement("div", { style: { display: 'inline-block' } },
            React.createElement(Callout.Root, { ...args, color: "red", role: "alert" },
                React.createElement(Callout.Icon, null,
                    React.createElement(Callout.Icon, null, "\uD83D\uDEA8")),
                React.createElement(Callout.Text, null, "Access denied. Please contact the network administrator to view this page."))))),
};
//# sourceMappingURL=callout.stories.js.map