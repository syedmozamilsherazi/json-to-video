import React from 'react';
const Shine = ({ children, puffyness = '1', ...otherProps }) => {
    const filterId = React.useId();
    const filterRef = React.useRef(null);
    const childrenWrapperRef = React.useRef(null);
    const mouse = React.useRef({
        x: 0,
        y: 0,
    });
    React.useEffect(() => {
        const children = childrenWrapperRef.current;
        const filterElement = filterRef.current;
        const lightElement = filterElement === null || filterElement === void 0 ? void 0 : filterElement.querySelector('fePointLight');
        if (!filterElement || !children || !lightElement)
            return;
        const onPointerMove = (event) => {
            const childrenBox = children.getBoundingClientRect();
            mouse.current = {
                x: event.pageX - window.scrollX,
                y: event.pageY - window.scrollY,
            };
            lightElement.setAttribute('y', (mouse.current.y - childrenBox.top).toString());
            lightElement.setAttribute('x', (mouse.current.x - childrenBox.left).toString());
        };
        const onScroll = () => {
            const childrenBox = children.getBoundingClientRect();
            lightElement.setAttribute('y', (mouse.current.y - childrenBox.top).toString());
            lightElement.setAttribute('x', (mouse.current.x - childrenBox.left).toString());
        };
        document.addEventListener('pointermove', onPointerMove);
        document.addEventListener('scroll', onScroll);
        return () => {
            document.removeEventListener('pointermove', onPointerMove);
            document.removeEventListener('scroll', onScroll);
        };
    }, []);
    return (React.createElement("div", { className: "fui-Shine", ...otherProps },
        React.createElement("svg", { width: "0", height: "0", className: "fui-ShineSvgFilter" },
            React.createElement("filter", { id: filterId, ref: filterRef, colorInterpolationFilters: "sRGB" },
                React.createElement("feGaussianBlur", { in: "SourceAlpha", stdDeviation: puffyness }),
                React.createElement("feSpecularLighting", { result: "light-source", 
                    // represents the height of the surface for a light filter primitive
                    surfaceScale: "2", 
                    // The bigger the value the bigger the reflection
                    specularConstant: '0.5', 
                    // controls the focus for the light source. The bigger the value the brighter the light
                    specularExponent: "300", lightingColor: "#666666" },
                    React.createElement("fePointLight", { x: "60", y: "69", z: "300" })),
                React.createElement("feComposite", { result: "reflections", in: "light-source", in2: "SourceAlpha", operator: "in" }),
                React.createElement("feComposite", { in: "SourceGraphic", in2: "reflections", operator: "arithmetic", k1: "0", k2: "1", k3: "1", k4: "0" }))),
        React.createElement("div", { style: { filter: `url(#${filterId})`, isolation: 'isolate' }, ref: childrenWrapperRef }, children)));
};
export { Shine };
//# sourceMappingURL=shine.js.map