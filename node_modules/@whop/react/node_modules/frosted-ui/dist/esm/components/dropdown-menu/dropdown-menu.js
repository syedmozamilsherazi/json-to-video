'use client';
import classNames from 'classnames';
import { DropdownMenu as DropdownMenuPrimitive, Slot } from 'radix-ui';
import * as React from 'react';
import { ThickCheckIcon, ThickChevronRightIcon } from '../../icons';
import { Theme, useThemeContext } from '../../theme';
import { ScrollArea } from '../scroll-area';
import { dropdownMenuContentPropDefs, dropdownMenuItemPropDefs, } from './dropdown-menu.props';
const DropdownMenuRoot = (props) => React.createElement(DropdownMenuPrimitive.Root, { ...props });
DropdownMenuRoot.displayName = 'DropdownMenuRoot';
const DropdownMenuTrigger = (props) => React.createElement(DropdownMenuPrimitive.Trigger, { ...props, asChild: true });
DropdownMenuTrigger.displayName = 'DropdownMenuTrigger';
const DropdownMenuContentContext = React.createContext({});
const DropdownMenuContent = (props) => {
    const themeContext = useThemeContext();
    const { className, children, size = dropdownMenuContentPropDefs.size.default, color = dropdownMenuItemPropDefs.color.default, variant = dropdownMenuContentPropDefs.variant.default, container, forceMount, ...contentProps } = props;
    const resolvedColor = color !== null && color !== void 0 ? color : themeContext.accentColor;
    return (React.createElement(DropdownMenuPrimitive.Portal, { container: container, forceMount: forceMount },
        React.createElement(Theme, { asChild: true },
            React.createElement(DropdownMenuPrimitive.Content, { "data-accent-color": resolvedColor, align: "start", sideOffset: 4, collisionPadding: 10, ...contentProps, className: classNames('fui-PopperContent', 'fui-BaseMenuContent', 'fui-DropdownMenuContent', `fui-variant-${variant}`, className, `fui-r-size-${size}`) },
                React.createElement(ScrollArea, { type: "auto" },
                    React.createElement("div", { className: classNames('fui-BaseMenuViewport', 'fui-DropdownMenuViewport') },
                        React.createElement(DropdownMenuContentContext.Provider, { value: React.useMemo(() => ({ size, color: resolvedColor, variant }), [size, resolvedColor, variant]) }, children)))))));
};
DropdownMenuContent.displayName = 'DropdownMenuContent';
const DropdownMenuLabel = (props) => (React.createElement(DropdownMenuPrimitive.Label, { ...props, className: classNames('fui-BaseMenuLabel', 'fui-DropdownMenuLabel', props.className) }));
DropdownMenuLabel.displayName = 'DropdownMenuLabel';
const DropdownMenuItem = (props) => {
    const { className, children, color = dropdownMenuItemPropDefs.color.default, shortcut, ...itemProps } = props;
    return (React.createElement(DropdownMenuPrimitive.Item, { "data-accent-color": color, ...itemProps, className: classNames('fui-reset', 'fui-BaseMenuItem', 'fui-DropdownMenuItem', className) },
        React.createElement(Slot.Slottable, null, children),
        shortcut && React.createElement("div", { className: "fui-BaseMenuShortcut fui-DropdownMenuShortcut" }, shortcut)));
};
DropdownMenuItem.displayName = 'DropdownMenuItem';
const DropdownMenuGroup = (props) => (React.createElement(DropdownMenuPrimitive.Group, { ...props, className: classNames('fui-BaseMenuGroup', 'fui-DropdownMenuGroup', props.className) }));
DropdownMenuGroup.displayName = 'DropdownMenuGroup';
const DropdownMenuRadioGroup = (props) => (React.createElement(DropdownMenuPrimitive.RadioGroup, { ...props, className: classNames('fui-BaseMenuRadioGroup', 'fui-DropdownMenuRadioGroup', props.className) }));
DropdownMenuRadioGroup.displayName = 'DropdownMenuRadioGroup';
const DropdownMenuRadioItem = (props) => {
    const { children, className, ...itemProps } = props;
    return (React.createElement(DropdownMenuPrimitive.RadioItem, { ...itemProps, className: classNames('fui-BaseMenuItem', 'fui-BaseMenuRadioItem', 'fui-DropdownMenuItem', 'fui-DropdownMenuRadioItem', className) },
        React.createElement(Slot.Slottable, null, children),
        React.createElement(DropdownMenuPrimitive.ItemIndicator, { className: "fui-BaseMenuItemIndicator fui-DropdownMenuItemIndicator" },
            React.createElement(ThickCheckIcon, { className: "fui-BaseMenuItemIndicatorIcon fui-DropdownMenuItemIndicatorIcon" }))));
};
DropdownMenuRadioItem.displayName = 'DropdownMenuRadioItem';
const DropdownMenuCheckboxItem = (props) => {
    const { children, className, shortcut, ...itemProps } = props;
    return (React.createElement(DropdownMenuPrimitive.CheckboxItem, { ...itemProps, className: classNames('fui-BaseMenuItem', 'fui-BaseMenuCheckboxItem', 'fui-DropdownMenuItem', 'fui-DropdownMenuCheckboxItem', className) },
        React.createElement(Slot.Slottable, null, children),
        React.createElement(DropdownMenuPrimitive.ItemIndicator, { className: "fui-BaseMenuItemIndicator fui-DropdownMenuItemIndicator" },
            React.createElement(ThickCheckIcon, { className: "fui-BaseMenuItemIndicatorIcon fui-DropdownMenuItemIndicatorIcon" })),
        shortcut && React.createElement("div", { className: "fui-BaseMenuShortcut fui-DropdownMenuShortcut" }, shortcut)));
};
DropdownMenuCheckboxItem.displayName = 'DropdownMenuCheckboxItem';
const DropdownMenuSub = (props) => React.createElement(DropdownMenuPrimitive.Sub, { ...props });
DropdownMenuSub.displayName = 'DropdownMenuSub';
const DropdownMenuSubTrigger = (props) => {
    const { className, children, ...subTriggerProps } = props;
    return (React.createElement(DropdownMenuPrimitive.SubTrigger, { ...subTriggerProps, className: classNames('fui-BaseMenuItem', 'fui-BaseMenuSubTrigger', 'fui-DropdownMenuItem', 'fui-DropdownMenuSubTrigger', className) },
        React.createElement(Slot.Slottable, null, children),
        React.createElement("div", { className: "fui-BaseMenuShortcut fui-DropdownMenuShortcut" },
            React.createElement(ThickChevronRightIcon, { className: "fui-BaseMenuSubTriggerIcon fui-DropdownMenuSubTriggerIcon" }))));
};
DropdownMenuSubTrigger.displayName = 'DropdownMenuSubTrigger';
const DropdownMenuSubContent = (props) => {
    const { className, children, container, forceMount, ...subContentProps } = props;
    const { size, color, variant } = React.useContext(DropdownMenuContentContext);
    return (React.createElement(DropdownMenuPrimitive.Portal, { container: container, forceMount: forceMount },
        React.createElement(Theme, { asChild: true },
            React.createElement(DropdownMenuPrimitive.SubContent, { "data-accent-color": color, alignOffset: -4, sideOffset: 2, collisionPadding: 10, ...subContentProps, className: classNames('fui-PopperContent', 'fui-BaseMenuContent', 'fui-BaseMenuSubContent', 'fui-DropdownMenuContent', 'fui-DropdownMenuSubContent', `fui-variant-${variant}`, className, `fui-r-size-${size}`) },
                React.createElement(ScrollArea, { type: "auto" },
                    React.createElement("div", { className: classNames('fui-BaseMenuViewport', 'fui-DropdownMenuViewport') }, children))))));
};
DropdownMenuSubContent.displayName = 'DropdownMenuSubContent';
const DropdownMenuSeparator = (props) => (React.createElement(DropdownMenuPrimitive.Separator, { ...props, className: classNames('fui-BaseMenuSeparator', 'fui-DropdownMenuSeparator', props.className) }));
DropdownMenuSeparator.displayName = 'DropdownMenuSeparator';
export { DropdownMenuCheckboxItem as CheckboxItem, DropdownMenuContent as Content, DropdownMenuGroup as Group, DropdownMenuItem as Item, DropdownMenuLabel as Label, DropdownMenuRadioGroup as RadioGroup, DropdownMenuRadioItem as RadioItem, DropdownMenuRoot as Root, DropdownMenuSeparator as Separator, DropdownMenuSub as Sub, DropdownMenuSubContent as SubContent, DropdownMenuSubTrigger as SubTrigger, DropdownMenuTrigger as Trigger, };
//# sourceMappingURL=dropdown-menu.js.map