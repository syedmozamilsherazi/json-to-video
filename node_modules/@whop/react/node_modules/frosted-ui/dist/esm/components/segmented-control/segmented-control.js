'use client';
import classNames from 'classnames';
import { Tabs as TabsPrimitive } from 'radix-ui';
import * as React from 'react';
const SegmentedControlRoot = (props) => {
    const { className, ...rootProps } = props;
    return React.createElement(TabsPrimitive.Root, { ...rootProps, className: classNames('fui-BaseSegmentedControlRoot', className) });
};
SegmentedControlRoot.displayName = 'SegmentedControlRoot';
const SegmentedControlList = (props) => {
    const { className, ...listProps } = props;
    return React.createElement(TabsPrimitive.List, { ...listProps, className: classNames('fui-BaseSegmentedControlList', className) });
};
SegmentedControlList.displayName = 'SegmentedControlList';
const SegmentedControlTrigger = (props) => {
    const { className, children, ...triggerProps } = props;
    return (React.createElement(TabsPrimitive.Trigger, { ...triggerProps, className: classNames('fui-reset', 'fui-BaseSegmentedControlTrigger', className) },
        React.createElement("span", { className: "fui-BaseSegmentedControlTriggerInner" }, children)));
};
SegmentedControlTrigger.displayName = 'SegmentedControlTrigger';
const SegmentedControlContent = (props) => (React.createElement(TabsPrimitive.Content, { ...props, className: classNames('fui-SegmentedControlContent', props.className) }));
SegmentedControlContent.displayName = 'SegmentedControlContent';
export { SegmentedControlContent as Content, SegmentedControlList as List, SegmentedControlRoot as Root, SegmentedControlTrigger as Trigger, };
//# sourceMappingURL=segmented-control.js.map