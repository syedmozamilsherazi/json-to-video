'use client';
import classNames from 'classnames';
import { Tooltip as TooltipPrimitive } from 'radix-ui';
import * as React from 'react';
import { Theme } from '../../theme';
import { Text } from '../text';
import { tooltipPropDefs } from './tooltip.props';
const Tooltip = (props) => {
    const { children, className, open, defaultOpen, onOpenChange, delayDuration, disableHoverableContent, content, container, forceMount, type = tooltipPropDefs.type.default, ...tooltipContentProps } = props;
    const [isOverflowing, setIsOverflowing] = React.useState(false);
    const [triggerElement, setTriggerElement] = React.useState(null);
    React.useLayoutEffect(() => {
        if (type === 'overflow' && triggerElement) {
            const updateTriggerOverflow = () => {
                const isOverflowing = triggerElement.offsetWidth < triggerElement.scrollWidth ||
                    triggerElement.offsetHeight < triggerElement.scrollHeight;
                setIsOverflowing(isOverflowing);
            };
            updateTriggerOverflow();
            const resizeObserver = new ResizeObserver(() => {
                updateTriggerOverflow();
            });
            resizeObserver.observe(triggerElement);
            const mutationObserver = new MutationObserver(() => {
                updateTriggerOverflow();
            });
            mutationObserver.observe(triggerElement, {
                attributes: true,
                childList: true,
                subtree: true,
            });
            return () => {
                resizeObserver.disconnect();
                mutationObserver.disconnect();
            };
        }
        else {
            setIsOverflowing(false);
        }
    }, [triggerElement, type]);
    const rootProps = {
        open: open !== undefined ? (type === 'overflow' ? open && isOverflowing : open) : open,
        defaultOpen: defaultOpen !== undefined ? (type === 'overflow' ? defaultOpen && isOverflowing : defaultOpen) : defaultOpen,
        onOpenChange,
        delayDuration,
        disableHoverableContent,
    };
    return (React.createElement(TooltipPrimitive.Root, { ...rootProps },
        React.createElement(TooltipPrimitive.Trigger, { asChild: true, ref: (e) => {
                setTriggerElement(e);
            } }, children),
        React.createElement(TooltipPrimitive.Portal, { container: container, forceMount: forceMount }, (type === 'overflow' ? isOverflowing : true) ? (React.createElement(Theme, { asChild: true },
            React.createElement(TooltipPrimitive.Content, { sideOffset: 4, collisionPadding: 10, ...tooltipContentProps, className: classNames('fui-TooltipContent', className) },
                React.createElement(Text, { as: "p", className: "fui-TooltipText", size: "1" }, content),
                React.createElement(TooltipPrimitive.Arrow, { className: "fui-TooltipArrow" })))) : null)));
};
Tooltip.displayName = 'Tooltip';
export { Tooltip };
//# sourceMappingURL=tooltip.js.map